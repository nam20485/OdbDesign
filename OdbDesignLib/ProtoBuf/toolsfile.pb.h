// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: toolsfile.proto
// Protobuf C++ Version: 5.29.2

#ifndef toolsfile_2eproto_2epb_2eh
#define toolsfile_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_toolsfile_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_toolsfile_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_toolsfile_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class ToolsFile;
struct ToolsFileDefaultTypeInternal;
extern ToolsFileDefaultTypeInternal _ToolsFile_default_instance_;
class ToolsFile_ToolsEntry_DoNotUse;
struct ToolsFile_ToolsEntry_DoNotUseDefaultTypeInternal;
extern ToolsFile_ToolsEntry_DoNotUseDefaultTypeInternal _ToolsFile_ToolsEntry_DoNotUse_default_instance_;
class ToolsFile_ToolsRecord;
struct ToolsFile_ToolsRecordDefaultTypeInternal;
extern ToolsFile_ToolsRecordDefaultTypeInternal _ToolsFile_ToolsRecord_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Odb {
namespace Lib {
namespace Protobuf {
enum ToolsFile_ToolsRecord_Type : int {
  ToolsFile_ToolsRecord_Type_Plated = 0,
  ToolsFile_ToolsRecord_Type_NonPlated = 1,
  ToolsFile_ToolsRecord_Type_Via = 2,
  ToolsFile_ToolsRecord_Type_ToolsFile_ToolsRecord_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ToolsFile_ToolsRecord_Type_ToolsFile_ToolsRecord_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ToolsFile_ToolsRecord_Type_IsValid(int value);
extern const uint32_t ToolsFile_ToolsRecord_Type_internal_data_[];
constexpr ToolsFile_ToolsRecord_Type ToolsFile_ToolsRecord_Type_Type_MIN = static_cast<ToolsFile_ToolsRecord_Type>(0);
constexpr ToolsFile_ToolsRecord_Type ToolsFile_ToolsRecord_Type_Type_MAX = static_cast<ToolsFile_ToolsRecord_Type>(2);
constexpr int ToolsFile_ToolsRecord_Type_Type_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ToolsFile_ToolsRecord_Type_descriptor();
template <typename T>
const std::string& ToolsFile_ToolsRecord_Type_Name(T value) {
  static_assert(std::is_same<T, ToolsFile_ToolsRecord_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return ToolsFile_ToolsRecord_Type_Name(static_cast<ToolsFile_ToolsRecord_Type>(value));
}
template <>
inline const std::string& ToolsFile_ToolsRecord_Type_Name(ToolsFile_ToolsRecord_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ToolsFile_ToolsRecord_Type_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ToolsFile_ToolsRecord_Type_Parse(absl::string_view name, ToolsFile_ToolsRecord_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ToolsFile_ToolsRecord_Type>(
      ToolsFile_ToolsRecord_Type_descriptor(), name, value);
}
enum ToolsFile_ToolsRecord_Type2 : int {
  ToolsFile_ToolsRecord_Type2_Standard = 0,
  ToolsFile_ToolsRecord_Type2_PressFit = 1,
  ToolsFile_ToolsRecord_Type2_Photo = 2,
  ToolsFile_ToolsRecord_Type2_Laser = 3,
  ToolsFile_ToolsRecord_Type2_ToolsFile_ToolsRecord_Type2_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ToolsFile_ToolsRecord_Type2_ToolsFile_ToolsRecord_Type2_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ToolsFile_ToolsRecord_Type2_IsValid(int value);
extern const uint32_t ToolsFile_ToolsRecord_Type2_internal_data_[];
constexpr ToolsFile_ToolsRecord_Type2 ToolsFile_ToolsRecord_Type2_Type2_MIN = static_cast<ToolsFile_ToolsRecord_Type2>(0);
constexpr ToolsFile_ToolsRecord_Type2 ToolsFile_ToolsRecord_Type2_Type2_MAX = static_cast<ToolsFile_ToolsRecord_Type2>(3);
constexpr int ToolsFile_ToolsRecord_Type2_Type2_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
ToolsFile_ToolsRecord_Type2_descriptor();
template <typename T>
const std::string& ToolsFile_ToolsRecord_Type2_Name(T value) {
  static_assert(std::is_same<T, ToolsFile_ToolsRecord_Type2>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type2_Name().");
  return ToolsFile_ToolsRecord_Type2_Name(static_cast<ToolsFile_ToolsRecord_Type2>(value));
}
template <>
inline const std::string& ToolsFile_ToolsRecord_Type2_Name(ToolsFile_ToolsRecord_Type2 value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ToolsFile_ToolsRecord_Type2_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool ToolsFile_ToolsRecord_Type2_Parse(absl::string_view name, ToolsFile_ToolsRecord_Type2* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ToolsFile_ToolsRecord_Type2>(
      ToolsFile_ToolsRecord_Type2_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ToolsFile_ToolsRecord final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.ToolsFile.ToolsRecord) */ {
 public:
  inline ToolsFile_ToolsRecord() : ToolsFile_ToolsRecord(nullptr) {}
  ~ToolsFile_ToolsRecord() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ToolsFile_ToolsRecord* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ToolsFile_ToolsRecord));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ToolsFile_ToolsRecord(
      ::google::protobuf::internal::ConstantInitialized);

  inline ToolsFile_ToolsRecord(const ToolsFile_ToolsRecord& from) : ToolsFile_ToolsRecord(nullptr, from) {}
  inline ToolsFile_ToolsRecord(ToolsFile_ToolsRecord&& from) noexcept
      : ToolsFile_ToolsRecord(nullptr, std::move(from)) {}
  inline ToolsFile_ToolsRecord& operator=(const ToolsFile_ToolsRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolsFile_ToolsRecord& operator=(ToolsFile_ToolsRecord&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolsFile_ToolsRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolsFile_ToolsRecord* internal_default_instance() {
    return reinterpret_cast<const ToolsFile_ToolsRecord*>(
        &_ToolsFile_ToolsRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ToolsFile_ToolsRecord& a, ToolsFile_ToolsRecord& b) { a.Swap(&b); }
  inline void Swap(ToolsFile_ToolsRecord* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolsFile_ToolsRecord* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolsFile_ToolsRecord* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ToolsFile_ToolsRecord>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ToolsFile_ToolsRecord& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ToolsFile_ToolsRecord& from) { ToolsFile_ToolsRecord::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ToolsFile_ToolsRecord* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Odb.Lib.Protobuf.ToolsFile.ToolsRecord"; }

 protected:
  explicit ToolsFile_ToolsRecord(::google::protobuf::Arena* arena);
  ToolsFile_ToolsRecord(::google::protobuf::Arena* arena, const ToolsFile_ToolsRecord& from);
  ToolsFile_ToolsRecord(::google::protobuf::Arena* arena, ToolsFile_ToolsRecord&& from) noexcept
      : ToolsFile_ToolsRecord(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = ToolsFile_ToolsRecord_Type;
  static constexpr Type Plated = ToolsFile_ToolsRecord_Type_Plated;
  static constexpr Type NonPlated = ToolsFile_ToolsRecord_Type_NonPlated;
  static constexpr Type Via = ToolsFile_ToolsRecord_Type_Via;
  static inline bool Type_IsValid(int value) {
    return ToolsFile_ToolsRecord_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = ToolsFile_ToolsRecord_Type_Type_MIN;
  static constexpr Type Type_MAX = ToolsFile_ToolsRecord_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = ToolsFile_ToolsRecord_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return ToolsFile_ToolsRecord_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return ToolsFile_ToolsRecord_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return ToolsFile_ToolsRecord_Type_Parse(name, value);
  }
  using Type2 = ToolsFile_ToolsRecord_Type2;
  static constexpr Type2 Standard = ToolsFile_ToolsRecord_Type2_Standard;
  static constexpr Type2 PressFit = ToolsFile_ToolsRecord_Type2_PressFit;
  static constexpr Type2 Photo = ToolsFile_ToolsRecord_Type2_Photo;
  static constexpr Type2 Laser = ToolsFile_ToolsRecord_Type2_Laser;
  static inline bool Type2_IsValid(int value) {
    return ToolsFile_ToolsRecord_Type2_IsValid(value);
  }
  static constexpr Type2 Type2_MIN = ToolsFile_ToolsRecord_Type2_Type2_MIN;
  static constexpr Type2 Type2_MAX = ToolsFile_ToolsRecord_Type2_Type2_MAX;
  static constexpr int Type2_ARRAYSIZE = ToolsFile_ToolsRecord_Type2_Type2_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type2_descriptor() {
    return ToolsFile_ToolsRecord_Type2_descriptor();
  }
  template <typename T>
  static inline const std::string& Type2_Name(T value) {
    return ToolsFile_ToolsRecord_Type2_Name(value);
  }
  static inline bool Type2_Parse(absl::string_view name, Type2* value) {
    return ToolsFile_ToolsRecord_Type2_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kDrillBitFieldNumber = 6,
    kToolNumFieldNumber = 1,
    kTypeFieldNumber = 2,
    kMinTolFieldNumber = 4,
    kMaxTolFieldNumber = 5,
    kFinishSizeFieldNumber = 7,
    kDrillSizeFieldNumber = 8,
    kType2FieldNumber = 3,
  };
  // string drill_bit = 6;
  void clear_drill_bit() ;
  const std::string& drill_bit() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_drill_bit(Arg_&& arg, Args_... args);
  std::string* mutable_drill_bit();
  PROTOBUF_NODISCARD std::string* release_drill_bit();
  void set_allocated_drill_bit(std::string* value);

  private:
  const std::string& _internal_drill_bit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_drill_bit(
      const std::string& value);
  std::string* _internal_mutable_drill_bit();

  public:
  // uint32 tool_num = 1;
  void clear_tool_num() ;
  ::uint32_t tool_num() const;
  void set_tool_num(::uint32_t value);

  private:
  ::uint32_t _internal_tool_num() const;
  void _internal_set_tool_num(::uint32_t value);

  public:
  // .Odb.Lib.Protobuf.ToolsFile.ToolsRecord.Type type = 2;
  void clear_type() ;
  ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type type() const;
  void set_type(::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type value);

  private:
  ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type _internal_type() const;
  void _internal_set_type(::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type value);

  public:
  // double min_tol = 4;
  void clear_min_tol() ;
  double min_tol() const;
  void set_min_tol(double value);

  private:
  double _internal_min_tol() const;
  void _internal_set_min_tol(double value);

  public:
  // double max_tol = 5;
  void clear_max_tol() ;
  double max_tol() const;
  void set_max_tol(double value);

  private:
  double _internal_max_tol() const;
  void _internal_set_max_tol(double value);

  public:
  // double finish_size = 7;
  void clear_finish_size() ;
  double finish_size() const;
  void set_finish_size(double value);

  private:
  double _internal_finish_size() const;
  void _internal_set_finish_size(double value);

  public:
  // double drill_size = 8;
  void clear_drill_size() ;
  double drill_size() const;
  void set_drill_size(double value);

  private:
  double _internal_drill_size() const;
  void _internal_set_drill_size(double value);

  public:
  // .Odb.Lib.Protobuf.ToolsFile.ToolsRecord.Type2 type2 = 3;
  void clear_type2() ;
  ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2 type2() const;
  void set_type2(::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2 value);

  private:
  ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2 _internal_type2() const;
  void _internal_set_type2(::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2 value);

  public:
  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.ToolsFile.ToolsRecord)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ToolsFile_ToolsRecord& from_msg);
    ::google::protobuf::internal::ArenaStringPtr drill_bit_;
    ::uint32_t tool_num_;
    int type_;
    double min_tol_;
    double max_tol_;
    double finish_size_;
    double drill_size_;
    int type2_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_toolsfile_2eproto;
};
// -------------------------------------------------------------------

class ToolsFile_ToolsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ::uint32_t, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ::uint32_t, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  ToolsFile_ToolsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ToolsFile_ToolsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ToolsFile_ToolsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ToolsFile_ToolsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ToolsFile_ToolsEntry_DoNotUse*>(
        &_ToolsFile_ToolsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_toolsfile_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ToolsFile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.ToolsFile) */ {
 public:
  inline ToolsFile() : ToolsFile(nullptr) {}
  ~ToolsFile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ToolsFile* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ToolsFile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ToolsFile(
      ::google::protobuf::internal::ConstantInitialized);

  inline ToolsFile(const ToolsFile& from) : ToolsFile(nullptr, from) {}
  inline ToolsFile(ToolsFile&& from) noexcept
      : ToolsFile(nullptr, std::move(from)) {}
  inline ToolsFile& operator=(const ToolsFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolsFile& operator=(ToolsFile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ToolsFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ToolsFile* internal_default_instance() {
    return reinterpret_cast<const ToolsFile*>(
        &_ToolsFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ToolsFile& a, ToolsFile& b) { a.Swap(&b); }
  inline void Swap(ToolsFile* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ToolsFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ToolsFile* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ToolsFile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ToolsFile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ToolsFile& from) { ToolsFile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ToolsFile* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Odb.Lib.Protobuf.ToolsFile"; }

 protected:
  explicit ToolsFile(::google::protobuf::Arena* arena);
  ToolsFile(::google::protobuf::Arena* arena, const ToolsFile& from);
  ToolsFile(::google::protobuf::Arena* arena, ToolsFile&& from) noexcept
      : ToolsFile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ToolsRecord = ToolsFile_ToolsRecord;

  // accessors -------------------------------------------------------
  enum : int {
    kToolsFieldNumber = 6,
    kDirectoryFieldNumber = 1,
    kPathFieldNumber = 2,
    kUnitsFieldNumber = 3,
    kUserParamsFieldNumber = 5,
    kThicknessFieldNumber = 4,
  };
  // map<uint32, .Odb.Lib.Protobuf.ToolsFile.ToolsRecord> tools = 6;
  int tools_size() const;
  private:
  int _internal_tools_size() const;

  public:
  void clear_tools() ;
  const ::google::protobuf::Map<::uint32_t, ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord>& tools() const;
  ::google::protobuf::Map<::uint32_t, ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord>* mutable_tools();

  private:
  const ::google::protobuf::Map<::uint32_t, ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord>& _internal_tools() const;
  ::google::protobuf::Map<::uint32_t, ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord>* _internal_mutable_tools();

  public:
  // string directory = 1;
  void clear_directory() ;
  const std::string& directory() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_directory(Arg_&& arg, Args_... args);
  std::string* mutable_directory();
  PROTOBUF_NODISCARD std::string* release_directory();
  void set_allocated_directory(std::string* value);

  private:
  const std::string& _internal_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_directory(
      const std::string& value);
  std::string* _internal_mutable_directory();

  public:
  // string path = 2;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string units = 3;
  void clear_units() ;
  const std::string& units() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_units(Arg_&& arg, Args_... args);
  std::string* mutable_units();
  PROTOBUF_NODISCARD std::string* release_units();
  void set_allocated_units(std::string* value);

  private:
  const std::string& _internal_units() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_units(
      const std::string& value);
  std::string* _internal_mutable_units();

  public:
  // string user_params = 5;
  void clear_user_params() ;
  const std::string& user_params() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_params(Arg_&& arg, Args_... args);
  std::string* mutable_user_params();
  PROTOBUF_NODISCARD std::string* release_user_params();
  void set_allocated_user_params(std::string* value);

  private:
  const std::string& _internal_user_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_params(
      const std::string& value);
  std::string* _internal_mutable_user_params();

  public:
  // double thickness = 4;
  void clear_thickness() ;
  double thickness() const;
  void set_thickness(double value);

  private:
  double _internal_thickness() const;
  void _internal_set_thickness(double value);

  public:
  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.ToolsFile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ToolsFile& from_msg);
    ::google::protobuf::internal::MapField<ToolsFile_ToolsEntry_DoNotUse, ::uint32_t, ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord,
                      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        tools_;
    ::google::protobuf::internal::ArenaStringPtr directory_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr units_;
    ::google::protobuf::internal::ArenaStringPtr user_params_;
    double thickness_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_toolsfile_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ToolsFile_ToolsRecord

// uint32 tool_num = 1;
inline void ToolsFile_ToolsRecord::clear_tool_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tool_num_ = 0u;
}
inline ::uint32_t ToolsFile_ToolsRecord::tool_num() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.tool_num)
  return _internal_tool_num();
}
inline void ToolsFile_ToolsRecord::set_tool_num(::uint32_t value) {
  _internal_set_tool_num(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.tool_num)
}
inline ::uint32_t ToolsFile_ToolsRecord::_internal_tool_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tool_num_;
}
inline void ToolsFile_ToolsRecord::_internal_set_tool_num(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tool_num_ = value;
}

// .Odb.Lib.Protobuf.ToolsFile.ToolsRecord.Type type = 2;
inline void ToolsFile_ToolsRecord::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type ToolsFile_ToolsRecord::type() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.type)
  return _internal_type();
}
inline void ToolsFile_ToolsRecord::set_type(::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.type)
}
inline ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type ToolsFile_ToolsRecord::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type>(_impl_.type_);
}
inline void ToolsFile_ToolsRecord::_internal_set_type(::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// .Odb.Lib.Protobuf.ToolsFile.ToolsRecord.Type2 type2 = 3;
inline void ToolsFile_ToolsRecord::clear_type2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type2_ = 0;
}
inline ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2 ToolsFile_ToolsRecord::type2() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.type2)
  return _internal_type2();
}
inline void ToolsFile_ToolsRecord::set_type2(::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2 value) {
  _internal_set_type2(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.type2)
}
inline ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2 ToolsFile_ToolsRecord::_internal_type2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2>(_impl_.type2_);
}
inline void ToolsFile_ToolsRecord::_internal_set_type2(::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type2_ = value;
}

// double min_tol = 4;
inline void ToolsFile_ToolsRecord::clear_min_tol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_tol_ = 0;
}
inline double ToolsFile_ToolsRecord::min_tol() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.min_tol)
  return _internal_min_tol();
}
inline void ToolsFile_ToolsRecord::set_min_tol(double value) {
  _internal_set_min_tol(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.min_tol)
}
inline double ToolsFile_ToolsRecord::_internal_min_tol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.min_tol_;
}
inline void ToolsFile_ToolsRecord::_internal_set_min_tol(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.min_tol_ = value;
}

// double max_tol = 5;
inline void ToolsFile_ToolsRecord::clear_max_tol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_tol_ = 0;
}
inline double ToolsFile_ToolsRecord::max_tol() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.max_tol)
  return _internal_max_tol();
}
inline void ToolsFile_ToolsRecord::set_max_tol(double value) {
  _internal_set_max_tol(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.max_tol)
}
inline double ToolsFile_ToolsRecord::_internal_max_tol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_tol_;
}
inline void ToolsFile_ToolsRecord::_internal_set_max_tol(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_tol_ = value;
}

// string drill_bit = 6;
inline void ToolsFile_ToolsRecord::clear_drill_bit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drill_bit_.ClearToEmpty();
}
inline const std::string& ToolsFile_ToolsRecord::drill_bit() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.drill_bit)
  return _internal_drill_bit();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ToolsFile_ToolsRecord::set_drill_bit(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drill_bit_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.drill_bit)
}
inline std::string* ToolsFile_ToolsRecord::mutable_drill_bit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_drill_bit();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.drill_bit)
  return _s;
}
inline const std::string& ToolsFile_ToolsRecord::_internal_drill_bit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.drill_bit_.Get();
}
inline void ToolsFile_ToolsRecord::_internal_set_drill_bit(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drill_bit_.Set(value, GetArena());
}
inline std::string* ToolsFile_ToolsRecord::_internal_mutable_drill_bit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.drill_bit_.Mutable( GetArena());
}
inline std::string* ToolsFile_ToolsRecord::release_drill_bit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.drill_bit)
  return _impl_.drill_bit_.Release();
}
inline void ToolsFile_ToolsRecord::set_allocated_drill_bit(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drill_bit_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.drill_bit_.IsDefault()) {
    _impl_.drill_bit_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.drill_bit)
}

// double finish_size = 7;
inline void ToolsFile_ToolsRecord::clear_finish_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finish_size_ = 0;
}
inline double ToolsFile_ToolsRecord::finish_size() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.finish_size)
  return _internal_finish_size();
}
inline void ToolsFile_ToolsRecord::set_finish_size(double value) {
  _internal_set_finish_size(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.finish_size)
}
inline double ToolsFile_ToolsRecord::_internal_finish_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.finish_size_;
}
inline void ToolsFile_ToolsRecord::_internal_set_finish_size(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.finish_size_ = value;
}

// double drill_size = 8;
inline void ToolsFile_ToolsRecord::clear_drill_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drill_size_ = 0;
}
inline double ToolsFile_ToolsRecord::drill_size() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.drill_size)
  return _internal_drill_size();
}
inline void ToolsFile_ToolsRecord::set_drill_size(double value) {
  _internal_set_drill_size(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.ToolsRecord.drill_size)
}
inline double ToolsFile_ToolsRecord::_internal_drill_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.drill_size_;
}
inline void ToolsFile_ToolsRecord::_internal_set_drill_size(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drill_size_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ToolsFile

// string directory = 1;
inline void ToolsFile::clear_directory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.directory_.ClearToEmpty();
}
inline const std::string& ToolsFile::directory() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.directory)
  return _internal_directory();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ToolsFile::set_directory(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.directory_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.directory)
}
inline std::string* ToolsFile::mutable_directory() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_directory();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ToolsFile.directory)
  return _s;
}
inline const std::string& ToolsFile::_internal_directory() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.directory_.Get();
}
inline void ToolsFile::_internal_set_directory(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.directory_.Set(value, GetArena());
}
inline std::string* ToolsFile::_internal_mutable_directory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.directory_.Mutable( GetArena());
}
inline std::string* ToolsFile::release_directory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ToolsFile.directory)
  return _impl_.directory_.Release();
}
inline void ToolsFile::set_allocated_directory(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.directory_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.directory_.IsDefault()) {
    _impl_.directory_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ToolsFile.directory)
}

// string path = 2;
inline void ToolsFile::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& ToolsFile::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ToolsFile::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.path)
}
inline std::string* ToolsFile::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ToolsFile.path)
  return _s;
}
inline const std::string& ToolsFile::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void ToolsFile::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* ToolsFile::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* ToolsFile::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ToolsFile.path)
  return _impl_.path_.Release();
}
inline void ToolsFile::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ToolsFile.path)
}

// string units = 3;
inline void ToolsFile::clear_units() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.units_.ClearToEmpty();
}
inline const std::string& ToolsFile::units() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.units)
  return _internal_units();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ToolsFile::set_units(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.units_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.units)
}
inline std::string* ToolsFile::mutable_units() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_units();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ToolsFile.units)
  return _s;
}
inline const std::string& ToolsFile::_internal_units() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.units_.Get();
}
inline void ToolsFile::_internal_set_units(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.units_.Set(value, GetArena());
}
inline std::string* ToolsFile::_internal_mutable_units() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.units_.Mutable( GetArena());
}
inline std::string* ToolsFile::release_units() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ToolsFile.units)
  return _impl_.units_.Release();
}
inline void ToolsFile::set_allocated_units(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.units_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ToolsFile.units)
}

// double thickness = 4;
inline void ToolsFile::clear_thickness() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thickness_ = 0;
}
inline double ToolsFile::thickness() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.thickness)
  return _internal_thickness();
}
inline void ToolsFile::set_thickness(double value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.thickness)
}
inline double ToolsFile::_internal_thickness() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.thickness_;
}
inline void ToolsFile::_internal_set_thickness(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.thickness_ = value;
}

// string user_params = 5;
inline void ToolsFile::clear_user_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_params_.ClearToEmpty();
}
inline const std::string& ToolsFile::user_params() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ToolsFile.user_params)
  return _internal_user_params();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ToolsFile::set_user_params(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_params_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ToolsFile.user_params)
}
inline std::string* ToolsFile::mutable_user_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_params();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ToolsFile.user_params)
  return _s;
}
inline const std::string& ToolsFile::_internal_user_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_params_.Get();
}
inline void ToolsFile::_internal_set_user_params(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_params_.Set(value, GetArena());
}
inline std::string* ToolsFile::_internal_mutable_user_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_params_.Mutable( GetArena());
}
inline std::string* ToolsFile::release_user_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ToolsFile.user_params)
  return _impl_.user_params_.Release();
}
inline void ToolsFile::set_allocated_user_params(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_params_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_params_.IsDefault()) {
    _impl_.user_params_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ToolsFile.user_params)
}

// map<uint32, .Odb.Lib.Protobuf.ToolsFile.ToolsRecord> tools = 6;
inline int ToolsFile::_internal_tools_size() const {
  return _internal_tools().size();
}
inline int ToolsFile::tools_size() const {
  return _internal_tools_size();
}
inline void ToolsFile::clear_tools() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tools_.Clear();
}
inline const ::google::protobuf::Map<::uint32_t, ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord>& ToolsFile::_internal_tools() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tools_.GetMap();
}
inline const ::google::protobuf::Map<::uint32_t, ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord>& ToolsFile::tools() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.ToolsFile.tools)
  return _internal_tools();
}
inline ::google::protobuf::Map<::uint32_t, ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord>* ToolsFile::_internal_mutable_tools() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tools_.MutableMap();
}
inline ::google::protobuf::Map<::uint32_t, ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord>* ToolsFile::mutable_tools() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.ToolsFile.tools)
  return _internal_mutable_tools();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type>() {
  return ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type_descriptor();
}
template <>
struct is_proto_enum<::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2>() {
  return ::Odb::Lib::Protobuf::ToolsFile_ToolsRecord_Type2_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // toolsfile_2eproto_2epb_2eh
