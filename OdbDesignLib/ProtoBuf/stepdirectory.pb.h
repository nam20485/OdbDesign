// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stepdirectory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stepdirectory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stepdirectory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "edadatafile.pb.h"
#include "netlistfile.pb.h"
#include "layerdirectory.pb.h"
#include "attrlistfile.pb.h"
#include "featuresfile.pb.h"
#include "stephdrfile.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stepdirectory_2eproto ODBDESIGN_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_stepdirectory_2eproto {
  static const uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stepdirectory_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class StepDirectory;
struct StepDirectoryDefaultTypeInternal;
ODBDESIGN_EXPORT extern StepDirectoryDefaultTypeInternal _StepDirectory_default_instance_;
class StepDirectory_LayersByNameEntry_DoNotUse;
struct StepDirectory_LayersByNameEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern StepDirectory_LayersByNameEntry_DoNotUseDefaultTypeInternal _StepDirectory_LayersByNameEntry_DoNotUse_default_instance_;
class StepDirectory_NetlistsByNameEntry_DoNotUse;
struct StepDirectory_NetlistsByNameEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern StepDirectory_NetlistsByNameEntry_DoNotUseDefaultTypeInternal _StepDirectory_NetlistsByNameEntry_DoNotUse_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::StepDirectory* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::StepDirectory>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::StepDirectory_LayersByNameEntry_DoNotUse* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::StepDirectory_LayersByNameEntry_DoNotUse>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::StepDirectory_NetlistsByNameEntry_DoNotUse* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::StepDirectory_NetlistsByNameEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================

class StepDirectory_LayersByNameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StepDirectory_LayersByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::LayerDirectory,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StepDirectory_LayersByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::LayerDirectory,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  StepDirectory_LayersByNameEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StepDirectory_LayersByNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StepDirectory_LayersByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StepDirectory_LayersByNameEntry_DoNotUse& other);
  static const StepDirectory_LayersByNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StepDirectory_LayersByNameEntry_DoNotUse*>(&_StepDirectory_LayersByNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.StepDirectory.LayersByNameEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_stepdirectory_2eproto;
};

// -------------------------------------------------------------------

class StepDirectory_NetlistsByNameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StepDirectory_NetlistsByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::NetlistFile,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StepDirectory_NetlistsByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::NetlistFile,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  StepDirectory_NetlistsByNameEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StepDirectory_NetlistsByNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StepDirectory_NetlistsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StepDirectory_NetlistsByNameEntry_DoNotUse& other);
  static const StepDirectory_NetlistsByNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StepDirectory_NetlistsByNameEntry_DoNotUse*>(&_StepDirectory_NetlistsByNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.StepDirectory.NetlistsByNameEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_stepdirectory_2eproto;
};

// -------------------------------------------------------------------

class ODBDESIGN_EXPORT StepDirectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.StepDirectory) */ {
 public:
  inline StepDirectory() : StepDirectory(nullptr) {}
  ~StepDirectory() override;
  explicit PROTOBUF_CONSTEXPR StepDirectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepDirectory(const StepDirectory& from);
  StepDirectory(StepDirectory&& from) noexcept
    : StepDirectory() {
    *this = ::std::move(from);
  }

  inline StepDirectory& operator=(const StepDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepDirectory& operator=(StepDirectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepDirectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepDirectory* internal_default_instance() {
    return reinterpret_cast<const StepDirectory*>(
               &_StepDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StepDirectory& a, StepDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(StepDirectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StepDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StepDirectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StepDirectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StepDirectory& from) {
    StepDirectory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepDirectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.StepDirectory";
  }
  protected:
  explicit StepDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLayersByNameFieldNumber = 3,
    kNetlistsByNameFieldNumber = 4,
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kEdadatafileFieldNumber = 5,
    kAttrlistfileFieldNumber = 6,
    kProfilefileFieldNumber = 7,
    kStephdrfileFieldNumber = 8,
  };
  // map<string, .Odb.Lib.Protobuf.LayerDirectory> layersByName = 3;
  int layersbyname_size() const;
  private:
  int _internal_layersbyname_size() const;
  public:
  void clear_layersbyname();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::LayerDirectory >&
      _internal_layersbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::LayerDirectory >*
      _internal_mutable_layersbyname();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::LayerDirectory >&
      layersbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::LayerDirectory >*
      mutable_layersbyname();

  // map<string, .Odb.Lib.Protobuf.NetlistFile> netlistsByName = 4;
  int netlistsbyname_size() const;
  private:
  int _internal_netlistsbyname_size() const;
  public:
  void clear_netlistsbyname();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::NetlistFile >&
      _internal_netlistsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::NetlistFile >*
      _internal_mutable_netlistsbyname();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::NetlistFile >&
      netlistsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::NetlistFile >*
      mutable_netlistsbyname();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional .Odb.Lib.Protobuf.EdaDataFile edadatafile = 5;
  bool has_edadatafile() const;
  private:
  bool _internal_has_edadatafile() const;
  public:
  void clear_edadatafile();
  const ::Odb::Lib::Protobuf::EdaDataFile& edadatafile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::EdaDataFile* release_edadatafile();
  ::Odb::Lib::Protobuf::EdaDataFile* mutable_edadatafile();
  void set_allocated_edadatafile(::Odb::Lib::Protobuf::EdaDataFile* edadatafile);
  private:
  const ::Odb::Lib::Protobuf::EdaDataFile& _internal_edadatafile() const;
  ::Odb::Lib::Protobuf::EdaDataFile* _internal_mutable_edadatafile();
  public:
  void unsafe_arena_set_allocated_edadatafile(
      ::Odb::Lib::Protobuf::EdaDataFile* edadatafile);
  ::Odb::Lib::Protobuf::EdaDataFile* unsafe_arena_release_edadatafile();

  // optional .Odb.Lib.Protobuf.AttrListFile attrlistfile = 6;
  bool has_attrlistfile() const;
  private:
  bool _internal_has_attrlistfile() const;
  public:
  void clear_attrlistfile();
  const ::Odb::Lib::Protobuf::AttrListFile& attrlistfile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::AttrListFile* release_attrlistfile();
  ::Odb::Lib::Protobuf::AttrListFile* mutable_attrlistfile();
  void set_allocated_attrlistfile(::Odb::Lib::Protobuf::AttrListFile* attrlistfile);
  private:
  const ::Odb::Lib::Protobuf::AttrListFile& _internal_attrlistfile() const;
  ::Odb::Lib::Protobuf::AttrListFile* _internal_mutable_attrlistfile();
  public:
  void unsafe_arena_set_allocated_attrlistfile(
      ::Odb::Lib::Protobuf::AttrListFile* attrlistfile);
  ::Odb::Lib::Protobuf::AttrListFile* unsafe_arena_release_attrlistfile();

  // optional .Odb.Lib.Protobuf.FeaturesFile profilefile = 7;
  bool has_profilefile() const;
  private:
  bool _internal_has_profilefile() const;
  public:
  void clear_profilefile();
  const ::Odb::Lib::Protobuf::FeaturesFile& profilefile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::FeaturesFile* release_profilefile();
  ::Odb::Lib::Protobuf::FeaturesFile* mutable_profilefile();
  void set_allocated_profilefile(::Odb::Lib::Protobuf::FeaturesFile* profilefile);
  private:
  const ::Odb::Lib::Protobuf::FeaturesFile& _internal_profilefile() const;
  ::Odb::Lib::Protobuf::FeaturesFile* _internal_mutable_profilefile();
  public:
  void unsafe_arena_set_allocated_profilefile(
      ::Odb::Lib::Protobuf::FeaturesFile* profilefile);
  ::Odb::Lib::Protobuf::FeaturesFile* unsafe_arena_release_profilefile();

  // optional .Odb.Lib.Protobuf.StepHdrFile stephdrfile = 8;
  bool has_stephdrfile() const;
  private:
  bool _internal_has_stephdrfile() const;
  public:
  void clear_stephdrfile();
  const ::Odb::Lib::Protobuf::StepHdrFile& stephdrfile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::StepHdrFile* release_stephdrfile();
  ::Odb::Lib::Protobuf::StepHdrFile* mutable_stephdrfile();
  void set_allocated_stephdrfile(::Odb::Lib::Protobuf::StepHdrFile* stephdrfile);
  private:
  const ::Odb::Lib::Protobuf::StepHdrFile& _internal_stephdrfile() const;
  ::Odb::Lib::Protobuf::StepHdrFile* _internal_mutable_stephdrfile();
  public:
  void unsafe_arena_set_allocated_stephdrfile(
      ::Odb::Lib::Protobuf::StepHdrFile* stephdrfile);
  ::Odb::Lib::Protobuf::StepHdrFile* unsafe_arena_release_stephdrfile();

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.StepDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        StepDirectory_LayersByNameEntry_DoNotUse,
        std::string, ::Odb::Lib::Protobuf::LayerDirectory,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> layersbyname_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        StepDirectory_NetlistsByNameEntry_DoNotUse,
        std::string, ::Odb::Lib::Protobuf::NetlistFile,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> netlistsbyname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::Odb::Lib::Protobuf::EdaDataFile* edadatafile_;
    ::Odb::Lib::Protobuf::AttrListFile* attrlistfile_;
    ::Odb::Lib::Protobuf::FeaturesFile* profilefile_;
    ::Odb::Lib::Protobuf::StepHdrFile* stephdrfile_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stepdirectory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StepDirectory

// optional string name = 1;
inline bool StepDirectory::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StepDirectory::has_name() const {
  return _internal_has_name();
}
inline void StepDirectory::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StepDirectory::name() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepDirectory.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StepDirectory::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepDirectory.name)
}
inline std::string* StepDirectory::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepDirectory.name)
  return _s;
}
inline const std::string& StepDirectory::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StepDirectory::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StepDirectory::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StepDirectory::release_name() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.StepDirectory.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StepDirectory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.StepDirectory.name)
}

// optional string path = 2;
inline bool StepDirectory::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StepDirectory::has_path() const {
  return _internal_has_path();
}
inline void StepDirectory::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StepDirectory::path() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepDirectory.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StepDirectory::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepDirectory.path)
}
inline std::string* StepDirectory::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepDirectory.path)
  return _s;
}
inline const std::string& StepDirectory::_internal_path() const {
  return _impl_.path_.Get();
}
inline void StepDirectory::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* StepDirectory::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* StepDirectory::release_path() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.StepDirectory.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StepDirectory::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.StepDirectory.path)
}

// map<string, .Odb.Lib.Protobuf.LayerDirectory> layersByName = 3;
inline int StepDirectory::_internal_layersbyname_size() const {
  return _impl_.layersbyname_.size();
}
inline int StepDirectory::layersbyname_size() const {
  return _internal_layersbyname_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::LayerDirectory >&
StepDirectory::_internal_layersbyname() const {
  return _impl_.layersbyname_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::LayerDirectory >&
StepDirectory::layersbyname() const {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.StepDirectory.layersByName)
  return _internal_layersbyname();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::LayerDirectory >*
StepDirectory::_internal_mutable_layersbyname() {
  return _impl_.layersbyname_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::LayerDirectory >*
StepDirectory::mutable_layersbyname() {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.StepDirectory.layersByName)
  return _internal_mutable_layersbyname();
}

// map<string, .Odb.Lib.Protobuf.NetlistFile> netlistsByName = 4;
inline int StepDirectory::_internal_netlistsbyname_size() const {
  return _impl_.netlistsbyname_.size();
}
inline int StepDirectory::netlistsbyname_size() const {
  return _internal_netlistsbyname_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::NetlistFile >&
StepDirectory::_internal_netlistsbyname() const {
  return _impl_.netlistsbyname_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::NetlistFile >&
StepDirectory::netlistsbyname() const {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.StepDirectory.netlistsByName)
  return _internal_netlistsbyname();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::NetlistFile >*
StepDirectory::_internal_mutable_netlistsbyname() {
  return _impl_.netlistsbyname_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::NetlistFile >*
StepDirectory::mutable_netlistsbyname() {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.StepDirectory.netlistsByName)
  return _internal_mutable_netlistsbyname();
}

// optional .Odb.Lib.Protobuf.EdaDataFile edadatafile = 5;
inline bool StepDirectory::_internal_has_edadatafile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edadatafile_ != nullptr);
  return value;
}
inline bool StepDirectory::has_edadatafile() const {
  return _internal_has_edadatafile();
}
inline const ::Odb::Lib::Protobuf::EdaDataFile& StepDirectory::_internal_edadatafile() const {
  const ::Odb::Lib::Protobuf::EdaDataFile* p = _impl_.edadatafile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::EdaDataFile&>(
      ::Odb::Lib::Protobuf::_EdaDataFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::EdaDataFile& StepDirectory::edadatafile() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepDirectory.edadatafile)
  return _internal_edadatafile();
}
inline void StepDirectory::unsafe_arena_set_allocated_edadatafile(
    ::Odb::Lib::Protobuf::EdaDataFile* edadatafile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edadatafile_);
  }
  _impl_.edadatafile_ = edadatafile;
  if (edadatafile) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.StepDirectory.edadatafile)
}
inline ::Odb::Lib::Protobuf::EdaDataFile* StepDirectory::release_edadatafile() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Odb::Lib::Protobuf::EdaDataFile* temp = _impl_.edadatafile_;
  _impl_.edadatafile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::EdaDataFile* StepDirectory::unsafe_arena_release_edadatafile() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.StepDirectory.edadatafile)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Odb::Lib::Protobuf::EdaDataFile* temp = _impl_.edadatafile_;
  _impl_.edadatafile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::EdaDataFile* StepDirectory::_internal_mutable_edadatafile() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.edadatafile_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::EdaDataFile>(GetArenaForAllocation());
    _impl_.edadatafile_ = p;
  }
  return _impl_.edadatafile_;
}
inline ::Odb::Lib::Protobuf::EdaDataFile* StepDirectory::mutable_edadatafile() {
  ::Odb::Lib::Protobuf::EdaDataFile* _msg = _internal_mutable_edadatafile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepDirectory.edadatafile)
  return _msg;
}
inline void StepDirectory::set_allocated_edadatafile(::Odb::Lib::Protobuf::EdaDataFile* edadatafile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.edadatafile_);
  }
  if (edadatafile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edadatafile));
    if (message_arena != submessage_arena) {
      edadatafile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edadatafile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.edadatafile_ = edadatafile;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.StepDirectory.edadatafile)
}

// optional .Odb.Lib.Protobuf.AttrListFile attrlistfile = 6;
inline bool StepDirectory::_internal_has_attrlistfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attrlistfile_ != nullptr);
  return value;
}
inline bool StepDirectory::has_attrlistfile() const {
  return _internal_has_attrlistfile();
}
inline const ::Odb::Lib::Protobuf::AttrListFile& StepDirectory::_internal_attrlistfile() const {
  const ::Odb::Lib::Protobuf::AttrListFile* p = _impl_.attrlistfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::AttrListFile&>(
      ::Odb::Lib::Protobuf::_AttrListFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::AttrListFile& StepDirectory::attrlistfile() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepDirectory.attrlistfile)
  return _internal_attrlistfile();
}
inline void StepDirectory::unsafe_arena_set_allocated_attrlistfile(
    ::Odb::Lib::Protobuf::AttrListFile* attrlistfile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attrlistfile_);
  }
  _impl_.attrlistfile_ = attrlistfile;
  if (attrlistfile) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.StepDirectory.attrlistfile)
}
inline ::Odb::Lib::Protobuf::AttrListFile* StepDirectory::release_attrlistfile() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Odb::Lib::Protobuf::AttrListFile* temp = _impl_.attrlistfile_;
  _impl_.attrlistfile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::AttrListFile* StepDirectory::unsafe_arena_release_attrlistfile() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.StepDirectory.attrlistfile)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Odb::Lib::Protobuf::AttrListFile* temp = _impl_.attrlistfile_;
  _impl_.attrlistfile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::AttrListFile* StepDirectory::_internal_mutable_attrlistfile() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.attrlistfile_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::AttrListFile>(GetArenaForAllocation());
    _impl_.attrlistfile_ = p;
  }
  return _impl_.attrlistfile_;
}
inline ::Odb::Lib::Protobuf::AttrListFile* StepDirectory::mutable_attrlistfile() {
  ::Odb::Lib::Protobuf::AttrListFile* _msg = _internal_mutable_attrlistfile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepDirectory.attrlistfile)
  return _msg;
}
inline void StepDirectory::set_allocated_attrlistfile(::Odb::Lib::Protobuf::AttrListFile* attrlistfile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attrlistfile_);
  }
  if (attrlistfile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attrlistfile));
    if (message_arena != submessage_arena) {
      attrlistfile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attrlistfile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.attrlistfile_ = attrlistfile;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.StepDirectory.attrlistfile)
}

// optional .Odb.Lib.Protobuf.FeaturesFile profilefile = 7;
inline bool StepDirectory::_internal_has_profilefile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.profilefile_ != nullptr);
  return value;
}
inline bool StepDirectory::has_profilefile() const {
  return _internal_has_profilefile();
}
inline const ::Odb::Lib::Protobuf::FeaturesFile& StepDirectory::_internal_profilefile() const {
  const ::Odb::Lib::Protobuf::FeaturesFile* p = _impl_.profilefile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::FeaturesFile&>(
      ::Odb::Lib::Protobuf::_FeaturesFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::FeaturesFile& StepDirectory::profilefile() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepDirectory.profilefile)
  return _internal_profilefile();
}
inline void StepDirectory::unsafe_arena_set_allocated_profilefile(
    ::Odb::Lib::Protobuf::FeaturesFile* profilefile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.profilefile_);
  }
  _impl_.profilefile_ = profilefile;
  if (profilefile) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.StepDirectory.profilefile)
}
inline ::Odb::Lib::Protobuf::FeaturesFile* StepDirectory::release_profilefile() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Odb::Lib::Protobuf::FeaturesFile* temp = _impl_.profilefile_;
  _impl_.profilefile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::FeaturesFile* StepDirectory::unsafe_arena_release_profilefile() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.StepDirectory.profilefile)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Odb::Lib::Protobuf::FeaturesFile* temp = _impl_.profilefile_;
  _impl_.profilefile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::FeaturesFile* StepDirectory::_internal_mutable_profilefile() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.profilefile_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::FeaturesFile>(GetArenaForAllocation());
    _impl_.profilefile_ = p;
  }
  return _impl_.profilefile_;
}
inline ::Odb::Lib::Protobuf::FeaturesFile* StepDirectory::mutable_profilefile() {
  ::Odb::Lib::Protobuf::FeaturesFile* _msg = _internal_mutable_profilefile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepDirectory.profilefile)
  return _msg;
}
inline void StepDirectory::set_allocated_profilefile(::Odb::Lib::Protobuf::FeaturesFile* profilefile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.profilefile_);
  }
  if (profilefile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profilefile));
    if (message_arena != submessage_arena) {
      profilefile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profilefile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.profilefile_ = profilefile;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.StepDirectory.profilefile)
}

// optional .Odb.Lib.Protobuf.StepHdrFile stephdrfile = 8;
inline bool StepDirectory::_internal_has_stephdrfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stephdrfile_ != nullptr);
  return value;
}
inline bool StepDirectory::has_stephdrfile() const {
  return _internal_has_stephdrfile();
}
inline const ::Odb::Lib::Protobuf::StepHdrFile& StepDirectory::_internal_stephdrfile() const {
  const ::Odb::Lib::Protobuf::StepHdrFile* p = _impl_.stephdrfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::StepHdrFile&>(
      ::Odb::Lib::Protobuf::_StepHdrFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::StepHdrFile& StepDirectory::stephdrfile() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepDirectory.stephdrfile)
  return _internal_stephdrfile();
}
inline void StepDirectory::unsafe_arena_set_allocated_stephdrfile(
    ::Odb::Lib::Protobuf::StepHdrFile* stephdrfile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stephdrfile_);
  }
  _impl_.stephdrfile_ = stephdrfile;
  if (stephdrfile) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.StepDirectory.stephdrfile)
}
inline ::Odb::Lib::Protobuf::StepHdrFile* StepDirectory::release_stephdrfile() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::Odb::Lib::Protobuf::StepHdrFile* temp = _impl_.stephdrfile_;
  _impl_.stephdrfile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::StepHdrFile* StepDirectory::unsafe_arena_release_stephdrfile() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.StepDirectory.stephdrfile)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::Odb::Lib::Protobuf::StepHdrFile* temp = _impl_.stephdrfile_;
  _impl_.stephdrfile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::StepHdrFile* StepDirectory::_internal_mutable_stephdrfile() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.stephdrfile_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::StepHdrFile>(GetArenaForAllocation());
    _impl_.stephdrfile_ = p;
  }
  return _impl_.stephdrfile_;
}
inline ::Odb::Lib::Protobuf::StepHdrFile* StepDirectory::mutable_stephdrfile() {
  ::Odb::Lib::Protobuf::StepHdrFile* _msg = _internal_mutable_stephdrfile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepDirectory.stephdrfile)
  return _msg;
}
inline void StepDirectory::set_allocated_stephdrfile(::Odb::Lib::Protobuf::StepHdrFile* stephdrfile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stephdrfile_);
  }
  if (stephdrfile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stephdrfile));
    if (message_arena != submessage_arena) {
      stephdrfile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stephdrfile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.stephdrfile_ = stephdrfile;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.StepDirectory.stephdrfile)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stepdirectory_2eproto
