// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filearchive.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_filearchive_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_filearchive_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "stepdirectory.pb.h"
#include "miscinfofile.pb.h"
#include "matrixfile.pb.h"
#include "standardfontsfile.pb.h"
#include "symbolsdirectory.pb.h"
#include "attrlistfile.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_filearchive_2eproto ODBDESIGN_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_filearchive_2eproto {
  static const uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_filearchive_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class FileArchive;
struct FileArchiveDefaultTypeInternal;
ODBDESIGN_EXPORT extern FileArchiveDefaultTypeInternal _FileArchive_default_instance_;
class FileArchive_StepsByNameEntry_DoNotUse;
struct FileArchive_StepsByNameEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern FileArchive_StepsByNameEntry_DoNotUseDefaultTypeInternal _FileArchive_StepsByNameEntry_DoNotUse_default_instance_;
class FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse;
struct FileArchive_SymbolsDirectoriesByNameEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern FileArchive_SymbolsDirectoriesByNameEntry_DoNotUseDefaultTypeInternal _FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::FileArchive* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::FileArchive>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::FileArchive_StepsByNameEntry_DoNotUse* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::FileArchive_StepsByNameEntry_DoNotUse>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================

class FileArchive_StepsByNameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileArchive_StepsByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::StepDirectory,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileArchive_StepsByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::StepDirectory,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FileArchive_StepsByNameEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FileArchive_StepsByNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FileArchive_StepsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FileArchive_StepsByNameEntry_DoNotUse& other);
  static const FileArchive_StepsByNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FileArchive_StepsByNameEntry_DoNotUse*>(&_FileArchive_StepsByNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.FileArchive.StepsByNameEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_filearchive_2eproto;
};

// -------------------------------------------------------------------

class FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::SymbolsDirectory,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::SymbolsDirectory,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse& other);
  static const FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse*>(&_FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.FileArchive.SymbolsDirectoriesByNameEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_filearchive_2eproto;
};

// -------------------------------------------------------------------

class ODBDESIGN_EXPORT FileArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.FileArchive) */ {
 public:
  inline FileArchive() : FileArchive(nullptr) {}
  ~FileArchive() override;
  explicit PROTOBUF_CONSTEXPR FileArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileArchive(const FileArchive& from);
  FileArchive(FileArchive&& from) noexcept
    : FileArchive() {
    *this = ::std::move(from);
  }

  inline FileArchive& operator=(const FileArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileArchive& operator=(FileArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileArchive* internal_default_instance() {
    return reinterpret_cast<const FileArchive*>(
               &_FileArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileArchive& a, FileArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FileArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileArchive& from) {
    FileArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.FileArchive";
  }
  protected:
  explicit FileArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kStepsByNameFieldNumber = 1,
    kSymbolsDirectoriesByNameFieldNumber = 5,
    kProductNameFieldNumber = 7,
    kFileNameFieldNumber = 8,
    kMiscInfoFileFieldNumber = 2,
    kMatrixFileFieldNumber = 3,
    kStandardFontsFileFieldNumber = 4,
    kMiscAttrListFileFieldNumber = 6,
  };
  // map<string, .Odb.Lib.Protobuf.StepDirectory> stepsByName = 1;
  int stepsbyname_size() const;
  private:
  int _internal_stepsbyname_size() const;
  public:
  void clear_stepsbyname();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::StepDirectory >&
      _internal_stepsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::StepDirectory >*
      _internal_mutable_stepsbyname();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::StepDirectory >&
      stepsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::StepDirectory >*
      mutable_stepsbyname();

  // map<string, .Odb.Lib.Protobuf.SymbolsDirectory> symbolsDirectoriesByName = 5;
  int symbolsdirectoriesbyname_size() const;
  private:
  int _internal_symbolsdirectoriesbyname_size() const;
  public:
  void clear_symbolsdirectoriesbyname();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::SymbolsDirectory >&
      _internal_symbolsdirectoriesbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::SymbolsDirectory >*
      _internal_mutable_symbolsdirectoriesbyname();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::SymbolsDirectory >&
      symbolsdirectoriesbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::SymbolsDirectory >*
      mutable_symbolsdirectoriesbyname();

  // optional string productName = 7;
  bool has_productname() const;
  private:
  bool _internal_has_productname() const;
  public:
  void clear_productname();
  const std::string& productname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_productname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_productname();
  PROTOBUF_NODISCARD std::string* release_productname();
  void set_allocated_productname(std::string* productname);
  private:
  const std::string& _internal_productname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_productname(const std::string& value);
  std::string* _internal_mutable_productname();
  public:

  // optional string fileName = 8;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional .Odb.Lib.Protobuf.MiscInfoFile miscInfoFile = 2;
  bool has_miscinfofile() const;
  private:
  bool _internal_has_miscinfofile() const;
  public:
  void clear_miscinfofile();
  const ::Odb::Lib::Protobuf::MiscInfoFile& miscinfofile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::MiscInfoFile* release_miscinfofile();
  ::Odb::Lib::Protobuf::MiscInfoFile* mutable_miscinfofile();
  void set_allocated_miscinfofile(::Odb::Lib::Protobuf::MiscInfoFile* miscinfofile);
  private:
  const ::Odb::Lib::Protobuf::MiscInfoFile& _internal_miscinfofile() const;
  ::Odb::Lib::Protobuf::MiscInfoFile* _internal_mutable_miscinfofile();
  public:
  void unsafe_arena_set_allocated_miscinfofile(
      ::Odb::Lib::Protobuf::MiscInfoFile* miscinfofile);
  ::Odb::Lib::Protobuf::MiscInfoFile* unsafe_arena_release_miscinfofile();

  // optional .Odb.Lib.Protobuf.MatrixFile matrixFile = 3;
  bool has_matrixfile() const;
  private:
  bool _internal_has_matrixfile() const;
  public:
  void clear_matrixfile();
  const ::Odb::Lib::Protobuf::MatrixFile& matrixfile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::MatrixFile* release_matrixfile();
  ::Odb::Lib::Protobuf::MatrixFile* mutable_matrixfile();
  void set_allocated_matrixfile(::Odb::Lib::Protobuf::MatrixFile* matrixfile);
  private:
  const ::Odb::Lib::Protobuf::MatrixFile& _internal_matrixfile() const;
  ::Odb::Lib::Protobuf::MatrixFile* _internal_mutable_matrixfile();
  public:
  void unsafe_arena_set_allocated_matrixfile(
      ::Odb::Lib::Protobuf::MatrixFile* matrixfile);
  ::Odb::Lib::Protobuf::MatrixFile* unsafe_arena_release_matrixfile();

  // optional .Odb.Lib.Protobuf.StandardFontsFile standardFontsFile = 4;
  bool has_standardfontsfile() const;
  private:
  bool _internal_has_standardfontsfile() const;
  public:
  void clear_standardfontsfile();
  const ::Odb::Lib::Protobuf::StandardFontsFile& standardfontsfile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::StandardFontsFile* release_standardfontsfile();
  ::Odb::Lib::Protobuf::StandardFontsFile* mutable_standardfontsfile();
  void set_allocated_standardfontsfile(::Odb::Lib::Protobuf::StandardFontsFile* standardfontsfile);
  private:
  const ::Odb::Lib::Protobuf::StandardFontsFile& _internal_standardfontsfile() const;
  ::Odb::Lib::Protobuf::StandardFontsFile* _internal_mutable_standardfontsfile();
  public:
  void unsafe_arena_set_allocated_standardfontsfile(
      ::Odb::Lib::Protobuf::StandardFontsFile* standardfontsfile);
  ::Odb::Lib::Protobuf::StandardFontsFile* unsafe_arena_release_standardfontsfile();

  // optional .Odb.Lib.Protobuf.AttrListFile miscAttrListFile = 6;
  bool has_miscattrlistfile() const;
  private:
  bool _internal_has_miscattrlistfile() const;
  public:
  void clear_miscattrlistfile();
  const ::Odb::Lib::Protobuf::AttrListFile& miscattrlistfile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::AttrListFile* release_miscattrlistfile();
  ::Odb::Lib::Protobuf::AttrListFile* mutable_miscattrlistfile();
  void set_allocated_miscattrlistfile(::Odb::Lib::Protobuf::AttrListFile* miscattrlistfile);
  private:
  const ::Odb::Lib::Protobuf::AttrListFile& _internal_miscattrlistfile() const;
  ::Odb::Lib::Protobuf::AttrListFile* _internal_mutable_miscattrlistfile();
  public:
  void unsafe_arena_set_allocated_miscattrlistfile(
      ::Odb::Lib::Protobuf::AttrListFile* miscattrlistfile);
  ::Odb::Lib::Protobuf::AttrListFile* unsafe_arena_release_miscattrlistfile();

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.FileArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FileArchive_StepsByNameEntry_DoNotUse,
        std::string, ::Odb::Lib::Protobuf::StepDirectory,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> stepsbyname_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse,
        std::string, ::Odb::Lib::Protobuf::SymbolsDirectory,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> symbolsdirectoriesbyname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr productname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
    ::Odb::Lib::Protobuf::MiscInfoFile* miscinfofile_;
    ::Odb::Lib::Protobuf::MatrixFile* matrixfile_;
    ::Odb::Lib::Protobuf::StandardFontsFile* standardfontsfile_;
    ::Odb::Lib::Protobuf::AttrListFile* miscattrlistfile_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filearchive_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FileArchive

// map<string, .Odb.Lib.Protobuf.StepDirectory> stepsByName = 1;
inline int FileArchive::_internal_stepsbyname_size() const {
  return _impl_.stepsbyname_.size();
}
inline int FileArchive::stepsbyname_size() const {
  return _internal_stepsbyname_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::StepDirectory >&
FileArchive::_internal_stepsbyname() const {
  return _impl_.stepsbyname_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::StepDirectory >&
FileArchive::stepsbyname() const {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.FileArchive.stepsByName)
  return _internal_stepsbyname();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::StepDirectory >*
FileArchive::_internal_mutable_stepsbyname() {
  return _impl_.stepsbyname_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::StepDirectory >*
FileArchive::mutable_stepsbyname() {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.FileArchive.stepsByName)
  return _internal_mutable_stepsbyname();
}

// optional .Odb.Lib.Protobuf.MiscInfoFile miscInfoFile = 2;
inline bool FileArchive::_internal_has_miscinfofile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.miscinfofile_ != nullptr);
  return value;
}
inline bool FileArchive::has_miscinfofile() const {
  return _internal_has_miscinfofile();
}
inline const ::Odb::Lib::Protobuf::MiscInfoFile& FileArchive::_internal_miscinfofile() const {
  const ::Odb::Lib::Protobuf::MiscInfoFile* p = _impl_.miscinfofile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::MiscInfoFile&>(
      ::Odb::Lib::Protobuf::_MiscInfoFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::MiscInfoFile& FileArchive::miscinfofile() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.miscInfoFile)
  return _internal_miscinfofile();
}
inline void FileArchive::unsafe_arena_set_allocated_miscinfofile(
    ::Odb::Lib::Protobuf::MiscInfoFile* miscinfofile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.miscinfofile_);
  }
  _impl_.miscinfofile_ = miscinfofile;
  if (miscinfofile) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.FileArchive.miscInfoFile)
}
inline ::Odb::Lib::Protobuf::MiscInfoFile* FileArchive::release_miscinfofile() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Odb::Lib::Protobuf::MiscInfoFile* temp = _impl_.miscinfofile_;
  _impl_.miscinfofile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::MiscInfoFile* FileArchive::unsafe_arena_release_miscinfofile() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.miscInfoFile)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Odb::Lib::Protobuf::MiscInfoFile* temp = _impl_.miscinfofile_;
  _impl_.miscinfofile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::MiscInfoFile* FileArchive::_internal_mutable_miscinfofile() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.miscinfofile_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::MiscInfoFile>(GetArenaForAllocation());
    _impl_.miscinfofile_ = p;
  }
  return _impl_.miscinfofile_;
}
inline ::Odb::Lib::Protobuf::MiscInfoFile* FileArchive::mutable_miscinfofile() {
  ::Odb::Lib::Protobuf::MiscInfoFile* _msg = _internal_mutable_miscinfofile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.miscInfoFile)
  return _msg;
}
inline void FileArchive::set_allocated_miscinfofile(::Odb::Lib::Protobuf::MiscInfoFile* miscinfofile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.miscinfofile_);
  }
  if (miscinfofile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(miscinfofile));
    if (message_arena != submessage_arena) {
      miscinfofile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, miscinfofile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.miscinfofile_ = miscinfofile;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.miscInfoFile)
}

// optional .Odb.Lib.Protobuf.MatrixFile matrixFile = 3;
inline bool FileArchive::_internal_has_matrixfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.matrixfile_ != nullptr);
  return value;
}
inline bool FileArchive::has_matrixfile() const {
  return _internal_has_matrixfile();
}
inline const ::Odb::Lib::Protobuf::MatrixFile& FileArchive::_internal_matrixfile() const {
  const ::Odb::Lib::Protobuf::MatrixFile* p = _impl_.matrixfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::MatrixFile&>(
      ::Odb::Lib::Protobuf::_MatrixFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::MatrixFile& FileArchive::matrixfile() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.matrixFile)
  return _internal_matrixfile();
}
inline void FileArchive::unsafe_arena_set_allocated_matrixfile(
    ::Odb::Lib::Protobuf::MatrixFile* matrixfile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matrixfile_);
  }
  _impl_.matrixfile_ = matrixfile;
  if (matrixfile) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.FileArchive.matrixFile)
}
inline ::Odb::Lib::Protobuf::MatrixFile* FileArchive::release_matrixfile() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Odb::Lib::Protobuf::MatrixFile* temp = _impl_.matrixfile_;
  _impl_.matrixfile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::MatrixFile* FileArchive::unsafe_arena_release_matrixfile() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.matrixFile)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Odb::Lib::Protobuf::MatrixFile* temp = _impl_.matrixfile_;
  _impl_.matrixfile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::MatrixFile* FileArchive::_internal_mutable_matrixfile() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.matrixfile_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::MatrixFile>(GetArenaForAllocation());
    _impl_.matrixfile_ = p;
  }
  return _impl_.matrixfile_;
}
inline ::Odb::Lib::Protobuf::MatrixFile* FileArchive::mutable_matrixfile() {
  ::Odb::Lib::Protobuf::MatrixFile* _msg = _internal_mutable_matrixfile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.matrixFile)
  return _msg;
}
inline void FileArchive::set_allocated_matrixfile(::Odb::Lib::Protobuf::MatrixFile* matrixfile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matrixfile_);
  }
  if (matrixfile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matrixfile));
    if (message_arena != submessage_arena) {
      matrixfile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrixfile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.matrixfile_ = matrixfile;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.matrixFile)
}

// optional .Odb.Lib.Protobuf.StandardFontsFile standardFontsFile = 4;
inline bool FileArchive::_internal_has_standardfontsfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.standardfontsfile_ != nullptr);
  return value;
}
inline bool FileArchive::has_standardfontsfile() const {
  return _internal_has_standardfontsfile();
}
inline const ::Odb::Lib::Protobuf::StandardFontsFile& FileArchive::_internal_standardfontsfile() const {
  const ::Odb::Lib::Protobuf::StandardFontsFile* p = _impl_.standardfontsfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::StandardFontsFile&>(
      ::Odb::Lib::Protobuf::_StandardFontsFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::StandardFontsFile& FileArchive::standardfontsfile() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.standardFontsFile)
  return _internal_standardfontsfile();
}
inline void FileArchive::unsafe_arena_set_allocated_standardfontsfile(
    ::Odb::Lib::Protobuf::StandardFontsFile* standardfontsfile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.standardfontsfile_);
  }
  _impl_.standardfontsfile_ = standardfontsfile;
  if (standardfontsfile) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.FileArchive.standardFontsFile)
}
inline ::Odb::Lib::Protobuf::StandardFontsFile* FileArchive::release_standardfontsfile() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Odb::Lib::Protobuf::StandardFontsFile* temp = _impl_.standardfontsfile_;
  _impl_.standardfontsfile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::StandardFontsFile* FileArchive::unsafe_arena_release_standardfontsfile() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.standardFontsFile)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Odb::Lib::Protobuf::StandardFontsFile* temp = _impl_.standardfontsfile_;
  _impl_.standardfontsfile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::StandardFontsFile* FileArchive::_internal_mutable_standardfontsfile() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.standardfontsfile_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::StandardFontsFile>(GetArenaForAllocation());
    _impl_.standardfontsfile_ = p;
  }
  return _impl_.standardfontsfile_;
}
inline ::Odb::Lib::Protobuf::StandardFontsFile* FileArchive::mutable_standardfontsfile() {
  ::Odb::Lib::Protobuf::StandardFontsFile* _msg = _internal_mutable_standardfontsfile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.standardFontsFile)
  return _msg;
}
inline void FileArchive::set_allocated_standardfontsfile(::Odb::Lib::Protobuf::StandardFontsFile* standardfontsfile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.standardfontsfile_);
  }
  if (standardfontsfile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(standardfontsfile));
    if (message_arena != submessage_arena) {
      standardfontsfile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standardfontsfile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.standardfontsfile_ = standardfontsfile;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.standardFontsFile)
}

// map<string, .Odb.Lib.Protobuf.SymbolsDirectory> symbolsDirectoriesByName = 5;
inline int FileArchive::_internal_symbolsdirectoriesbyname_size() const {
  return _impl_.symbolsdirectoriesbyname_.size();
}
inline int FileArchive::symbolsdirectoriesbyname_size() const {
  return _internal_symbolsdirectoriesbyname_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::SymbolsDirectory >&
FileArchive::_internal_symbolsdirectoriesbyname() const {
  return _impl_.symbolsdirectoriesbyname_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::SymbolsDirectory >&
FileArchive::symbolsdirectoriesbyname() const {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.FileArchive.symbolsDirectoriesByName)
  return _internal_symbolsdirectoriesbyname();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::SymbolsDirectory >*
FileArchive::_internal_mutable_symbolsdirectoriesbyname() {
  return _impl_.symbolsdirectoriesbyname_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::SymbolsDirectory >*
FileArchive::mutable_symbolsdirectoriesbyname() {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.FileArchive.symbolsDirectoriesByName)
  return _internal_mutable_symbolsdirectoriesbyname();
}

// optional .Odb.Lib.Protobuf.AttrListFile miscAttrListFile = 6;
inline bool FileArchive::_internal_has_miscattrlistfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.miscattrlistfile_ != nullptr);
  return value;
}
inline bool FileArchive::has_miscattrlistfile() const {
  return _internal_has_miscattrlistfile();
}
inline const ::Odb::Lib::Protobuf::AttrListFile& FileArchive::_internal_miscattrlistfile() const {
  const ::Odb::Lib::Protobuf::AttrListFile* p = _impl_.miscattrlistfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::AttrListFile&>(
      ::Odb::Lib::Protobuf::_AttrListFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::AttrListFile& FileArchive::miscattrlistfile() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.miscAttrListFile)
  return _internal_miscattrlistfile();
}
inline void FileArchive::unsafe_arena_set_allocated_miscattrlistfile(
    ::Odb::Lib::Protobuf::AttrListFile* miscattrlistfile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.miscattrlistfile_);
  }
  _impl_.miscattrlistfile_ = miscattrlistfile;
  if (miscattrlistfile) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.FileArchive.miscAttrListFile)
}
inline ::Odb::Lib::Protobuf::AttrListFile* FileArchive::release_miscattrlistfile() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::Odb::Lib::Protobuf::AttrListFile* temp = _impl_.miscattrlistfile_;
  _impl_.miscattrlistfile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::AttrListFile* FileArchive::unsafe_arena_release_miscattrlistfile() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.miscAttrListFile)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::Odb::Lib::Protobuf::AttrListFile* temp = _impl_.miscattrlistfile_;
  _impl_.miscattrlistfile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::AttrListFile* FileArchive::_internal_mutable_miscattrlistfile() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.miscattrlistfile_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::AttrListFile>(GetArenaForAllocation());
    _impl_.miscattrlistfile_ = p;
  }
  return _impl_.miscattrlistfile_;
}
inline ::Odb::Lib::Protobuf::AttrListFile* FileArchive::mutable_miscattrlistfile() {
  ::Odb::Lib::Protobuf::AttrListFile* _msg = _internal_mutable_miscattrlistfile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.miscAttrListFile)
  return _msg;
}
inline void FileArchive::set_allocated_miscattrlistfile(::Odb::Lib::Protobuf::AttrListFile* miscattrlistfile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.miscattrlistfile_);
  }
  if (miscattrlistfile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(miscattrlistfile));
    if (message_arena != submessage_arena) {
      miscattrlistfile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, miscattrlistfile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.miscattrlistfile_ = miscattrlistfile;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.miscAttrListFile)
}

// optional string productName = 7;
inline bool FileArchive::_internal_has_productname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileArchive::has_productname() const {
  return _internal_has_productname();
}
inline void FileArchive::clear_productname() {
  _impl_.productname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileArchive::productname() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.productName)
  return _internal_productname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileArchive::set_productname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.productname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FileArchive.productName)
}
inline std::string* FileArchive::mutable_productname() {
  std::string* _s = _internal_mutable_productname();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.productName)
  return _s;
}
inline const std::string& FileArchive::_internal_productname() const {
  return _impl_.productname_.Get();
}
inline void FileArchive::_internal_set_productname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.productname_.Set(value, GetArenaForAllocation());
}
inline std::string* FileArchive::_internal_mutable_productname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.productname_.Mutable(GetArenaForAllocation());
}
inline std::string* FileArchive::release_productname() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.productName)
  if (!_internal_has_productname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.productname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.productname_.IsDefault()) {
    _impl_.productname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileArchive::set_allocated_productname(std::string* productname) {
  if (productname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.productname_.SetAllocated(productname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.productname_.IsDefault()) {
    _impl_.productname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.productName)
}

// optional string fileName = 8;
inline bool FileArchive::_internal_has_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileArchive::has_filename() const {
  return _internal_has_filename();
}
inline void FileArchive::clear_filename() {
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileArchive::filename() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.fileName)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileArchive::set_filename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.filename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FileArchive.fileName)
}
inline std::string* FileArchive::mutable_filename() {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.fileName)
  return _s;
}
inline const std::string& FileArchive::_internal_filename() const {
  return _impl_.filename_.Get();
}
inline void FileArchive::_internal_set_filename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(value, GetArenaForAllocation());
}
inline std::string* FileArchive::_internal_mutable_filename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.filename_.Mutable(GetArenaForAllocation());
}
inline std::string* FileArchive::release_filename() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.fileName)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.filename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileArchive::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filename_.SetAllocated(filename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.fileName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_filearchive_2eproto
