// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: filearchive.proto
// Protobuf C++ Version: 5.29.2

#ifndef filearchive_2eproto_2epb_2eh
#define filearchive_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "stepdirectory.pb.h"
#include "miscinfofile.pb.h"
#include "matrixfile.pb.h"
#include "standardfontsfile.pb.h"
#include "symbolsdirectory.pb.h"
#include "attrlistfile.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_filearchive_2eproto ODBDESIGN_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_filearchive_2eproto {
  static const ::uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_filearchive_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class FileArchive;
struct FileArchiveDefaultTypeInternal;
ODBDESIGN_EXPORT extern FileArchiveDefaultTypeInternal _FileArchive_default_instance_;
class FileArchive_StepsByNameEntry_DoNotUse;
struct FileArchive_StepsByNameEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern FileArchive_StepsByNameEntry_DoNotUseDefaultTypeInternal _FileArchive_StepsByNameEntry_DoNotUse_default_instance_;
class FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse;
struct FileArchive_SymbolsDirectoriesByNameEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern FileArchive_SymbolsDirectoriesByNameEntry_DoNotUseDefaultTypeInternal _FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================


// -------------------------------------------------------------------

class FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse*>(
        &_FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_filearchive_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      70, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class FileArchive_StepsByNameEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  FileArchive_StepsByNameEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileArchive_StepsByNameEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit FileArchive_StepsByNameEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const FileArchive_StepsByNameEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const FileArchive_StepsByNameEntry_DoNotUse*>(
        &_FileArchive_StepsByNameEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_filearchive_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      57, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ODBDESIGN_EXPORT FileArchive final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.FileArchive) */ {
 public:
  inline FileArchive() : FileArchive(nullptr) {}
  ~FileArchive() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FileArchive* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FileArchive));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FileArchive(
      ::google::protobuf::internal::ConstantInitialized);

  inline FileArchive(const FileArchive& from) : FileArchive(nullptr, from) {}
  inline FileArchive(FileArchive&& from) noexcept
      : FileArchive(nullptr, std::move(from)) {}
  inline FileArchive& operator=(const FileArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileArchive& operator=(FileArchive&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileArchive* internal_default_instance() {
    return reinterpret_cast<const FileArchive*>(
        &_FileArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(FileArchive& a, FileArchive& b) { a.Swap(&b); }
  inline void Swap(FileArchive* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileArchive* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileArchive* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FileArchive>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileArchive& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FileArchive& from) { FileArchive::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FileArchive* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Odb.Lib.Protobuf.FileArchive"; }

 protected:
  explicit FileArchive(::google::protobuf::Arena* arena);
  FileArchive(::google::protobuf::Arena* arena, const FileArchive& from);
  FileArchive(::google::protobuf::Arena* arena, FileArchive&& from) noexcept
      : FileArchive(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStepsByNameFieldNumber = 1,
    kSymbolsDirectoriesByNameFieldNumber = 5,
    kProductNameFieldNumber = 7,
    kFileNameFieldNumber = 8,
    kMiscInfoFileFieldNumber = 2,
    kMatrixFileFieldNumber = 3,
    kStandardFontsFileFieldNumber = 4,
    kMiscAttrListFileFieldNumber = 6,
  };
  // map<string, .Odb.Lib.Protobuf.StepDirectory> stepsByName = 1;
  int stepsbyname_size() const;
  private:
  int _internal_stepsbyname_size() const;

  public:
  void clear_stepsbyname() ;
  const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::StepDirectory>& stepsbyname() const;
  ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::StepDirectory>* mutable_stepsbyname();

  private:
  const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::StepDirectory>& _internal_stepsbyname() const;
  ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::StepDirectory>* _internal_mutable_stepsbyname();

  public:
  // map<string, .Odb.Lib.Protobuf.SymbolsDirectory> symbolsDirectoriesByName = 5;
  int symbolsdirectoriesbyname_size() const;
  private:
  int _internal_symbolsdirectoriesbyname_size() const;

  public:
  void clear_symbolsdirectoriesbyname() ;
  const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolsDirectory>& symbolsdirectoriesbyname() const;
  ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolsDirectory>* mutable_symbolsdirectoriesbyname();

  private:
  const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolsDirectory>& _internal_symbolsdirectoriesbyname() const;
  ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolsDirectory>* _internal_mutable_symbolsdirectoriesbyname();

  public:
  // optional string productName = 7;
  bool has_productname() const;
  void clear_productname() ;
  const std::string& productname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_productname(Arg_&& arg, Args_... args);
  std::string* mutable_productname();
  PROTOBUF_NODISCARD std::string* release_productname();
  void set_allocated_productname(std::string* value);

  private:
  const std::string& _internal_productname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_productname(
      const std::string& value);
  std::string* _internal_mutable_productname();

  public:
  // optional string fileName = 8;
  bool has_filename() const;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // optional .Odb.Lib.Protobuf.MiscInfoFile miscInfoFile = 2;
  bool has_miscinfofile() const;
  void clear_miscinfofile() ;
  const ::Odb::Lib::Protobuf::MiscInfoFile& miscinfofile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::MiscInfoFile* release_miscinfofile();
  ::Odb::Lib::Protobuf::MiscInfoFile* mutable_miscinfofile();
  void set_allocated_miscinfofile(::Odb::Lib::Protobuf::MiscInfoFile* value);
  void unsafe_arena_set_allocated_miscinfofile(::Odb::Lib::Protobuf::MiscInfoFile* value);
  ::Odb::Lib::Protobuf::MiscInfoFile* unsafe_arena_release_miscinfofile();

  private:
  const ::Odb::Lib::Protobuf::MiscInfoFile& _internal_miscinfofile() const;
  ::Odb::Lib::Protobuf::MiscInfoFile* _internal_mutable_miscinfofile();

  public:
  // optional .Odb.Lib.Protobuf.MatrixFile matrixFile = 3;
  bool has_matrixfile() const;
  void clear_matrixfile() ;
  const ::Odb::Lib::Protobuf::MatrixFile& matrixfile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::MatrixFile* release_matrixfile();
  ::Odb::Lib::Protobuf::MatrixFile* mutable_matrixfile();
  void set_allocated_matrixfile(::Odb::Lib::Protobuf::MatrixFile* value);
  void unsafe_arena_set_allocated_matrixfile(::Odb::Lib::Protobuf::MatrixFile* value);
  ::Odb::Lib::Protobuf::MatrixFile* unsafe_arena_release_matrixfile();

  private:
  const ::Odb::Lib::Protobuf::MatrixFile& _internal_matrixfile() const;
  ::Odb::Lib::Protobuf::MatrixFile* _internal_mutable_matrixfile();

  public:
  // optional .Odb.Lib.Protobuf.StandardFontsFile standardFontsFile = 4;
  bool has_standardfontsfile() const;
  void clear_standardfontsfile() ;
  const ::Odb::Lib::Protobuf::StandardFontsFile& standardfontsfile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::StandardFontsFile* release_standardfontsfile();
  ::Odb::Lib::Protobuf::StandardFontsFile* mutable_standardfontsfile();
  void set_allocated_standardfontsfile(::Odb::Lib::Protobuf::StandardFontsFile* value);
  void unsafe_arena_set_allocated_standardfontsfile(::Odb::Lib::Protobuf::StandardFontsFile* value);
  ::Odb::Lib::Protobuf::StandardFontsFile* unsafe_arena_release_standardfontsfile();

  private:
  const ::Odb::Lib::Protobuf::StandardFontsFile& _internal_standardfontsfile() const;
  ::Odb::Lib::Protobuf::StandardFontsFile* _internal_mutable_standardfontsfile();

  public:
  // optional .Odb.Lib.Protobuf.AttrListFile miscAttrListFile = 6;
  bool has_miscattrlistfile() const;
  void clear_miscattrlistfile() ;
  const ::Odb::Lib::Protobuf::AttrListFile& miscattrlistfile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::AttrListFile* release_miscattrlistfile();
  ::Odb::Lib::Protobuf::AttrListFile* mutable_miscattrlistfile();
  void set_allocated_miscattrlistfile(::Odb::Lib::Protobuf::AttrListFile* value);
  void unsafe_arena_set_allocated_miscattrlistfile(::Odb::Lib::Protobuf::AttrListFile* value);
  ::Odb::Lib::Protobuf::AttrListFile* unsafe_arena_release_miscattrlistfile();

  private:
  const ::Odb::Lib::Protobuf::AttrListFile& _internal_miscattrlistfile() const;
  ::Odb::Lib::Protobuf::AttrListFile* _internal_mutable_miscattrlistfile();

  public:
  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.FileArchive)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 8,
      99, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FileArchive& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<FileArchive_StepsByNameEntry_DoNotUse, std::string, ::Odb::Lib::Protobuf::StepDirectory,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        stepsbyname_;
    ::google::protobuf::internal::MapField<FileArchive_SymbolsDirectoriesByNameEntry_DoNotUse, std::string, ::Odb::Lib::Protobuf::SymbolsDirectory,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        symbolsdirectoriesbyname_;
    ::google::protobuf::internal::ArenaStringPtr productname_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::Odb::Lib::Protobuf::MiscInfoFile* miscinfofile_;
    ::Odb::Lib::Protobuf::MatrixFile* matrixfile_;
    ::Odb::Lib::Protobuf::StandardFontsFile* standardfontsfile_;
    ::Odb::Lib::Protobuf::AttrListFile* miscattrlistfile_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_filearchive_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FileArchive

// map<string, .Odb.Lib.Protobuf.StepDirectory> stepsByName = 1;
inline int FileArchive::_internal_stepsbyname_size() const {
  return _internal_stepsbyname().size();
}
inline int FileArchive::stepsbyname_size() const {
  return _internal_stepsbyname_size();
}
inline const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::StepDirectory>& FileArchive::_internal_stepsbyname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stepsbyname_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::StepDirectory>& FileArchive::stepsbyname() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.FileArchive.stepsByName)
  return _internal_stepsbyname();
}
inline ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::StepDirectory>* FileArchive::_internal_mutable_stepsbyname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stepsbyname_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::StepDirectory>* FileArchive::mutable_stepsbyname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.FileArchive.stepsByName)
  return _internal_mutable_stepsbyname();
}

// optional .Odb.Lib.Protobuf.MiscInfoFile miscInfoFile = 2;
inline bool FileArchive::has_miscinfofile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.miscinfofile_ != nullptr);
  return value;
}
inline const ::Odb::Lib::Protobuf::MiscInfoFile& FileArchive::_internal_miscinfofile() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Odb::Lib::Protobuf::MiscInfoFile* p = _impl_.miscinfofile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::MiscInfoFile&>(::Odb::Lib::Protobuf::_MiscInfoFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::MiscInfoFile& FileArchive::miscinfofile() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.miscInfoFile)
  return _internal_miscinfofile();
}
inline void FileArchive::unsafe_arena_set_allocated_miscinfofile(::Odb::Lib::Protobuf::MiscInfoFile* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.miscinfofile_);
  }
  _impl_.miscinfofile_ = reinterpret_cast<::Odb::Lib::Protobuf::MiscInfoFile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.FileArchive.miscInfoFile)
}
inline ::Odb::Lib::Protobuf::MiscInfoFile* FileArchive::release_miscinfofile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Odb::Lib::Protobuf::MiscInfoFile* released = _impl_.miscinfofile_;
  _impl_.miscinfofile_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Odb::Lib::Protobuf::MiscInfoFile* FileArchive::unsafe_arena_release_miscinfofile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.miscInfoFile)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Odb::Lib::Protobuf::MiscInfoFile* temp = _impl_.miscinfofile_;
  _impl_.miscinfofile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::MiscInfoFile* FileArchive::_internal_mutable_miscinfofile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.miscinfofile_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Odb::Lib::Protobuf::MiscInfoFile>(GetArena());
    _impl_.miscinfofile_ = reinterpret_cast<::Odb::Lib::Protobuf::MiscInfoFile*>(p);
  }
  return _impl_.miscinfofile_;
}
inline ::Odb::Lib::Protobuf::MiscInfoFile* FileArchive::mutable_miscinfofile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::Odb::Lib::Protobuf::MiscInfoFile* _msg = _internal_mutable_miscinfofile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.miscInfoFile)
  return _msg;
}
inline void FileArchive::set_allocated_miscinfofile(::Odb::Lib::Protobuf::MiscInfoFile* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.miscinfofile_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.miscinfofile_ = reinterpret_cast<::Odb::Lib::Protobuf::MiscInfoFile*>(value);
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.miscInfoFile)
}

// optional .Odb.Lib.Protobuf.MatrixFile matrixFile = 3;
inline bool FileArchive::has_matrixfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.matrixfile_ != nullptr);
  return value;
}
inline const ::Odb::Lib::Protobuf::MatrixFile& FileArchive::_internal_matrixfile() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Odb::Lib::Protobuf::MatrixFile* p = _impl_.matrixfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::MatrixFile&>(::Odb::Lib::Protobuf::_MatrixFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::MatrixFile& FileArchive::matrixfile() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.matrixFile)
  return _internal_matrixfile();
}
inline void FileArchive::unsafe_arena_set_allocated_matrixfile(::Odb::Lib::Protobuf::MatrixFile* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.matrixfile_);
  }
  _impl_.matrixfile_ = reinterpret_cast<::Odb::Lib::Protobuf::MatrixFile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.FileArchive.matrixFile)
}
inline ::Odb::Lib::Protobuf::MatrixFile* FileArchive::release_matrixfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Odb::Lib::Protobuf::MatrixFile* released = _impl_.matrixfile_;
  _impl_.matrixfile_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Odb::Lib::Protobuf::MatrixFile* FileArchive::unsafe_arena_release_matrixfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.matrixFile)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Odb::Lib::Protobuf::MatrixFile* temp = _impl_.matrixfile_;
  _impl_.matrixfile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::MatrixFile* FileArchive::_internal_mutable_matrixfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.matrixfile_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Odb::Lib::Protobuf::MatrixFile>(GetArena());
    _impl_.matrixfile_ = reinterpret_cast<::Odb::Lib::Protobuf::MatrixFile*>(p);
  }
  return _impl_.matrixfile_;
}
inline ::Odb::Lib::Protobuf::MatrixFile* FileArchive::mutable_matrixfile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::Odb::Lib::Protobuf::MatrixFile* _msg = _internal_mutable_matrixfile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.matrixFile)
  return _msg;
}
inline void FileArchive::set_allocated_matrixfile(::Odb::Lib::Protobuf::MatrixFile* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.matrixfile_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.matrixfile_ = reinterpret_cast<::Odb::Lib::Protobuf::MatrixFile*>(value);
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.matrixFile)
}

// optional .Odb.Lib.Protobuf.StandardFontsFile standardFontsFile = 4;
inline bool FileArchive::has_standardfontsfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.standardfontsfile_ != nullptr);
  return value;
}
inline const ::Odb::Lib::Protobuf::StandardFontsFile& FileArchive::_internal_standardfontsfile() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Odb::Lib::Protobuf::StandardFontsFile* p = _impl_.standardfontsfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::StandardFontsFile&>(::Odb::Lib::Protobuf::_StandardFontsFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::StandardFontsFile& FileArchive::standardfontsfile() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.standardFontsFile)
  return _internal_standardfontsfile();
}
inline void FileArchive::unsafe_arena_set_allocated_standardfontsfile(::Odb::Lib::Protobuf::StandardFontsFile* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.standardfontsfile_);
  }
  _impl_.standardfontsfile_ = reinterpret_cast<::Odb::Lib::Protobuf::StandardFontsFile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.FileArchive.standardFontsFile)
}
inline ::Odb::Lib::Protobuf::StandardFontsFile* FileArchive::release_standardfontsfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Odb::Lib::Protobuf::StandardFontsFile* released = _impl_.standardfontsfile_;
  _impl_.standardfontsfile_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Odb::Lib::Protobuf::StandardFontsFile* FileArchive::unsafe_arena_release_standardfontsfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.standardFontsFile)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Odb::Lib::Protobuf::StandardFontsFile* temp = _impl_.standardfontsfile_;
  _impl_.standardfontsfile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::StandardFontsFile* FileArchive::_internal_mutable_standardfontsfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.standardfontsfile_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Odb::Lib::Protobuf::StandardFontsFile>(GetArena());
    _impl_.standardfontsfile_ = reinterpret_cast<::Odb::Lib::Protobuf::StandardFontsFile*>(p);
  }
  return _impl_.standardfontsfile_;
}
inline ::Odb::Lib::Protobuf::StandardFontsFile* FileArchive::mutable_standardfontsfile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::Odb::Lib::Protobuf::StandardFontsFile* _msg = _internal_mutable_standardfontsfile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.standardFontsFile)
  return _msg;
}
inline void FileArchive::set_allocated_standardfontsfile(::Odb::Lib::Protobuf::StandardFontsFile* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.standardfontsfile_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.standardfontsfile_ = reinterpret_cast<::Odb::Lib::Protobuf::StandardFontsFile*>(value);
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.standardFontsFile)
}

// map<string, .Odb.Lib.Protobuf.SymbolsDirectory> symbolsDirectoriesByName = 5;
inline int FileArchive::_internal_symbolsdirectoriesbyname_size() const {
  return _internal_symbolsdirectoriesbyname().size();
}
inline int FileArchive::symbolsdirectoriesbyname_size() const {
  return _internal_symbolsdirectoriesbyname_size();
}
inline const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolsDirectory>& FileArchive::_internal_symbolsdirectoriesbyname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbolsdirectoriesbyname_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolsDirectory>& FileArchive::symbolsdirectoriesbyname() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.FileArchive.symbolsDirectoriesByName)
  return _internal_symbolsdirectoriesbyname();
}
inline ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolsDirectory>* FileArchive::_internal_mutable_symbolsdirectoriesbyname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbolsdirectoriesbyname_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolsDirectory>* FileArchive::mutable_symbolsdirectoriesbyname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.FileArchive.symbolsDirectoriesByName)
  return _internal_mutable_symbolsdirectoriesbyname();
}

// optional .Odb.Lib.Protobuf.AttrListFile miscAttrListFile = 6;
inline bool FileArchive::has_miscattrlistfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.miscattrlistfile_ != nullptr);
  return value;
}
inline const ::Odb::Lib::Protobuf::AttrListFile& FileArchive::_internal_miscattrlistfile() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::Odb::Lib::Protobuf::AttrListFile* p = _impl_.miscattrlistfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::AttrListFile&>(::Odb::Lib::Protobuf::_AttrListFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::AttrListFile& FileArchive::miscattrlistfile() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.miscAttrListFile)
  return _internal_miscattrlistfile();
}
inline void FileArchive::unsafe_arena_set_allocated_miscattrlistfile(::Odb::Lib::Protobuf::AttrListFile* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.miscattrlistfile_);
  }
  _impl_.miscattrlistfile_ = reinterpret_cast<::Odb::Lib::Protobuf::AttrListFile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.FileArchive.miscAttrListFile)
}
inline ::Odb::Lib::Protobuf::AttrListFile* FileArchive::release_miscattrlistfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::Odb::Lib::Protobuf::AttrListFile* released = _impl_.miscattrlistfile_;
  _impl_.miscattrlistfile_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::Odb::Lib::Protobuf::AttrListFile* FileArchive::unsafe_arena_release_miscattrlistfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.miscAttrListFile)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::Odb::Lib::Protobuf::AttrListFile* temp = _impl_.miscattrlistfile_;
  _impl_.miscattrlistfile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::AttrListFile* FileArchive::_internal_mutable_miscattrlistfile() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.miscattrlistfile_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::Odb::Lib::Protobuf::AttrListFile>(GetArena());
    _impl_.miscattrlistfile_ = reinterpret_cast<::Odb::Lib::Protobuf::AttrListFile*>(p);
  }
  return _impl_.miscattrlistfile_;
}
inline ::Odb::Lib::Protobuf::AttrListFile* FileArchive::mutable_miscattrlistfile() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::Odb::Lib::Protobuf::AttrListFile* _msg = _internal_mutable_miscattrlistfile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.miscAttrListFile)
  return _msg;
}
inline void FileArchive::set_allocated_miscattrlistfile(::Odb::Lib::Protobuf::AttrListFile* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.miscattrlistfile_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.miscattrlistfile_ = reinterpret_cast<::Odb::Lib::Protobuf::AttrListFile*>(value);
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.miscAttrListFile)
}

// optional string productName = 7;
inline bool FileArchive::has_productname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FileArchive::clear_productname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.productname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileArchive::productname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.productName)
  return _internal_productname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileArchive::set_productname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.productname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FileArchive.productName)
}
inline std::string* FileArchive::mutable_productname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_productname();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.productName)
  return _s;
}
inline const std::string& FileArchive::_internal_productname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.productname_.Get();
}
inline void FileArchive::_internal_set_productname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.productname_.Set(value, GetArena());
}
inline std::string* FileArchive::_internal_mutable_productname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.productname_.Mutable( GetArena());
}
inline std::string* FileArchive::release_productname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.productName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.productname_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.productname_.Set("", GetArena());
  }
  return released;
}
inline void FileArchive::set_allocated_productname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.productname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.productname_.IsDefault()) {
    _impl_.productname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.productName)
}

// optional string fileName = 8;
inline bool FileArchive::has_filename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FileArchive::clear_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileArchive::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FileArchive.fileName)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileArchive::set_filename(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FileArchive.fileName)
}
inline std::string* FileArchive::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FileArchive.fileName)
  return _s;
}
inline const std::string& FileArchive::_internal_filename() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filename_.Get();
}
inline void FileArchive::_internal_set_filename(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* FileArchive::_internal_mutable_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* FileArchive::release_filename() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FileArchive.fileName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.filename_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.filename_.Set("", GetArena());
  }
  return released;
}
inline void FileArchive::set_allocated_filename(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filename_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.filename_.IsDefault()) {
    _impl_.filename_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FileArchive.fileName)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // filearchive_2eproto_2epb_2eh
