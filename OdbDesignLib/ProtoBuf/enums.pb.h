// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: enums.proto
// Protobuf C++ Version: 5.29.2

#ifndef enums_2eproto_2epb_2eh
#define enums_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_enums_2eproto ODBDESIGN_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_enums_2eproto {
  static const ::uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_enums_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Odb {
namespace Lib {
namespace Protobuf {
enum BoardSide : int {
  BsNone = 0,
  Top = 1,
  Bottom = 2,
  BoardSide_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BoardSide_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

ODBDESIGN_EXPORT bool BoardSide_IsValid(int value);
ODBDESIGN_EXPORT extern const uint32_t BoardSide_internal_data_[];
constexpr BoardSide BoardSide_MIN = static_cast<BoardSide>(0);
constexpr BoardSide BoardSide_MAX = static_cast<BoardSide>(2);
constexpr int BoardSide_ARRAYSIZE = 2 + 1;
ODBDESIGN_EXPORT const ::google::protobuf::EnumDescriptor*
BoardSide_descriptor();
template <typename T>
const std::string& BoardSide_Name(T value) {
  static_assert(std::is_same<T, BoardSide>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BoardSide_Name().");
  return BoardSide_Name(static_cast<BoardSide>(value));
}
template <>
inline const std::string& BoardSide_Name(BoardSide value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BoardSide_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool BoardSide_Parse(absl::string_view name, BoardSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BoardSide>(
      BoardSide_descriptor(), name, value);
}
enum LineShape : int {
  Square = 0,
  Round = 1,
  LineShape_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LineShape_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

ODBDESIGN_EXPORT bool LineShape_IsValid(int value);
ODBDESIGN_EXPORT extern const uint32_t LineShape_internal_data_[];
constexpr LineShape LineShape_MIN = static_cast<LineShape>(0);
constexpr LineShape LineShape_MAX = static_cast<LineShape>(1);
constexpr int LineShape_ARRAYSIZE = 1 + 1;
ODBDESIGN_EXPORT const ::google::protobuf::EnumDescriptor*
LineShape_descriptor();
template <typename T>
const std::string& LineShape_Name(T value) {
  static_assert(std::is_same<T, LineShape>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LineShape_Name().");
  return LineShape_Name(static_cast<LineShape>(value));
}
template <>
inline const std::string& LineShape_Name(LineShape value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LineShape_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool LineShape_Parse(absl::string_view name, LineShape* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LineShape>(
      LineShape_descriptor(), name, value);
}
enum Polarity : int {
  Positive = 0,
  Negative = 1,
  Polarity_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Polarity_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

ODBDESIGN_EXPORT bool Polarity_IsValid(int value);
ODBDESIGN_EXPORT extern const uint32_t Polarity_internal_data_[];
constexpr Polarity Polarity_MIN = static_cast<Polarity>(0);
constexpr Polarity Polarity_MAX = static_cast<Polarity>(1);
constexpr int Polarity_ARRAYSIZE = 1 + 1;
ODBDESIGN_EXPORT const ::google::protobuf::EnumDescriptor*
Polarity_descriptor();
template <typename T>
const std::string& Polarity_Name(T value) {
  static_assert(std::is_same<T, Polarity>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Polarity_Name().");
  return Polarity_Name(static_cast<Polarity>(value));
}
template <>
inline const std::string& Polarity_Name(Polarity value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Polarity_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Polarity_Parse(absl::string_view name, Polarity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Polarity>(
      Polarity_descriptor(), name, value);
}
enum UnitType : int {
  None = 0,
  Metric = 1,
  Imperial = 2,
  UnitType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UnitType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

ODBDESIGN_EXPORT bool UnitType_IsValid(int value);
ODBDESIGN_EXPORT extern const uint32_t UnitType_internal_data_[];
constexpr UnitType UnitType_MIN = static_cast<UnitType>(0);
constexpr UnitType UnitType_MAX = static_cast<UnitType>(2);
constexpr int UnitType_ARRAYSIZE = 2 + 1;
ODBDESIGN_EXPORT const ::google::protobuf::EnumDescriptor*
UnitType_descriptor();
template <typename T>
const std::string& UnitType_Name(T value) {
  static_assert(std::is_same<T, UnitType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UnitType_Name().");
  return UnitType_Name(static_cast<UnitType>(value));
}
template <>
inline const std::string& UnitType_Name(UnitType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UnitType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool UnitType_Parse(absl::string_view name, UnitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnitType>(
      UnitType_descriptor(), name, value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Odb::Lib::Protobuf::BoardSide> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Odb::Lib::Protobuf::BoardSide>() {
  return ::Odb::Lib::Protobuf::BoardSide_descriptor();
}
template <>
struct is_proto_enum<::Odb::Lib::Protobuf::LineShape> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Odb::Lib::Protobuf::LineShape>() {
  return ::Odb::Lib::Protobuf::LineShape_descriptor();
}
template <>
struct is_proto_enum<::Odb::Lib::Protobuf::Polarity> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Odb::Lib::Protobuf::Polarity>() {
  return ::Odb::Lib::Protobuf::Polarity_descriptor();
}
template <>
struct is_proto_enum<::Odb::Lib::Protobuf::UnitType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Odb::Lib::Protobuf::UnitType>() {
  return ::Odb::Lib::Protobuf::UnitType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // enums_2eproto_2epb_2eh
