// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: featuresfile.proto
// Protobuf C++ Version: 5.29.2

#ifndef featuresfile_2eproto_2epb_2eh
#define featuresfile_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common.pb.h"
#include "enums.pb.h"
#include "symbolname.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_featuresfile_2eproto ODBDESIGN_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_featuresfile_2eproto {
  static const ::uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_featuresfile_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class FeaturesFile;
struct FeaturesFileDefaultTypeInternal;
ODBDESIGN_EXPORT extern FeaturesFileDefaultTypeInternal _FeaturesFile_default_instance_;
class FeaturesFile_FeatureRecord;
struct FeaturesFile_FeatureRecordDefaultTypeInternal;
ODBDESIGN_EXPORT extern FeaturesFile_FeatureRecordDefaultTypeInternal _FeaturesFile_FeatureRecord_default_instance_;
class FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse;
struct FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUseDefaultTypeInternal _FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse_default_instance_;
class FeaturesFile_SymbolNamesByNameEntry_DoNotUse;
struct FeaturesFile_SymbolNamesByNameEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern FeaturesFile_SymbolNamesByNameEntry_DoNotUseDefaultTypeInternal _FeaturesFile_SymbolNamesByNameEntry_DoNotUse_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Odb {
namespace Lib {
namespace Protobuf {
enum FeaturesFile_FeatureRecord_Type : int {
  FeaturesFile_FeatureRecord_Type_Arc = 0,
  FeaturesFile_FeatureRecord_Type_Pad = 1,
  FeaturesFile_FeatureRecord_Type_Surface = 2,
  FeaturesFile_FeatureRecord_Type_Barcode = 3,
  FeaturesFile_FeatureRecord_Type_Text = 4,
  FeaturesFile_FeatureRecord_Type_Line = 5,
  FeaturesFile_FeatureRecord_Type_FeaturesFile_FeatureRecord_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FeaturesFile_FeatureRecord_Type_FeaturesFile_FeatureRecord_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

ODBDESIGN_EXPORT bool FeaturesFile_FeatureRecord_Type_IsValid(int value);
ODBDESIGN_EXPORT extern const uint32_t FeaturesFile_FeatureRecord_Type_internal_data_[];
constexpr FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord_Type_Type_MIN = static_cast<FeaturesFile_FeatureRecord_Type>(0);
constexpr FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord_Type_Type_MAX = static_cast<FeaturesFile_FeatureRecord_Type>(5);
constexpr int FeaturesFile_FeatureRecord_Type_Type_ARRAYSIZE = 5 + 1;
ODBDESIGN_EXPORT const ::google::protobuf::EnumDescriptor*
FeaturesFile_FeatureRecord_Type_descriptor();
template <typename T>
const std::string& FeaturesFile_FeatureRecord_Type_Name(T value) {
  static_assert(std::is_same<T, FeaturesFile_FeatureRecord_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return FeaturesFile_FeatureRecord_Type_Name(static_cast<FeaturesFile_FeatureRecord_Type>(value));
}
template <>
inline const std::string& FeaturesFile_FeatureRecord_Type_Name(FeaturesFile_FeatureRecord_Type value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FeaturesFile_FeatureRecord_Type_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool FeaturesFile_FeatureRecord_Type_Parse(absl::string_view name, FeaturesFile_FeatureRecord_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeaturesFile_FeatureRecord_Type>(
      FeaturesFile_FeatureRecord_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse*>(
        &_FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_featuresfile_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      86, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class FeaturesFile_SymbolNamesByNameEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  FeaturesFile_SymbolNamesByNameEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FeaturesFile_SymbolNamesByNameEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit FeaturesFile_SymbolNamesByNameEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const FeaturesFile_SymbolNamesByNameEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const FeaturesFile_SymbolNamesByNameEntry_DoNotUse*>(
        &_FeaturesFile_SymbolNamesByNameEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_featuresfile_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      64, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ODBDESIGN_EXPORT FeaturesFile_FeatureRecord final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord) */ {
 public:
  inline FeaturesFile_FeatureRecord() : FeaturesFile_FeatureRecord(nullptr) {}
  ~FeaturesFile_FeatureRecord() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FeaturesFile_FeatureRecord* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FeaturesFile_FeatureRecord));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FeaturesFile_FeatureRecord(
      ::google::protobuf::internal::ConstantInitialized);

  inline FeaturesFile_FeatureRecord(const FeaturesFile_FeatureRecord& from) : FeaturesFile_FeatureRecord(nullptr, from) {}
  inline FeaturesFile_FeatureRecord(FeaturesFile_FeatureRecord&& from) noexcept
      : FeaturesFile_FeatureRecord(nullptr, std::move(from)) {}
  inline FeaturesFile_FeatureRecord& operator=(const FeaturesFile_FeatureRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeaturesFile_FeatureRecord& operator=(FeaturesFile_FeatureRecord&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeaturesFile_FeatureRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeaturesFile_FeatureRecord* internal_default_instance() {
    return reinterpret_cast<const FeaturesFile_FeatureRecord*>(
        &_FeaturesFile_FeatureRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(FeaturesFile_FeatureRecord& a, FeaturesFile_FeatureRecord& b) { a.Swap(&b); }
  inline void Swap(FeaturesFile_FeatureRecord* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeaturesFile_FeatureRecord* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeaturesFile_FeatureRecord* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FeaturesFile_FeatureRecord>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FeaturesFile_FeatureRecord& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FeaturesFile_FeatureRecord& from) { FeaturesFile_FeatureRecord::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FeaturesFile_FeatureRecord* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Odb.Lib.Protobuf.FeaturesFile.FeatureRecord"; }

 protected:
  explicit FeaturesFile_FeatureRecord(::google::protobuf::Arena* arena);
  FeaturesFile_FeatureRecord(::google::protobuf::Arena* arena, const FeaturesFile_FeatureRecord& from);
  FeaturesFile_FeatureRecord(::google::protobuf::Arena* arena, FeaturesFile_FeatureRecord&& from) noexcept
      : FeaturesFile_FeatureRecord(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Type = FeaturesFile_FeatureRecord_Type;
  static constexpr Type Arc = FeaturesFile_FeatureRecord_Type_Arc;
  static constexpr Type Pad = FeaturesFile_FeatureRecord_Type_Pad;
  static constexpr Type Surface = FeaturesFile_FeatureRecord_Type_Surface;
  static constexpr Type Barcode = FeaturesFile_FeatureRecord_Type_Barcode;
  static constexpr Type Text = FeaturesFile_FeatureRecord_Type_Text;
  static constexpr Type Line = FeaturesFile_FeatureRecord_Type_Line;
  static inline bool Type_IsValid(int value) {
    return FeaturesFile_FeatureRecord_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = FeaturesFile_FeatureRecord_Type_Type_MIN;
  static constexpr Type Type_MAX = FeaturesFile_FeatureRecord_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = FeaturesFile_FeatureRecord_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Type_descriptor() {
    return FeaturesFile_FeatureRecord_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return FeaturesFile_FeatureRecord_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return FeaturesFile_FeatureRecord_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kContourPolygonsFieldNumber = 1,
    kAttributeLookupTableFieldNumber = 29,
    kFontFieldNumber = 15,
    kTextFieldNumber = 19,
    kValueFieldNumber = 25,
    kXsFieldNumber = 3,
    kYsFieldNumber = 4,
    kXeFieldNumber = 5,
    kTypeFieldNumber = 2,
    kAptDefFieldNumber = 9,
    kYeFieldNumber = 6,
    kXFieldNumber = 7,
    kYFieldNumber = 8,
    kAptDefResizeFactorFieldNumber = 11,
    kXcFieldNumber = 12,
    kAptDefSymbolNumFieldNumber = 10,
    kCwFieldNumber = 14,
    kYcFieldNumber = 13,
    kXsizeFieldNumber = 16,
    kYsizeFieldNumber = 17,
    kWidthFactorFieldNumber = 18,
    kVersionFieldNumber = 20,
    kSymNumFieldNumber = 21,
    kPolarityFieldNumber = 22,
    kDcodeFieldNumber = 23,
    kAtrFieldNumber = 24,
    kIdFieldNumber = 26,
    kOrientDefRotationFieldNumber = 28,
    kOrientDefFieldNumber = 27,
  };
  // repeated .Odb.Lib.Protobuf.ContourPolygon contourPolygons = 1;
  int contourpolygons_size() const;
  private:
  int _internal_contourpolygons_size() const;

  public:
  void clear_contourpolygons() ;
  ::Odb::Lib::Protobuf::ContourPolygon* mutable_contourpolygons(int index);
  ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::ContourPolygon>* mutable_contourpolygons();

  private:
  const ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::ContourPolygon>& _internal_contourpolygons() const;
  ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::ContourPolygon>* _internal_mutable_contourpolygons();
  public:
  const ::Odb::Lib::Protobuf::ContourPolygon& contourpolygons(int index) const;
  ::Odb::Lib::Protobuf::ContourPolygon* add_contourpolygons();
  const ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::ContourPolygon>& contourpolygons() const;
  // map<string, string> attributeLookupTable = 29;
  int attributelookuptable_size() const;
  private:
  int _internal_attributelookuptable_size() const;

  public:
  void clear_attributelookuptable() ;
  const ::google::protobuf::Map<std::string, std::string>& attributelookuptable() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_attributelookuptable();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_attributelookuptable() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_attributelookuptable();

  public:
  // optional string font = 15;
  bool has_font() const;
  void clear_font() ;
  const std::string& font() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_font(Arg_&& arg, Args_... args);
  std::string* mutable_font();
  PROTOBUF_NODISCARD std::string* release_font();
  void set_allocated_font(std::string* value);

  private:
  const std::string& _internal_font() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_font(
      const std::string& value);
  std::string* _internal_mutable_font();

  public:
  // optional string text = 19;
  bool has_text() const;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // optional string value = 25;
  bool has_value() const;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // optional double xs = 3;
  bool has_xs() const;
  void clear_xs() ;
  double xs() const;
  void set_xs(double value);

  private:
  double _internal_xs() const;
  void _internal_set_xs(double value);

  public:
  // optional double ys = 4;
  bool has_ys() const;
  void clear_ys() ;
  double ys() const;
  void set_ys(double value);

  private:
  double _internal_ys() const;
  void _internal_set_ys(double value);

  public:
  // optional double xe = 5;
  bool has_xe() const;
  void clear_xe() ;
  double xe() const;
  void set_xe(double value);

  private:
  double _internal_xe() const;
  void _internal_set_xe(double value);

  public:
  // optional .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.Type type = 2;
  bool has_type() const;
  void clear_type() ;
  ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type type() const;
  void set_type(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type value);

  private:
  ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type _internal_type() const;
  void _internal_set_type(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type value);

  public:
  // optional int32 apt_def = 9;
  bool has_apt_def() const;
  void clear_apt_def() ;
  ::int32_t apt_def() const;
  void set_apt_def(::int32_t value);

  private:
  ::int32_t _internal_apt_def() const;
  void _internal_set_apt_def(::int32_t value);

  public:
  // optional double ye = 6;
  bool has_ye() const;
  void clear_ye() ;
  double ye() const;
  void set_ye(double value);

  private:
  double _internal_ye() const;
  void _internal_set_ye(double value);

  public:
  // optional double x = 7;
  bool has_x() const;
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // optional double y = 8;
  bool has_y() const;
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // optional double apt_def_resize_factor = 11;
  bool has_apt_def_resize_factor() const;
  void clear_apt_def_resize_factor() ;
  double apt_def_resize_factor() const;
  void set_apt_def_resize_factor(double value);

  private:
  double _internal_apt_def_resize_factor() const;
  void _internal_set_apt_def_resize_factor(double value);

  public:
  // optional double xc = 12;
  bool has_xc() const;
  void clear_xc() ;
  double xc() const;
  void set_xc(double value);

  private:
  double _internal_xc() const;
  void _internal_set_xc(double value);

  public:
  // optional int32 apt_def_symbol_num = 10;
  bool has_apt_def_symbol_num() const;
  void clear_apt_def_symbol_num() ;
  ::int32_t apt_def_symbol_num() const;
  void set_apt_def_symbol_num(::int32_t value);

  private:
  ::int32_t _internal_apt_def_symbol_num() const;
  void _internal_set_apt_def_symbol_num(::int32_t value);

  public:
  // optional bool cw = 14;
  bool has_cw() const;
  void clear_cw() ;
  bool cw() const;
  void set_cw(bool value);

  private:
  bool _internal_cw() const;
  void _internal_set_cw(bool value);

  public:
  // optional double yc = 13;
  bool has_yc() const;
  void clear_yc() ;
  double yc() const;
  void set_yc(double value);

  private:
  double _internal_yc() const;
  void _internal_set_yc(double value);

  public:
  // optional double xsize = 16;
  bool has_xsize() const;
  void clear_xsize() ;
  double xsize() const;
  void set_xsize(double value);

  private:
  double _internal_xsize() const;
  void _internal_set_xsize(double value);

  public:
  // optional double ysize = 17;
  bool has_ysize() const;
  void clear_ysize() ;
  double ysize() const;
  void set_ysize(double value);

  private:
  double _internal_ysize() const;
  void _internal_set_ysize(double value);

  public:
  // optional double width_factor = 18;
  bool has_width_factor() const;
  void clear_width_factor() ;
  double width_factor() const;
  void set_width_factor(double value);

  private:
  double _internal_width_factor() const;
  void _internal_set_width_factor(double value);

  public:
  // optional int32 version = 20;
  bool has_version() const;
  void clear_version() ;
  ::int32_t version() const;
  void set_version(::int32_t value);

  private:
  ::int32_t _internal_version() const;
  void _internal_set_version(::int32_t value);

  public:
  // optional int32 sym_num = 21;
  bool has_sym_num() const;
  void clear_sym_num() ;
  ::int32_t sym_num() const;
  void set_sym_num(::int32_t value);

  private:
  ::int32_t _internal_sym_num() const;
  void _internal_set_sym_num(::int32_t value);

  public:
  // optional .Odb.Lib.Protobuf.Polarity polarity = 22;
  bool has_polarity() const;
  void clear_polarity() ;
  ::Odb::Lib::Protobuf::Polarity polarity() const;
  void set_polarity(::Odb::Lib::Protobuf::Polarity value);

  private:
  ::Odb::Lib::Protobuf::Polarity _internal_polarity() const;
  void _internal_set_polarity(::Odb::Lib::Protobuf::Polarity value);

  public:
  // optional int32 dcode = 23;
  bool has_dcode() const;
  void clear_dcode() ;
  ::int32_t dcode() const;
  void set_dcode(::int32_t value);

  private:
  ::int32_t _internal_dcode() const;
  void _internal_set_dcode(::int32_t value);

  public:
  // optional int32 atr = 24;
  bool has_atr() const;
  void clear_atr() ;
  ::int32_t atr() const;
  void set_atr(::int32_t value);

  private:
  ::int32_t _internal_atr() const;
  void _internal_set_atr(::int32_t value);

  public:
  // optional uint32 id = 26;
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional double orient_def_rotation = 28;
  bool has_orient_def_rotation() const;
  void clear_orient_def_rotation() ;
  double orient_def_rotation() const;
  void set_orient_def_rotation(double value);

  private:
  double _internal_orient_def_rotation() const;
  void _internal_set_orient_def_rotation(double value);

  public:
  // optional int32 orient_def = 27;
  bool has_orient_def() const;
  void clear_orient_def() ;
  ::int32_t orient_def() const;
  void set_orient_def(::int32_t value);

  private:
  ::int32_t _internal_orient_def() const;
  void _internal_set_orient_def(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 29, 2,
      109, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FeaturesFile_FeatureRecord& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::Odb::Lib::Protobuf::ContourPolygon > contourpolygons_;
    ::google::protobuf::internal::MapField<FeaturesFile_FeatureRecord_AttributeLookupTableEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        attributelookuptable_;
    ::google::protobuf::internal::ArenaStringPtr font_;
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr value_;
    double xs_;
    double ys_;
    double xe_;
    int type_;
    ::int32_t apt_def_;
    double ye_;
    double x_;
    double y_;
    double apt_def_resize_factor_;
    double xc_;
    ::int32_t apt_def_symbol_num_;
    bool cw_;
    double yc_;
    double xsize_;
    double ysize_;
    double width_factor_;
    ::int32_t version_;
    ::int32_t sym_num_;
    int polarity_;
    ::int32_t dcode_;
    ::int32_t atr_;
    ::uint32_t id_;
    double orient_def_rotation_;
    ::int32_t orient_def_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_featuresfile_2eproto;
};
// -------------------------------------------------------------------

class ODBDESIGN_EXPORT FeaturesFile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.FeaturesFile) */ {
 public:
  inline FeaturesFile() : FeaturesFile(nullptr) {}
  ~FeaturesFile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(FeaturesFile* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(FeaturesFile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FeaturesFile(
      ::google::protobuf::internal::ConstantInitialized);

  inline FeaturesFile(const FeaturesFile& from) : FeaturesFile(nullptr, from) {}
  inline FeaturesFile(FeaturesFile&& from) noexcept
      : FeaturesFile(nullptr, std::move(from)) {}
  inline FeaturesFile& operator=(const FeaturesFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeaturesFile& operator=(FeaturesFile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeaturesFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeaturesFile* internal_default_instance() {
    return reinterpret_cast<const FeaturesFile*>(
        &_FeaturesFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(FeaturesFile& a, FeaturesFile& b) { a.Swap(&b); }
  inline void Swap(FeaturesFile* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeaturesFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeaturesFile* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<FeaturesFile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FeaturesFile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FeaturesFile& from) { FeaturesFile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(FeaturesFile* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Odb.Lib.Protobuf.FeaturesFile"; }

 protected:
  explicit FeaturesFile(::google::protobuf::Arena* arena);
  FeaturesFile(::google::protobuf::Arena* arena, const FeaturesFile& from);
  FeaturesFile(::google::protobuf::Arena* arena, FeaturesFile&& from) noexcept
      : FeaturesFile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using FeatureRecord = FeaturesFile_FeatureRecord;

  // accessors -------------------------------------------------------
  enum : int {
    kFeatureRecordsFieldNumber = 8,
    kSymbolNamesByNameFieldNumber = 9,
    kUnitsFieldNumber = 1,
    kPathFieldNumber = 5,
    kDirectoryFieldNumber = 6,
    kIdFieldNumber = 2,
    kNumFeaturesFieldNumber = 7,
  };
  // repeated .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord featureRecords = 8;
  int featurerecords_size() const;
  private:
  int _internal_featurerecords_size() const;

  public:
  void clear_featurerecords() ;
  ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* mutable_featurerecords(int index);
  ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord>* mutable_featurerecords();

  private:
  const ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord>& _internal_featurerecords() const;
  ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord>* _internal_mutable_featurerecords();
  public:
  const ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord& featurerecords(int index) const;
  ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* add_featurerecords();
  const ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord>& featurerecords() const;
  // map<string, .Odb.Lib.Protobuf.SymbolName> symbolNamesByName = 9;
  int symbolnamesbyname_size() const;
  private:
  int _internal_symbolnamesbyname_size() const;

  public:
  void clear_symbolnamesbyname() ;
  const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolName>& symbolnamesbyname() const;
  ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolName>* mutable_symbolnamesbyname();

  private:
  const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolName>& _internal_symbolnamesbyname() const;
  ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolName>* _internal_mutable_symbolnamesbyname();

  public:
  // optional string units = 1;
  bool has_units() const;
  void clear_units() ;
  const std::string& units() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_units(Arg_&& arg, Args_... args);
  std::string* mutable_units();
  PROTOBUF_NODISCARD std::string* release_units();
  void set_allocated_units(std::string* value);

  private:
  const std::string& _internal_units() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_units(
      const std::string& value);
  std::string* _internal_mutable_units();

  public:
  // optional string path = 5;
  bool has_path() const;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // optional string directory = 6;
  bool has_directory() const;
  void clear_directory() ;
  const std::string& directory() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_directory(Arg_&& arg, Args_... args);
  std::string* mutable_directory();
  PROTOBUF_NODISCARD std::string* release_directory();
  void set_allocated_directory(std::string* value);

  private:
  const std::string& _internal_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_directory(
      const std::string& value);
  std::string* _internal_mutable_directory();

  public:
  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // optional int32 numFeatures = 7;
  bool has_numfeatures() const;
  void clear_numfeatures() ;
  ::int32_t numfeatures() const;
  void set_numfeatures(::int32_t value);

  private:
  ::int32_t _internal_numfeatures() const;
  void _internal_set_numfeatures(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.FeaturesFile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      73, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const FeaturesFile& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord > featurerecords_;
    ::google::protobuf::internal::MapField<FeaturesFile_SymbolNamesByNameEntry_DoNotUse, std::string, ::Odb::Lib::Protobuf::SymbolName,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        symbolnamesbyname_;
    ::google::protobuf::internal::ArenaStringPtr units_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr directory_;
    ::uint32_t id_;
    ::int32_t numfeatures_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_featuresfile_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FeaturesFile_FeatureRecord

// optional .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.Type type = 2;
inline bool FeaturesFile_FeatureRecord::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord::type() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.type)
  return _internal_type();
}
inline void FeaturesFile_FeatureRecord::set_type(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type value) {
  _internal_set_type(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.type)
}
inline ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type FeaturesFile_FeatureRecord::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type>(_impl_.type_);
}
inline void FeaturesFile_FeatureRecord::_internal_set_type(::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// optional double xs = 3;
inline bool FeaturesFile_FeatureRecord::has_xs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_xs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xs_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double FeaturesFile_FeatureRecord::xs() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.xs)
  return _internal_xs();
}
inline void FeaturesFile_FeatureRecord::set_xs(double value) {
  _internal_set_xs(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.xs)
}
inline double FeaturesFile_FeatureRecord::_internal_xs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xs_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_xs(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xs_ = value;
}

// optional double ys = 4;
inline bool FeaturesFile_FeatureRecord::has_ys() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_ys() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ys_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double FeaturesFile_FeatureRecord::ys() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.ys)
  return _internal_ys();
}
inline void FeaturesFile_FeatureRecord::set_ys(double value) {
  _internal_set_ys(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.ys)
}
inline double FeaturesFile_FeatureRecord::_internal_ys() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ys_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_ys(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ys_ = value;
}

// optional double xe = 5;
inline bool FeaturesFile_FeatureRecord::has_xe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_xe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xe_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double FeaturesFile_FeatureRecord::xe() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.xe)
  return _internal_xe();
}
inline void FeaturesFile_FeatureRecord::set_xe(double value) {
  _internal_set_xe(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.xe)
}
inline double FeaturesFile_FeatureRecord::_internal_xe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xe_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_xe(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xe_ = value;
}

// optional double ye = 6;
inline bool FeaturesFile_FeatureRecord::has_ye() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_ye() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ye_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double FeaturesFile_FeatureRecord::ye() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.ye)
  return _internal_ye();
}
inline void FeaturesFile_FeatureRecord::set_ye(double value) {
  _internal_set_ye(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.ye)
}
inline double FeaturesFile_FeatureRecord::_internal_ye() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ye_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_ye(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ye_ = value;
}

// optional double x = 7;
inline bool FeaturesFile_FeatureRecord::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double FeaturesFile_FeatureRecord::x() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.x)
  return _internal_x();
}
inline void FeaturesFile_FeatureRecord::set_x(double value) {
  _internal_set_x(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.x)
}
inline double FeaturesFile_FeatureRecord::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_x(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// optional double y = 8;
inline bool FeaturesFile_FeatureRecord::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double FeaturesFile_FeatureRecord::y() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.y)
  return _internal_y();
}
inline void FeaturesFile_FeatureRecord::set_y(double value) {
  _internal_set_y(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.y)
}
inline double FeaturesFile_FeatureRecord::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_y(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// optional int32 apt_def = 9;
inline bool FeaturesFile_FeatureRecord::has_apt_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_apt_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.apt_def_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t FeaturesFile_FeatureRecord::apt_def() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.apt_def)
  return _internal_apt_def();
}
inline void FeaturesFile_FeatureRecord::set_apt_def(::int32_t value) {
  _internal_set_apt_def(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.apt_def)
}
inline ::int32_t FeaturesFile_FeatureRecord::_internal_apt_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.apt_def_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_apt_def(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.apt_def_ = value;
}

// optional int32 apt_def_symbol_num = 10;
inline bool FeaturesFile_FeatureRecord::has_apt_def_symbol_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_apt_def_symbol_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.apt_def_symbol_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t FeaturesFile_FeatureRecord::apt_def_symbol_num() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.apt_def_symbol_num)
  return _internal_apt_def_symbol_num();
}
inline void FeaturesFile_FeatureRecord::set_apt_def_symbol_num(::int32_t value) {
  _internal_set_apt_def_symbol_num(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.apt_def_symbol_num)
}
inline ::int32_t FeaturesFile_FeatureRecord::_internal_apt_def_symbol_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.apt_def_symbol_num_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_apt_def_symbol_num(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.apt_def_symbol_num_ = value;
}

// optional double apt_def_resize_factor = 11;
inline bool FeaturesFile_FeatureRecord::has_apt_def_resize_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_apt_def_resize_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.apt_def_resize_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double FeaturesFile_FeatureRecord::apt_def_resize_factor() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.apt_def_resize_factor)
  return _internal_apt_def_resize_factor();
}
inline void FeaturesFile_FeatureRecord::set_apt_def_resize_factor(double value) {
  _internal_set_apt_def_resize_factor(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.apt_def_resize_factor)
}
inline double FeaturesFile_FeatureRecord::_internal_apt_def_resize_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.apt_def_resize_factor_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_apt_def_resize_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.apt_def_resize_factor_ = value;
}

// optional double xc = 12;
inline bool FeaturesFile_FeatureRecord::has_xc() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_xc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xc_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double FeaturesFile_FeatureRecord::xc() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.xc)
  return _internal_xc();
}
inline void FeaturesFile_FeatureRecord::set_xc(double value) {
  _internal_set_xc(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.xc)
}
inline double FeaturesFile_FeatureRecord::_internal_xc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xc_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_xc(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xc_ = value;
}

// optional double yc = 13;
inline bool FeaturesFile_FeatureRecord::has_yc() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_yc() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yc_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double FeaturesFile_FeatureRecord::yc() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.yc)
  return _internal_yc();
}
inline void FeaturesFile_FeatureRecord::set_yc(double value) {
  _internal_set_yc(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.yc)
}
inline double FeaturesFile_FeatureRecord::_internal_yc() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.yc_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_yc(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.yc_ = value;
}

// optional bool cw = 14;
inline bool FeaturesFile_FeatureRecord::has_cw() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_cw() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cw_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool FeaturesFile_FeatureRecord::cw() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.cw)
  return _internal_cw();
}
inline void FeaturesFile_FeatureRecord::set_cw(bool value) {
  _internal_set_cw(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.cw)
}
inline bool FeaturesFile_FeatureRecord::_internal_cw() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cw_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_cw(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cw_ = value;
}

// optional string font = 15;
inline bool FeaturesFile_FeatureRecord::has_font() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_font() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.font_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FeaturesFile_FeatureRecord::font() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.font)
  return _internal_font();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeaturesFile_FeatureRecord::set_font(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.font_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.font)
}
inline std::string* FeaturesFile_FeatureRecord::mutable_font() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_font();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.font)
  return _s;
}
inline const std::string& FeaturesFile_FeatureRecord::_internal_font() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.font_.Get();
}
inline void FeaturesFile_FeatureRecord::_internal_set_font(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.font_.Set(value, GetArena());
}
inline std::string* FeaturesFile_FeatureRecord::_internal_mutable_font() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.font_.Mutable( GetArena());
}
inline std::string* FeaturesFile_FeatureRecord::release_font() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.font)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.font_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.font_.Set("", GetArena());
  }
  return released;
}
inline void FeaturesFile_FeatureRecord::set_allocated_font(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.font_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.font_.IsDefault()) {
    _impl_.font_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.font)
}

// optional double xsize = 16;
inline bool FeaturesFile_FeatureRecord::has_xsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_xsize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xsize_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double FeaturesFile_FeatureRecord::xsize() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.xsize)
  return _internal_xsize();
}
inline void FeaturesFile_FeatureRecord::set_xsize(double value) {
  _internal_set_xsize(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.xsize)
}
inline double FeaturesFile_FeatureRecord::_internal_xsize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xsize_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_xsize(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xsize_ = value;
}

// optional double ysize = 17;
inline bool FeaturesFile_FeatureRecord::has_ysize() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_ysize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ysize_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double FeaturesFile_FeatureRecord::ysize() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.ysize)
  return _internal_ysize();
}
inline void FeaturesFile_FeatureRecord::set_ysize(double value) {
  _internal_set_ysize(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.ysize)
}
inline double FeaturesFile_FeatureRecord::_internal_ysize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ysize_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_ysize(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ysize_ = value;
}

// optional double width_factor = 18;
inline bool FeaturesFile_FeatureRecord::has_width_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_width_factor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_factor_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline double FeaturesFile_FeatureRecord::width_factor() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.width_factor)
  return _internal_width_factor();
}
inline void FeaturesFile_FeatureRecord::set_width_factor(double value) {
  _internal_set_width_factor(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.width_factor)
}
inline double FeaturesFile_FeatureRecord::_internal_width_factor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_factor_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_width_factor(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_factor_ = value;
}

// optional string text = 19;
inline bool FeaturesFile_FeatureRecord::has_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FeaturesFile_FeatureRecord::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeaturesFile_FeatureRecord::set_text(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.text)
}
inline std::string* FeaturesFile_FeatureRecord::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.text)
  return _s;
}
inline const std::string& FeaturesFile_FeatureRecord::_internal_text() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.text_.Get();
}
inline void FeaturesFile_FeatureRecord::_internal_set_text(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* FeaturesFile_FeatureRecord::_internal_mutable_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* FeaturesFile_FeatureRecord::release_text() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.text)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.text_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.text_.Set("", GetArena());
  }
  return released;
}
inline void FeaturesFile_FeatureRecord::set_allocated_text(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.text_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.text)
}

// optional int32 version = 20;
inline bool FeaturesFile_FeatureRecord::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int32_t FeaturesFile_FeatureRecord::version() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.version)
  return _internal_version();
}
inline void FeaturesFile_FeatureRecord::set_version(::int32_t value) {
  _internal_set_version(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.version)
}
inline ::int32_t FeaturesFile_FeatureRecord::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_version(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_ = value;
}

// optional int32 sym_num = 21;
inline bool FeaturesFile_FeatureRecord::has_sym_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_sym_num() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sym_num_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int32_t FeaturesFile_FeatureRecord::sym_num() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.sym_num)
  return _internal_sym_num();
}
inline void FeaturesFile_FeatureRecord::set_sym_num(::int32_t value) {
  _internal_set_sym_num(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.sym_num)
}
inline ::int32_t FeaturesFile_FeatureRecord::_internal_sym_num() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sym_num_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_sym_num(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sym_num_ = value;
}

// optional .Odb.Lib.Protobuf.Polarity polarity = 22;
inline bool FeaturesFile_FeatureRecord::has_polarity() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_polarity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.polarity_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::Odb::Lib::Protobuf::Polarity FeaturesFile_FeatureRecord::polarity() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.polarity)
  return _internal_polarity();
}
inline void FeaturesFile_FeatureRecord::set_polarity(::Odb::Lib::Protobuf::Polarity value) {
  _internal_set_polarity(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.polarity)
}
inline ::Odb::Lib::Protobuf::Polarity FeaturesFile_FeatureRecord::_internal_polarity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::Odb::Lib::Protobuf::Polarity>(_impl_.polarity_);
}
inline void FeaturesFile_FeatureRecord::_internal_set_polarity(::Odb::Lib::Protobuf::Polarity value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.polarity_ = value;
}

// optional int32 dcode = 23;
inline bool FeaturesFile_FeatureRecord::has_dcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_dcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int32_t FeaturesFile_FeatureRecord::dcode() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.dcode)
  return _internal_dcode();
}
inline void FeaturesFile_FeatureRecord::set_dcode(::int32_t value) {
  _internal_set_dcode(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.dcode)
}
inline ::int32_t FeaturesFile_FeatureRecord::_internal_dcode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dcode_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_dcode(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dcode_ = value;
}

// optional int32 atr = 24;
inline bool FeaturesFile_FeatureRecord::has_atr() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_atr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.atr_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int32_t FeaturesFile_FeatureRecord::atr() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.atr)
  return _internal_atr();
}
inline void FeaturesFile_FeatureRecord::set_atr(::int32_t value) {
  _internal_set_atr(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.atr)
}
inline ::int32_t FeaturesFile_FeatureRecord::_internal_atr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.atr_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_atr(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.atr_ = value;
}

// optional string value = 25;
inline bool FeaturesFile_FeatureRecord::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FeaturesFile_FeatureRecord::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeaturesFile_FeatureRecord::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.value)
}
inline std::string* FeaturesFile_FeatureRecord::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.value)
  return _s;
}
inline const std::string& FeaturesFile_FeatureRecord::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void FeaturesFile_FeatureRecord::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.value_.Set(value, GetArena());
}
inline std::string* FeaturesFile_FeatureRecord::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* FeaturesFile_FeatureRecord::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.value)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.value_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.value_.Set("", GetArena());
  }
  return released;
}
inline void FeaturesFile_FeatureRecord::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.value_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.value)
}

// optional uint32 id = 26;
inline bool FeaturesFile_FeatureRecord::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::uint32_t FeaturesFile_FeatureRecord::id() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.id)
  return _internal_id();
}
inline void FeaturesFile_FeatureRecord::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.id)
}
inline ::uint32_t FeaturesFile_FeatureRecord::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional int32 orient_def = 27;
inline bool FeaturesFile_FeatureRecord::has_orient_def() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_orient_def() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orient_def_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::int32_t FeaturesFile_FeatureRecord::orient_def() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.orient_def)
  return _internal_orient_def();
}
inline void FeaturesFile_FeatureRecord::set_orient_def(::int32_t value) {
  _internal_set_orient_def(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.orient_def)
}
inline ::int32_t FeaturesFile_FeatureRecord::_internal_orient_def() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orient_def_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_orient_def(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orient_def_ = value;
}

// optional double orient_def_rotation = 28;
inline bool FeaturesFile_FeatureRecord::has_orient_def_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void FeaturesFile_FeatureRecord::clear_orient_def_rotation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orient_def_rotation_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline double FeaturesFile_FeatureRecord::orient_def_rotation() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.orient_def_rotation)
  return _internal_orient_def_rotation();
}
inline void FeaturesFile_FeatureRecord::set_orient_def_rotation(double value) {
  _internal_set_orient_def_rotation(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.orient_def_rotation)
}
inline double FeaturesFile_FeatureRecord::_internal_orient_def_rotation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orient_def_rotation_;
}
inline void FeaturesFile_FeatureRecord::_internal_set_orient_def_rotation(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orient_def_rotation_ = value;
}

// repeated .Odb.Lib.Protobuf.ContourPolygon contourPolygons = 1;
inline int FeaturesFile_FeatureRecord::_internal_contourpolygons_size() const {
  return _internal_contourpolygons().size();
}
inline int FeaturesFile_FeatureRecord::contourpolygons_size() const {
  return _internal_contourpolygons_size();
}
inline ::Odb::Lib::Protobuf::ContourPolygon* FeaturesFile_FeatureRecord::mutable_contourpolygons(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.contourPolygons)
  return _internal_mutable_contourpolygons()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::ContourPolygon>* FeaturesFile_FeatureRecord::mutable_contourpolygons()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.contourPolygons)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_contourpolygons();
}
inline const ::Odb::Lib::Protobuf::ContourPolygon& FeaturesFile_FeatureRecord::contourpolygons(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.contourPolygons)
  return _internal_contourpolygons().Get(index);
}
inline ::Odb::Lib::Protobuf::ContourPolygon* FeaturesFile_FeatureRecord::add_contourpolygons() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Odb::Lib::Protobuf::ContourPolygon* _add = _internal_mutable_contourpolygons()->Add();
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.contourPolygons)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::ContourPolygon>& FeaturesFile_FeatureRecord::contourpolygons() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.contourPolygons)
  return _internal_contourpolygons();
}
inline const ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::ContourPolygon>&
FeaturesFile_FeatureRecord::_internal_contourpolygons() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contourpolygons_;
}
inline ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::ContourPolygon>*
FeaturesFile_FeatureRecord::_internal_mutable_contourpolygons() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.contourpolygons_;
}

// map<string, string> attributeLookupTable = 29;
inline int FeaturesFile_FeatureRecord::_internal_attributelookuptable_size() const {
  return _internal_attributelookuptable().size();
}
inline int FeaturesFile_FeatureRecord::attributelookuptable_size() const {
  return _internal_attributelookuptable_size();
}
inline void FeaturesFile_FeatureRecord::clear_attributelookuptable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attributelookuptable_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& FeaturesFile_FeatureRecord::_internal_attributelookuptable() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attributelookuptable_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& FeaturesFile_FeatureRecord::attributelookuptable() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.attributeLookupTable)
  return _internal_attributelookuptable();
}
inline ::google::protobuf::Map<std::string, std::string>* FeaturesFile_FeatureRecord::_internal_mutable_attributelookuptable() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attributelookuptable_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* FeaturesFile_FeatureRecord::mutable_attributelookuptable() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.FeaturesFile.FeatureRecord.attributeLookupTable)
  return _internal_mutable_attributelookuptable();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FeaturesFile

// optional string units = 1;
inline bool FeaturesFile::has_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FeaturesFile::clear_units() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.units_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FeaturesFile::units() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.units)
  return _internal_units();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeaturesFile::set_units(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.units_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.units)
}
inline std::string* FeaturesFile::mutable_units() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_units();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.units)
  return _s;
}
inline const std::string& FeaturesFile::_internal_units() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.units_.Get();
}
inline void FeaturesFile::_internal_set_units(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.units_.Set(value, GetArena());
}
inline std::string* FeaturesFile::_internal_mutable_units() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.units_.Mutable( GetArena());
}
inline std::string* FeaturesFile::release_units() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FeaturesFile.units)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.units_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.units_.Set("", GetArena());
  }
  return released;
}
inline void FeaturesFile::set_allocated_units(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.units_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FeaturesFile.units)
}

// optional uint32 id = 2;
inline bool FeaturesFile::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FeaturesFile::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t FeaturesFile::id() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.id)
  return _internal_id();
}
inline void FeaturesFile::set_id(::uint32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.id)
}
inline ::uint32_t FeaturesFile::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void FeaturesFile::_internal_set_id(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// optional string path = 5;
inline bool FeaturesFile::has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FeaturesFile::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FeaturesFile::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeaturesFile::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.path)
}
inline std::string* FeaturesFile::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.path)
  return _s;
}
inline const std::string& FeaturesFile::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void FeaturesFile::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(value, GetArena());
}
inline std::string* FeaturesFile::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* FeaturesFile::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FeaturesFile.path)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.path_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.path_.Set("", GetArena());
  }
  return released;
}
inline void FeaturesFile::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FeaturesFile.path)
}

// optional string directory = 6;
inline bool FeaturesFile::has_directory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FeaturesFile::clear_directory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.directory_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FeaturesFile::directory() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.directory)
  return _internal_directory();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeaturesFile::set_directory(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.directory_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.directory)
}
inline std::string* FeaturesFile::mutable_directory() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_directory();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.directory)
  return _s;
}
inline const std::string& FeaturesFile::_internal_directory() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.directory_.Get();
}
inline void FeaturesFile::_internal_set_directory(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.directory_.Set(value, GetArena());
}
inline std::string* FeaturesFile::_internal_mutable_directory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.directory_.Mutable( GetArena());
}
inline std::string* FeaturesFile::release_directory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.FeaturesFile.directory)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.directory_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.directory_.Set("", GetArena());
  }
  return released;
}
inline void FeaturesFile::set_allocated_directory(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.directory_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.directory_.IsDefault()) {
    _impl_.directory_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.FeaturesFile.directory)
}

// optional int32 numFeatures = 7;
inline bool FeaturesFile::has_numfeatures() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FeaturesFile::clear_numfeatures() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.numfeatures_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t FeaturesFile::numfeatures() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.numFeatures)
  return _internal_numfeatures();
}
inline void FeaturesFile::set_numfeatures(::int32_t value) {
  _internal_set_numfeatures(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.FeaturesFile.numFeatures)
}
inline ::int32_t FeaturesFile::_internal_numfeatures() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.numfeatures_;
}
inline void FeaturesFile::_internal_set_numfeatures(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.numfeatures_ = value;
}

// repeated .Odb.Lib.Protobuf.FeaturesFile.FeatureRecord featureRecords = 8;
inline int FeaturesFile::_internal_featurerecords_size() const {
  return _internal_featurerecords().size();
}
inline int FeaturesFile::featurerecords_size() const {
  return _internal_featurerecords_size();
}
inline void FeaturesFile::clear_featurerecords() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.featurerecords_.Clear();
}
inline ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* FeaturesFile::mutable_featurerecords(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.FeaturesFile.featureRecords)
  return _internal_mutable_featurerecords()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord>* FeaturesFile::mutable_featurerecords()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.FeaturesFile.featureRecords)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_featurerecords();
}
inline const ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord& FeaturesFile::featurerecords(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.FeaturesFile.featureRecords)
  return _internal_featurerecords().Get(index);
}
inline ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* FeaturesFile::add_featurerecords() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord* _add = _internal_mutable_featurerecords()->Add();
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.FeaturesFile.featureRecords)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord>& FeaturesFile::featurerecords() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.FeaturesFile.featureRecords)
  return _internal_featurerecords();
}
inline const ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord>&
FeaturesFile::_internal_featurerecords() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.featurerecords_;
}
inline ::google::protobuf::RepeatedPtrField<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord>*
FeaturesFile::_internal_mutable_featurerecords() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.featurerecords_;
}

// map<string, .Odb.Lib.Protobuf.SymbolName> symbolNamesByName = 9;
inline int FeaturesFile::_internal_symbolnamesbyname_size() const {
  return _internal_symbolnamesbyname().size();
}
inline int FeaturesFile::symbolnamesbyname_size() const {
  return _internal_symbolnamesbyname_size();
}
inline const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolName>& FeaturesFile::_internal_symbolnamesbyname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbolnamesbyname_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolName>& FeaturesFile::symbolnamesbyname() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.FeaturesFile.symbolNamesByName)
  return _internal_symbolnamesbyname();
}
inline ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolName>* FeaturesFile::_internal_mutable_symbolnamesbyname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbolnamesbyname_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::Odb::Lib::Protobuf::SymbolName>* FeaturesFile::mutable_symbolnamesbyname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.FeaturesFile.symbolNamesByName)
  return _internal_mutable_symbolnamesbyname();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type>() {
  return ::Odb::Lib::Protobuf::FeaturesFile_FeatureRecord_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // featuresfile_2eproto_2epb_2eh
