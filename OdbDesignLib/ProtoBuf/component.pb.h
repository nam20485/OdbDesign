// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enums.pb.h"
#include "part.pb.h"
#include "package.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2eproto ODBDESIGN_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_component_2eproto {
  static const uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
namespace ProductModel {
class Component;
struct ComponentDefaultTypeInternal;
ODBDESIGN_EXPORT extern ComponentDefaultTypeInternal _Component_default_instance_;
}  // namespace ProductModel
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ProductModel::Component* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ProductModel::Component>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Odb {
namespace Lib {
namespace Protobuf {
namespace ProductModel {

// ===================================================================

class ODBDESIGN_EXPORT Component final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.ProductModel.Component) */ {
 public:
  inline Component() : Component(nullptr) {}
  ~Component() override;
  explicit PROTOBUF_CONSTEXPR Component(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Component& default_instance() {
    return *internal_default_instance();
  }
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Component* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Component& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Component& from) {
    Component::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.ProductModel.Component";
  }
  protected:
  explicit Component(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefDesFieldNumber = 1,
    kPartNameFieldNumber = 2,
    kPackageFieldNumber = 3,
    kPartFieldNumber = 6,
    kIndexFieldNumber = 4,
    kSideFieldNumber = 5,
  };
  // optional string refDes = 1;
  bool has_refdes() const;
  private:
  bool _internal_has_refdes() const;
  public:
  void clear_refdes();
  const std::string& refdes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_refdes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_refdes();
  PROTOBUF_NODISCARD std::string* release_refdes();
  void set_allocated_refdes(std::string* refdes);
  private:
  const std::string& _internal_refdes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refdes(const std::string& value);
  std::string* _internal_mutable_refdes();
  public:

  // optional string partName = 2;
  bool has_partname() const;
  private:
  bool _internal_has_partname() const;
  public:
  void clear_partname();
  const std::string& partname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partname();
  PROTOBUF_NODISCARD std::string* release_partname();
  void set_allocated_partname(std::string* partname);
  private:
  const std::string& _internal_partname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partname(const std::string& value);
  std::string* _internal_mutable_partname();
  public:

  // optional .Odb.Lib.Protobuf.ProductModel.Package package = 3;
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::Odb::Lib::Protobuf::ProductModel::Package& package() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::ProductModel::Package* release_package();
  ::Odb::Lib::Protobuf::ProductModel::Package* mutable_package();
  void set_allocated_package(::Odb::Lib::Protobuf::ProductModel::Package* package);
  private:
  const ::Odb::Lib::Protobuf::ProductModel::Package& _internal_package() const;
  ::Odb::Lib::Protobuf::ProductModel::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::Odb::Lib::Protobuf::ProductModel::Package* package);
  ::Odb::Lib::Protobuf::ProductModel::Package* unsafe_arena_release_package();

  // optional .Odb.Lib.Protobuf.ProductModel.Part part = 6;
  bool has_part() const;
  private:
  bool _internal_has_part() const;
  public:
  void clear_part();
  const ::Odb::Lib::Protobuf::ProductModel::Part& part() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::ProductModel::Part* release_part();
  ::Odb::Lib::Protobuf::ProductModel::Part* mutable_part();
  void set_allocated_part(::Odb::Lib::Protobuf::ProductModel::Part* part);
  private:
  const ::Odb::Lib::Protobuf::ProductModel::Part& _internal_part() const;
  ::Odb::Lib::Protobuf::ProductModel::Part* _internal_mutable_part();
  public:
  void unsafe_arena_set_allocated_part(
      ::Odb::Lib::Protobuf::ProductModel::Part* part);
  ::Odb::Lib::Protobuf::ProductModel::Part* unsafe_arena_release_part();

  // optional uint32 index = 4;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // optional .Odb.Lib.Protobuf.BoardSide side = 5;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  ::Odb::Lib::Protobuf::BoardSide side() const;
  void set_side(::Odb::Lib::Protobuf::BoardSide value);
  private:
  ::Odb::Lib::Protobuf::BoardSide _internal_side() const;
  void _internal_set_side(::Odb::Lib::Protobuf::BoardSide value);
  public:

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.ProductModel.Component)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refdes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partname_;
    ::Odb::Lib::Protobuf::ProductModel::Package* package_;
    ::Odb::Lib::Protobuf::ProductModel::Part* part_;
    uint32_t index_;
    int side_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Component

// optional string refDes = 1;
inline bool Component::_internal_has_refdes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Component::has_refdes() const {
  return _internal_has_refdes();
}
inline void Component::clear_refdes() {
  _impl_.refdes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Component::refdes() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ProductModel.Component.refDes)
  return _internal_refdes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_refdes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.refdes_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ProductModel.Component.refDes)
}
inline std::string* Component::mutable_refdes() {
  std::string* _s = _internal_mutable_refdes();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ProductModel.Component.refDes)
  return _s;
}
inline const std::string& Component::_internal_refdes() const {
  return _impl_.refdes_.Get();
}
inline void Component::_internal_set_refdes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.refdes_.Set(value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_refdes() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.refdes_.Mutable(GetArenaForAllocation());
}
inline std::string* Component::release_refdes() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ProductModel.Component.refDes)
  if (!_internal_has_refdes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.refdes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.refdes_.IsDefault()) {
    _impl_.refdes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Component::set_allocated_refdes(std::string* refdes) {
  if (refdes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.refdes_.SetAllocated(refdes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.refdes_.IsDefault()) {
    _impl_.refdes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ProductModel.Component.refDes)
}

// optional string partName = 2;
inline bool Component::_internal_has_partname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Component::has_partname() const {
  return _internal_has_partname();
}
inline void Component::clear_partname() {
  _impl_.partname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Component::partname() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ProductModel.Component.partName)
  return _internal_partname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Component::set_partname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.partname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ProductModel.Component.partName)
}
inline std::string* Component::mutable_partname() {
  std::string* _s = _internal_mutable_partname();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ProductModel.Component.partName)
  return _s;
}
inline const std::string& Component::_internal_partname() const {
  return _impl_.partname_.Get();
}
inline void Component::_internal_set_partname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.partname_.Set(value, GetArenaForAllocation());
}
inline std::string* Component::_internal_mutable_partname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.partname_.Mutable(GetArenaForAllocation());
}
inline std::string* Component::release_partname() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ProductModel.Component.partName)
  if (!_internal_has_partname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.partname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partname_.IsDefault()) {
    _impl_.partname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Component::set_allocated_partname(std::string* partname) {
  if (partname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.partname_.SetAllocated(partname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partname_.IsDefault()) {
    _impl_.partname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ProductModel.Component.partName)
}

// optional .Odb.Lib.Protobuf.ProductModel.Package package = 3;
inline bool Component::_internal_has_package() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.package_ != nullptr);
  return value;
}
inline bool Component::has_package() const {
  return _internal_has_package();
}
inline const ::Odb::Lib::Protobuf::ProductModel::Package& Component::_internal_package() const {
  const ::Odb::Lib::Protobuf::ProductModel::Package* p = _impl_.package_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::ProductModel::Package&>(
      ::Odb::Lib::Protobuf::ProductModel::_Package_default_instance_);
}
inline const ::Odb::Lib::Protobuf::ProductModel::Package& Component::package() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ProductModel.Component.package)
  return _internal_package();
}
inline void Component::unsafe_arena_set_allocated_package(
    ::Odb::Lib::Protobuf::ProductModel::Package* package) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.package_);
  }
  _impl_.package_ = package;
  if (package) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.ProductModel.Component.package)
}
inline ::Odb::Lib::Protobuf::ProductModel::Package* Component::release_package() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Odb::Lib::Protobuf::ProductModel::Package* temp = _impl_.package_;
  _impl_.package_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::ProductModel::Package* Component::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ProductModel.Component.package)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Odb::Lib::Protobuf::ProductModel::Package* temp = _impl_.package_;
  _impl_.package_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::ProductModel::Package* Component::_internal_mutable_package() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.package_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::ProductModel::Package>(GetArenaForAllocation());
    _impl_.package_ = p;
  }
  return _impl_.package_;
}
inline ::Odb::Lib::Protobuf::ProductModel::Package* Component::mutable_package() {
  ::Odb::Lib::Protobuf::ProductModel::Package* _msg = _internal_mutable_package();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ProductModel.Component.package)
  return _msg;
}
inline void Component::set_allocated_package(::Odb::Lib::Protobuf::ProductModel::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.package_);
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package));
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.package_ = package;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ProductModel.Component.package)
}

// optional uint32 index = 4;
inline bool Component::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Component::has_index() const {
  return _internal_has_index();
}
inline void Component::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Component::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t Component::index() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ProductModel.Component.index)
  return _internal_index();
}
inline void Component::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.index_ = value;
}
inline void Component::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ProductModel.Component.index)
}

// optional .Odb.Lib.Protobuf.BoardSide side = 5;
inline bool Component::_internal_has_side() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Component::has_side() const {
  return _internal_has_side();
}
inline void Component::clear_side() {
  _impl_.side_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::Odb::Lib::Protobuf::BoardSide Component::_internal_side() const {
  return static_cast< ::Odb::Lib::Protobuf::BoardSide >(_impl_.side_);
}
inline ::Odb::Lib::Protobuf::BoardSide Component::side() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ProductModel.Component.side)
  return _internal_side();
}
inline void Component::_internal_set_side(::Odb::Lib::Protobuf::BoardSide value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.side_ = value;
}
inline void Component::set_side(::Odb::Lib::Protobuf::BoardSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ProductModel.Component.side)
}

// optional .Odb.Lib.Protobuf.ProductModel.Part part = 6;
inline bool Component::_internal_has_part() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.part_ != nullptr);
  return value;
}
inline bool Component::has_part() const {
  return _internal_has_part();
}
inline const ::Odb::Lib::Protobuf::ProductModel::Part& Component::_internal_part() const {
  const ::Odb::Lib::Protobuf::ProductModel::Part* p = _impl_.part_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::ProductModel::Part&>(
      ::Odb::Lib::Protobuf::ProductModel::_Part_default_instance_);
}
inline const ::Odb::Lib::Protobuf::ProductModel::Part& Component::part() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ProductModel.Component.part)
  return _internal_part();
}
inline void Component::unsafe_arena_set_allocated_part(
    ::Odb::Lib::Protobuf::ProductModel::Part* part) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.part_);
  }
  _impl_.part_ = part;
  if (part) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.ProductModel.Component.part)
}
inline ::Odb::Lib::Protobuf::ProductModel::Part* Component::release_part() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Odb::Lib::Protobuf::ProductModel::Part* temp = _impl_.part_;
  _impl_.part_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::ProductModel::Part* Component::unsafe_arena_release_part() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ProductModel.Component.part)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Odb::Lib::Protobuf::ProductModel::Part* temp = _impl_.part_;
  _impl_.part_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::ProductModel::Part* Component::_internal_mutable_part() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.part_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::ProductModel::Part>(GetArenaForAllocation());
    _impl_.part_ = p;
  }
  return _impl_.part_;
}
inline ::Odb::Lib::Protobuf::ProductModel::Part* Component::mutable_part() {
  ::Odb::Lib::Protobuf::ProductModel::Part* _msg = _internal_mutable_part();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ProductModel.Component.part)
  return _msg;
}
inline void Component::set_allocated_part(::Odb::Lib::Protobuf::ProductModel::Part* part) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.part_);
  }
  if (part) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(part));
    if (message_arena != submessage_arena) {
      part = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, part, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.part_ = part;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ProductModel.Component.part)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProductModel
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2eproto
