// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: miscinfofile.proto
// Protobuf C++ Version: 5.29.2

#ifndef miscinfofile_2eproto_2epb_2eh
#define miscinfofile_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_miscinfofile_2eproto ODBDESIGN_EXPORT

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_miscinfofile_2eproto {
  static const ::uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_miscinfofile_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class MiscInfoFile;
struct MiscInfoFileDefaultTypeInternal;
ODBDESIGN_EXPORT extern MiscInfoFileDefaultTypeInternal _MiscInfoFile_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================


// -------------------------------------------------------------------

class ODBDESIGN_EXPORT MiscInfoFile final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.MiscInfoFile) */ {
 public:
  inline MiscInfoFile() : MiscInfoFile(nullptr) {}
  ~MiscInfoFile() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MiscInfoFile* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MiscInfoFile));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MiscInfoFile(
      ::google::protobuf::internal::ConstantInitialized);

  inline MiscInfoFile(const MiscInfoFile& from) : MiscInfoFile(nullptr, from) {}
  inline MiscInfoFile(MiscInfoFile&& from) noexcept
      : MiscInfoFile(nullptr, std::move(from)) {}
  inline MiscInfoFile& operator=(const MiscInfoFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline MiscInfoFile& operator=(MiscInfoFile&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MiscInfoFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const MiscInfoFile* internal_default_instance() {
    return reinterpret_cast<const MiscInfoFile*>(
        &_MiscInfoFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MiscInfoFile& a, MiscInfoFile& b) { a.Swap(&b); }
  inline void Swap(MiscInfoFile* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MiscInfoFile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MiscInfoFile* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MiscInfoFile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MiscInfoFile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MiscInfoFile& from) { MiscInfoFile::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MiscInfoFile* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Odb.Lib.Protobuf.MiscInfoFile"; }

 protected:
  explicit MiscInfoFile(::google::protobuf::Arena* arena);
  MiscInfoFile(::google::protobuf::Arena* arena, const MiscInfoFile& from);
  MiscInfoFile(::google::protobuf::Arena* arena, MiscInfoFile&& from) noexcept
      : MiscInfoFile(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kProductModelNameFieldNumber = 1,
    kJobNameFieldNumber = 2,
    kOdbVersionMajorFieldNumber = 3,
    kOdbVersionMinorFieldNumber = 4,
    kOdbSourceFieldNumber = 5,
    kSaveAppFieldNumber = 8,
    kSaveUserFieldNumber = 9,
    kUnitsFieldNumber = 10,
    kCreationDateDateFieldNumber = 6,
    kSaveDateFieldNumber = 7,
    kMaxUniqueIdFieldNumber = 11,
  };
  // optional string productModelName = 1;
  bool has_productmodelname() const;
  void clear_productmodelname() ;
  const std::string& productmodelname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_productmodelname(Arg_&& arg, Args_... args);
  std::string* mutable_productmodelname();
  PROTOBUF_NODISCARD std::string* release_productmodelname();
  void set_allocated_productmodelname(std::string* value);

  private:
  const std::string& _internal_productmodelname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_productmodelname(
      const std::string& value);
  std::string* _internal_mutable_productmodelname();

  public:
  // optional string jobName = 2;
  bool has_jobname() const;
  void clear_jobname() ;
  const std::string& jobname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_jobname(Arg_&& arg, Args_... args);
  std::string* mutable_jobname();
  PROTOBUF_NODISCARD std::string* release_jobname();
  void set_allocated_jobname(std::string* value);

  private:
  const std::string& _internal_jobname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jobname(
      const std::string& value);
  std::string* _internal_mutable_jobname();

  public:
  // optional string odbVersionMajor = 3;
  bool has_odbversionmajor() const;
  void clear_odbversionmajor() ;
  const std::string& odbversionmajor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_odbversionmajor(Arg_&& arg, Args_... args);
  std::string* mutable_odbversionmajor();
  PROTOBUF_NODISCARD std::string* release_odbversionmajor();
  void set_allocated_odbversionmajor(std::string* value);

  private:
  const std::string& _internal_odbversionmajor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_odbversionmajor(
      const std::string& value);
  std::string* _internal_mutable_odbversionmajor();

  public:
  // optional string odbVersionMinor = 4;
  bool has_odbversionminor() const;
  void clear_odbversionminor() ;
  const std::string& odbversionminor() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_odbversionminor(Arg_&& arg, Args_... args);
  std::string* mutable_odbversionminor();
  PROTOBUF_NODISCARD std::string* release_odbversionminor();
  void set_allocated_odbversionminor(std::string* value);

  private:
  const std::string& _internal_odbversionminor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_odbversionminor(
      const std::string& value);
  std::string* _internal_mutable_odbversionminor();

  public:
  // optional string odbSource = 5;
  bool has_odbsource() const;
  void clear_odbsource() ;
  const std::string& odbsource() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_odbsource(Arg_&& arg, Args_... args);
  std::string* mutable_odbsource();
  PROTOBUF_NODISCARD std::string* release_odbsource();
  void set_allocated_odbsource(std::string* value);

  private:
  const std::string& _internal_odbsource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_odbsource(
      const std::string& value);
  std::string* _internal_mutable_odbsource();

  public:
  // optional string saveApp = 8;
  bool has_saveapp() const;
  void clear_saveapp() ;
  const std::string& saveapp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_saveapp(Arg_&& arg, Args_... args);
  std::string* mutable_saveapp();
  PROTOBUF_NODISCARD std::string* release_saveapp();
  void set_allocated_saveapp(std::string* value);

  private:
  const std::string& _internal_saveapp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_saveapp(
      const std::string& value);
  std::string* _internal_mutable_saveapp();

  public:
  // optional string saveUser = 9;
  bool has_saveuser() const;
  void clear_saveuser() ;
  const std::string& saveuser() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_saveuser(Arg_&& arg, Args_... args);
  std::string* mutable_saveuser();
  PROTOBUF_NODISCARD std::string* release_saveuser();
  void set_allocated_saveuser(std::string* value);

  private:
  const std::string& _internal_saveuser() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_saveuser(
      const std::string& value);
  std::string* _internal_mutable_saveuser();

  public:
  // optional string units = 10;
  bool has_units() const;
  void clear_units() ;
  const std::string& units() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_units(Arg_&& arg, Args_... args);
  std::string* mutable_units();
  PROTOBUF_NODISCARD std::string* release_units();
  void set_allocated_units(std::string* value);

  private:
  const std::string& _internal_units() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_units(
      const std::string& value);
  std::string* _internal_mutable_units();

  public:
  // optional .google.protobuf.Timestamp creationDateDate = 6;
  bool has_creationdatedate() const;
  void clear_creationdatedate() ;
  const ::google::protobuf::Timestamp& creationdatedate() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_creationdatedate();
  ::google::protobuf::Timestamp* mutable_creationdatedate();
  void set_allocated_creationdatedate(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_creationdatedate(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_creationdatedate();

  private:
  const ::google::protobuf::Timestamp& _internal_creationdatedate() const;
  ::google::protobuf::Timestamp* _internal_mutable_creationdatedate();

  public:
  // optional .google.protobuf.Timestamp saveDate = 7;
  bool has_savedate() const;
  void clear_savedate() ;
  const ::google::protobuf::Timestamp& savedate() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_savedate();
  ::google::protobuf::Timestamp* mutable_savedate();
  void set_allocated_savedate(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_savedate(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_savedate();

  private:
  const ::google::protobuf::Timestamp& _internal_savedate() const;
  ::google::protobuf::Timestamp* _internal_mutable_savedate();

  public:
  // optional uint32 maxUniqueId = 11;
  bool has_maxuniqueid() const;
  void clear_maxuniqueid() ;
  ::uint32_t maxuniqueid() const;
  void set_maxuniqueid(::uint32_t value);

  private:
  ::uint32_t _internal_maxuniqueid() const;
  void _internal_set_maxuniqueid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.MiscInfoFile)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 2,
      128, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MiscInfoFile& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr productmodelname_;
    ::google::protobuf::internal::ArenaStringPtr jobname_;
    ::google::protobuf::internal::ArenaStringPtr odbversionmajor_;
    ::google::protobuf::internal::ArenaStringPtr odbversionminor_;
    ::google::protobuf::internal::ArenaStringPtr odbsource_;
    ::google::protobuf::internal::ArenaStringPtr saveapp_;
    ::google::protobuf::internal::ArenaStringPtr saveuser_;
    ::google::protobuf::internal::ArenaStringPtr units_;
    ::google::protobuf::Timestamp* creationdatedate_;
    ::google::protobuf::Timestamp* savedate_;
    ::uint32_t maxuniqueid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_miscinfofile_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MiscInfoFile

// optional string productModelName = 1;
inline bool MiscInfoFile::has_productmodelname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MiscInfoFile::clear_productmodelname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.productmodelname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MiscInfoFile::productmodelname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.productModelName)
  return _internal_productmodelname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiscInfoFile::set_productmodelname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.productmodelname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.MiscInfoFile.productModelName)
}
inline std::string* MiscInfoFile::mutable_productmodelname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_productmodelname();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.MiscInfoFile.productModelName)
  return _s;
}
inline const std::string& MiscInfoFile::_internal_productmodelname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.productmodelname_.Get();
}
inline void MiscInfoFile::_internal_set_productmodelname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.productmodelname_.Set(value, GetArena());
}
inline std::string* MiscInfoFile::_internal_mutable_productmodelname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.productmodelname_.Mutable( GetArena());
}
inline std::string* MiscInfoFile::release_productmodelname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.MiscInfoFile.productModelName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.productmodelname_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.productmodelname_.Set("", GetArena());
  }
  return released;
}
inline void MiscInfoFile::set_allocated_productmodelname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.productmodelname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.productmodelname_.IsDefault()) {
    _impl_.productmodelname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.productModelName)
}

// optional string jobName = 2;
inline bool MiscInfoFile::has_jobname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MiscInfoFile::clear_jobname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.jobname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MiscInfoFile::jobname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.jobName)
  return _internal_jobname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiscInfoFile::set_jobname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.jobname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.MiscInfoFile.jobName)
}
inline std::string* MiscInfoFile::mutable_jobname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_jobname();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.MiscInfoFile.jobName)
  return _s;
}
inline const std::string& MiscInfoFile::_internal_jobname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.jobname_.Get();
}
inline void MiscInfoFile::_internal_set_jobname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.jobname_.Set(value, GetArena());
}
inline std::string* MiscInfoFile::_internal_mutable_jobname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.jobname_.Mutable( GetArena());
}
inline std::string* MiscInfoFile::release_jobname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.MiscInfoFile.jobName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.jobname_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.jobname_.Set("", GetArena());
  }
  return released;
}
inline void MiscInfoFile::set_allocated_jobname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.jobname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.jobname_.IsDefault()) {
    _impl_.jobname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.jobName)
}

// optional string odbVersionMajor = 3;
inline bool MiscInfoFile::has_odbversionmajor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MiscInfoFile::clear_odbversionmajor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.odbversionmajor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MiscInfoFile::odbversionmajor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.odbVersionMajor)
  return _internal_odbversionmajor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiscInfoFile::set_odbversionmajor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.odbversionmajor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.MiscInfoFile.odbVersionMajor)
}
inline std::string* MiscInfoFile::mutable_odbversionmajor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_odbversionmajor();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.MiscInfoFile.odbVersionMajor)
  return _s;
}
inline const std::string& MiscInfoFile::_internal_odbversionmajor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.odbversionmajor_.Get();
}
inline void MiscInfoFile::_internal_set_odbversionmajor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.odbversionmajor_.Set(value, GetArena());
}
inline std::string* MiscInfoFile::_internal_mutable_odbversionmajor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.odbversionmajor_.Mutable( GetArena());
}
inline std::string* MiscInfoFile::release_odbversionmajor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.MiscInfoFile.odbVersionMajor)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.odbversionmajor_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.odbversionmajor_.Set("", GetArena());
  }
  return released;
}
inline void MiscInfoFile::set_allocated_odbversionmajor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.odbversionmajor_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.odbversionmajor_.IsDefault()) {
    _impl_.odbversionmajor_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.odbVersionMajor)
}

// optional string odbVersionMinor = 4;
inline bool MiscInfoFile::has_odbversionminor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void MiscInfoFile::clear_odbversionminor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.odbversionminor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& MiscInfoFile::odbversionminor() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.odbVersionMinor)
  return _internal_odbversionminor();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiscInfoFile::set_odbversionminor(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.odbversionminor_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.MiscInfoFile.odbVersionMinor)
}
inline std::string* MiscInfoFile::mutable_odbversionminor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_odbversionminor();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.MiscInfoFile.odbVersionMinor)
  return _s;
}
inline const std::string& MiscInfoFile::_internal_odbversionminor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.odbversionminor_.Get();
}
inline void MiscInfoFile::_internal_set_odbversionminor(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.odbversionminor_.Set(value, GetArena());
}
inline std::string* MiscInfoFile::_internal_mutable_odbversionminor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.odbversionminor_.Mutable( GetArena());
}
inline std::string* MiscInfoFile::release_odbversionminor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.MiscInfoFile.odbVersionMinor)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.odbversionminor_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.odbversionminor_.Set("", GetArena());
  }
  return released;
}
inline void MiscInfoFile::set_allocated_odbversionminor(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.odbversionminor_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.odbversionminor_.IsDefault()) {
    _impl_.odbversionminor_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.odbVersionMinor)
}

// optional string odbSource = 5;
inline bool MiscInfoFile::has_odbsource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void MiscInfoFile::clear_odbsource() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.odbsource_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& MiscInfoFile::odbsource() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.odbSource)
  return _internal_odbsource();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiscInfoFile::set_odbsource(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.odbsource_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.MiscInfoFile.odbSource)
}
inline std::string* MiscInfoFile::mutable_odbsource() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_odbsource();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.MiscInfoFile.odbSource)
  return _s;
}
inline const std::string& MiscInfoFile::_internal_odbsource() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.odbsource_.Get();
}
inline void MiscInfoFile::_internal_set_odbsource(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.odbsource_.Set(value, GetArena());
}
inline std::string* MiscInfoFile::_internal_mutable_odbsource() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.odbsource_.Mutable( GetArena());
}
inline std::string* MiscInfoFile::release_odbsource() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.MiscInfoFile.odbSource)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.odbsource_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.odbsource_.Set("", GetArena());
  }
  return released;
}
inline void MiscInfoFile::set_allocated_odbsource(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.odbsource_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.odbsource_.IsDefault()) {
    _impl_.odbsource_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.odbSource)
}

// optional .google.protobuf.Timestamp creationDateDate = 6;
inline bool MiscInfoFile::has_creationdatedate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.creationdatedate_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& MiscInfoFile::_internal_creationdatedate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.creationdatedate_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& MiscInfoFile::creationdatedate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.creationDateDate)
  return _internal_creationdatedate();
}
inline void MiscInfoFile::unsafe_arena_set_allocated_creationdatedate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.creationdatedate_);
  }
  _impl_.creationdatedate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.creationDateDate)
}
inline ::google::protobuf::Timestamp* MiscInfoFile::release_creationdatedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::Timestamp* released = _impl_.creationdatedate_;
  _impl_.creationdatedate_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* MiscInfoFile::unsafe_arena_release_creationdatedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.MiscInfoFile.creationDateDate)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::google::protobuf::Timestamp* temp = _impl_.creationdatedate_;
  _impl_.creationdatedate_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* MiscInfoFile::_internal_mutable_creationdatedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.creationdatedate_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.creationdatedate_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.creationdatedate_;
}
inline ::google::protobuf::Timestamp* MiscInfoFile::mutable_creationdatedate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_creationdatedate();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.MiscInfoFile.creationDateDate)
  return _msg;
}
inline void MiscInfoFile::set_allocated_creationdatedate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.creationdatedate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.creationdatedate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.creationDateDate)
}

// optional .google.protobuf.Timestamp saveDate = 7;
inline bool MiscInfoFile::has_savedate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.savedate_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& MiscInfoFile::_internal_savedate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.savedate_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& MiscInfoFile::savedate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.saveDate)
  return _internal_savedate();
}
inline void MiscInfoFile::unsafe_arena_set_allocated_savedate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.savedate_);
  }
  _impl_.savedate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.saveDate)
}
inline ::google::protobuf::Timestamp* MiscInfoFile::release_savedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* released = _impl_.savedate_;
  _impl_.savedate_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* MiscInfoFile::unsafe_arena_release_savedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.MiscInfoFile.saveDate)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::google::protobuf::Timestamp* temp = _impl_.savedate_;
  _impl_.savedate_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* MiscInfoFile::_internal_mutable_savedate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.savedate_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.savedate_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.savedate_;
}
inline ::google::protobuf::Timestamp* MiscInfoFile::mutable_savedate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_savedate();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.MiscInfoFile.saveDate)
  return _msg;
}
inline void MiscInfoFile::set_allocated_savedate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.savedate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.savedate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.saveDate)
}

// optional string saveApp = 8;
inline bool MiscInfoFile::has_saveapp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void MiscInfoFile::clear_saveapp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saveapp_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& MiscInfoFile::saveapp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.saveApp)
  return _internal_saveapp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiscInfoFile::set_saveapp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.saveapp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.MiscInfoFile.saveApp)
}
inline std::string* MiscInfoFile::mutable_saveapp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_saveapp();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.MiscInfoFile.saveApp)
  return _s;
}
inline const std::string& MiscInfoFile::_internal_saveapp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.saveapp_.Get();
}
inline void MiscInfoFile::_internal_set_saveapp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.saveapp_.Set(value, GetArena());
}
inline std::string* MiscInfoFile::_internal_mutable_saveapp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.saveapp_.Mutable( GetArena());
}
inline std::string* MiscInfoFile::release_saveapp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.MiscInfoFile.saveApp)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.saveapp_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.saveapp_.Set("", GetArena());
  }
  return released;
}
inline void MiscInfoFile::set_allocated_saveapp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.saveapp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.saveapp_.IsDefault()) {
    _impl_.saveapp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.saveApp)
}

// optional string saveUser = 9;
inline bool MiscInfoFile::has_saveuser() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void MiscInfoFile::clear_saveuser() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.saveuser_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& MiscInfoFile::saveuser() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.saveUser)
  return _internal_saveuser();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiscInfoFile::set_saveuser(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.saveuser_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.MiscInfoFile.saveUser)
}
inline std::string* MiscInfoFile::mutable_saveuser() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_saveuser();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.MiscInfoFile.saveUser)
  return _s;
}
inline const std::string& MiscInfoFile::_internal_saveuser() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.saveuser_.Get();
}
inline void MiscInfoFile::_internal_set_saveuser(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.saveuser_.Set(value, GetArena());
}
inline std::string* MiscInfoFile::_internal_mutable_saveuser() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.saveuser_.Mutable( GetArena());
}
inline std::string* MiscInfoFile::release_saveuser() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.MiscInfoFile.saveUser)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.saveuser_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.saveuser_.Set("", GetArena());
  }
  return released;
}
inline void MiscInfoFile::set_allocated_saveuser(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.saveuser_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.saveuser_.IsDefault()) {
    _impl_.saveuser_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.saveUser)
}

// optional string units = 10;
inline bool MiscInfoFile::has_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void MiscInfoFile::clear_units() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.units_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& MiscInfoFile::units() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.units)
  return _internal_units();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MiscInfoFile::set_units(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.units_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.MiscInfoFile.units)
}
inline std::string* MiscInfoFile::mutable_units() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_units();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.MiscInfoFile.units)
  return _s;
}
inline const std::string& MiscInfoFile::_internal_units() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.units_.Get();
}
inline void MiscInfoFile::_internal_set_units(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.units_.Set(value, GetArena());
}
inline std::string* MiscInfoFile::_internal_mutable_units() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.units_.Mutable( GetArena());
}
inline std::string* MiscInfoFile::release_units() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.MiscInfoFile.units)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.units_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.units_.Set("", GetArena());
  }
  return released;
}
inline void MiscInfoFile::set_allocated_units(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.units_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.MiscInfoFile.units)
}

// optional uint32 maxUniqueId = 11;
inline bool MiscInfoFile::has_maxuniqueid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void MiscInfoFile::clear_maxuniqueid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxuniqueid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::uint32_t MiscInfoFile::maxuniqueid() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.MiscInfoFile.maxUniqueId)
  return _internal_maxuniqueid();
}
inline void MiscInfoFile::set_maxuniqueid(::uint32_t value) {
  _internal_set_maxuniqueid(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.MiscInfoFile.maxUniqueId)
}
inline ::uint32_t MiscInfoFile::_internal_maxuniqueid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxuniqueid_;
}
inline void MiscInfoFile::_internal_set_maxuniqueid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxuniqueid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // miscinfofile_2eproto_2epb_2eh
