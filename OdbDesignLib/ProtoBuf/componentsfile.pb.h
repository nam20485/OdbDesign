// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: componentsfile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_componentsfile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_componentsfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_componentsfile_2eproto ODBDESIGN_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_componentsfile_2eproto {
  static const uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_componentsfile_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class ComponentsFile;
struct ComponentsFileDefaultTypeInternal;
ODBDESIGN_EXPORT extern ComponentsFileDefaultTypeInternal _ComponentsFile_default_instance_;
class ComponentsFile_BomDescriptionRecord;
struct ComponentsFile_BomDescriptionRecordDefaultTypeInternal;
ODBDESIGN_EXPORT extern ComponentsFile_BomDescriptionRecordDefaultTypeInternal _ComponentsFile_BomDescriptionRecord_default_instance_;
class ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse;
struct ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUseDefaultTypeInternal _ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse_default_instance_;
class ComponentsFile_ComponentRecord;
struct ComponentsFile_ComponentRecordDefaultTypeInternal;
ODBDESIGN_EXPORT extern ComponentsFile_ComponentRecordDefaultTypeInternal _ComponentsFile_ComponentRecord_default_instance_;
class ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse;
struct ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUseDefaultTypeInternal _ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse_default_instance_;
class ComponentsFile_ComponentRecord_ToeprintRecord;
struct ComponentsFile_ComponentRecord_ToeprintRecordDefaultTypeInternal;
ODBDESIGN_EXPORT extern ComponentsFile_ComponentRecord_ToeprintRecordDefaultTypeInternal _ComponentsFile_ComponentRecord_ToeprintRecord_default_instance_;
class ComponentsFile_ComponentRecordsByNameEntry_DoNotUse;
struct ComponentsFile_ComponentRecordsByNameEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern ComponentsFile_ComponentRecordsByNameEntry_DoNotUseDefaultTypeInternal _ComponentsFile_ComponentRecordsByNameEntry_DoNotUse_default_instance_;
class ComponentsFile_PropertyRecordsByNameEntry_DoNotUse;
struct ComponentsFile_PropertyRecordsByNameEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern ComponentsFile_PropertyRecordsByNameEntry_DoNotUseDefaultTypeInternal _ComponentsFile_PropertyRecordsByNameEntry_DoNotUse_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ComponentsFile* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ComponentsFile>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ComponentsFile_ComponentRecordsByNameEntry_DoNotUse>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ComponentsFile_PropertyRecordsByNameEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================

class ODBDESIGN_EXPORT ComponentsFile_ComponentRecord_ToeprintRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord) */ {
 public:
  inline ComponentsFile_ComponentRecord_ToeprintRecord() : ComponentsFile_ComponentRecord_ToeprintRecord(nullptr) {}
  ~ComponentsFile_ComponentRecord_ToeprintRecord() override;
  explicit PROTOBUF_CONSTEXPR ComponentsFile_ComponentRecord_ToeprintRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentsFile_ComponentRecord_ToeprintRecord(const ComponentsFile_ComponentRecord_ToeprintRecord& from);
  ComponentsFile_ComponentRecord_ToeprintRecord(ComponentsFile_ComponentRecord_ToeprintRecord&& from) noexcept
    : ComponentsFile_ComponentRecord_ToeprintRecord() {
    *this = ::std::move(from);
  }

  inline ComponentsFile_ComponentRecord_ToeprintRecord& operator=(const ComponentsFile_ComponentRecord_ToeprintRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentsFile_ComponentRecord_ToeprintRecord& operator=(ComponentsFile_ComponentRecord_ToeprintRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentsFile_ComponentRecord_ToeprintRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentsFile_ComponentRecord_ToeprintRecord* internal_default_instance() {
    return reinterpret_cast<const ComponentsFile_ComponentRecord_ToeprintRecord*>(
               &_ComponentsFile_ComponentRecord_ToeprintRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComponentsFile_ComponentRecord_ToeprintRecord& a, ComponentsFile_ComponentRecord_ToeprintRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentsFile_ComponentRecord_ToeprintRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentsFile_ComponentRecord_ToeprintRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentsFile_ComponentRecord_ToeprintRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentsFile_ComponentRecord_ToeprintRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentsFile_ComponentRecord_ToeprintRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentsFile_ComponentRecord_ToeprintRecord& from) {
    ComponentsFile_ComponentRecord_ToeprintRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentsFile_ComponentRecord_ToeprintRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord";
  }
  protected:
  explicit ComponentsFile_ComponentRecord_ToeprintRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 8,
    kPinNumberFieldNumber = 1,
    kLocationXFieldNumber = 2,
    kLocationYFieldNumber = 3,
    kRotationFieldNumber = 4,
    kMirrorFieldNumber = 5,
    kNetNumberFieldNumber = 6,
    kSubnetNumberFieldNumber = 7,
  };
  // optional string name = 8;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 pinNumber = 1;
  bool has_pinnumber() const;
  private:
  bool _internal_has_pinnumber() const;
  public:
  void clear_pinnumber();
  uint32_t pinnumber() const;
  void set_pinnumber(uint32_t value);
  private:
  uint32_t _internal_pinnumber() const;
  void _internal_set_pinnumber(uint32_t value);
  public:

  // optional float locationX = 2;
  bool has_locationx() const;
  private:
  bool _internal_has_locationx() const;
  public:
  void clear_locationx();
  float locationx() const;
  void set_locationx(float value);
  private:
  float _internal_locationx() const;
  void _internal_set_locationx(float value);
  public:

  // optional float locationY = 3;
  bool has_locationy() const;
  private:
  bool _internal_has_locationy() const;
  public:
  void clear_locationy();
  float locationy() const;
  void set_locationy(float value);
  private:
  float _internal_locationy() const;
  void _internal_set_locationy(float value);
  public:

  // optional float rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // optional bool mirror = 5;
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional uint32 netNumber = 6;
  bool has_netnumber() const;
  private:
  bool _internal_has_netnumber() const;
  public:
  void clear_netnumber();
  uint32_t netnumber() const;
  void set_netnumber(uint32_t value);
  private:
  uint32_t _internal_netnumber() const;
  void _internal_set_netnumber(uint32_t value);
  public:

  // optional uint32 subnetNumber = 7;
  bool has_subnetnumber() const;
  private:
  bool _internal_has_subnetnumber() const;
  public:
  void clear_subnetnumber();
  uint32_t subnetnumber() const;
  void set_subnetnumber(uint32_t value);
  private:
  uint32_t _internal_subnetnumber() const;
  void _internal_set_subnetnumber(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t pinnumber_;
    float locationx_;
    float locationy_;
    float rotation_;
    bool mirror_;
    uint32_t netnumber_;
    uint32_t subnetnumber_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_componentsfile_2eproto;
};
// -------------------------------------------------------------------

class ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse& other);
  static const ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse*>(&_ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.AttributeLookupTableEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.AttributeLookupTableEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_componentsfile_2eproto;
};

// -------------------------------------------------------------------

class ODBDESIGN_EXPORT ComponentsFile_ComponentRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord) */ {
 public:
  inline ComponentsFile_ComponentRecord() : ComponentsFile_ComponentRecord(nullptr) {}
  ~ComponentsFile_ComponentRecord() override;
  explicit PROTOBUF_CONSTEXPR ComponentsFile_ComponentRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentsFile_ComponentRecord(const ComponentsFile_ComponentRecord& from);
  ComponentsFile_ComponentRecord(ComponentsFile_ComponentRecord&& from) noexcept
    : ComponentsFile_ComponentRecord() {
    *this = ::std::move(from);
  }

  inline ComponentsFile_ComponentRecord& operator=(const ComponentsFile_ComponentRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentsFile_ComponentRecord& operator=(ComponentsFile_ComponentRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentsFile_ComponentRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentsFile_ComponentRecord* internal_default_instance() {
    return reinterpret_cast<const ComponentsFile_ComponentRecord*>(
               &_ComponentsFile_ComponentRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ComponentsFile_ComponentRecord& a, ComponentsFile_ComponentRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentsFile_ComponentRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentsFile_ComponentRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentsFile_ComponentRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentsFile_ComponentRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentsFile_ComponentRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentsFile_ComponentRecord& from) {
    ComponentsFile_ComponentRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentsFile_ComponentRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.ComponentsFile.ComponentRecord";
  }
  protected:
  explicit ComponentsFile_ComponentRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComponentsFile_ComponentRecord_ToeprintRecord ToeprintRecord;

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyRecordsFieldNumber = 11,
    kToeprintRecordsFieldNumber = 12,
    kAttributeLookupTableFieldNumber = 13,
    kCompNameFieldNumber = 6,
    kPartNameFieldNumber = 7,
    kAttributesFieldNumber = 8,
    kPkgRefFieldNumber = 1,
    kLocationXFieldNumber = 2,
    kLocationYFieldNumber = 3,
    kRotationFieldNumber = 4,
    kMirrorFieldNumber = 5,
    kIdFieldNumber = 9,
    kIndexFieldNumber = 10,
  };
  // repeated .Odb.Lib.Protobuf.PropertyRecord propertyRecords = 11;
  int propertyrecords_size() const;
  private:
  int _internal_propertyrecords_size() const;
  public:
  void clear_propertyrecords();
  ::Odb::Lib::Protobuf::PropertyRecord* mutable_propertyrecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::PropertyRecord >*
      mutable_propertyrecords();
  private:
  const ::Odb::Lib::Protobuf::PropertyRecord& _internal_propertyrecords(int index) const;
  ::Odb::Lib::Protobuf::PropertyRecord* _internal_add_propertyrecords();
  public:
  const ::Odb::Lib::Protobuf::PropertyRecord& propertyrecords(int index) const;
  ::Odb::Lib::Protobuf::PropertyRecord* add_propertyrecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::PropertyRecord >&
      propertyrecords() const;

  // repeated .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord toeprintRecords = 12;
  int toeprintrecords_size() const;
  private:
  int _internal_toeprintrecords_size() const;
  public:
  void clear_toeprintrecords();
  ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord* mutable_toeprintrecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord >*
      mutable_toeprintrecords();
  private:
  const ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord& _internal_toeprintrecords(int index) const;
  ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord* _internal_add_toeprintrecords();
  public:
  const ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord& toeprintrecords(int index) const;
  ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord* add_toeprintrecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord >&
      toeprintrecords() const;

  // map<string, string> attributeLookupTable = 13;
  int attributelookuptable_size() const;
  private:
  int _internal_attributelookuptable_size() const;
  public:
  void clear_attributelookuptable();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_attributelookuptable() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_attributelookuptable();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributelookuptable() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributelookuptable();

  // optional string compName = 6;
  bool has_compname() const;
  private:
  bool _internal_has_compname() const;
  public:
  void clear_compname();
  const std::string& compname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compname();
  PROTOBUF_NODISCARD std::string* release_compname();
  void set_allocated_compname(std::string* compname);
  private:
  const std::string& _internal_compname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compname(const std::string& value);
  std::string* _internal_mutable_compname();
  public:

  // optional string partName = 7;
  bool has_partname() const;
  private:
  bool _internal_has_partname() const;
  public:
  void clear_partname();
  const std::string& partname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partname();
  PROTOBUF_NODISCARD std::string* release_partname();
  void set_allocated_partname(std::string* partname);
  private:
  const std::string& _internal_partname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partname(const std::string& value);
  std::string* _internal_mutable_partname();
  public:

  // optional string attributes = 8;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const std::string& attributes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attributes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attributes();
  PROTOBUF_NODISCARD std::string* release_attributes();
  void set_allocated_attributes(std::string* attributes);
  private:
  const std::string& _internal_attributes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attributes(const std::string& value);
  std::string* _internal_mutable_attributes();
  public:

  // optional uint32 pkgRef = 1;
  bool has_pkgref() const;
  private:
  bool _internal_has_pkgref() const;
  public:
  void clear_pkgref();
  uint32_t pkgref() const;
  void set_pkgref(uint32_t value);
  private:
  uint32_t _internal_pkgref() const;
  void _internal_set_pkgref(uint32_t value);
  public:

  // optional float locationX = 2;
  bool has_locationx() const;
  private:
  bool _internal_has_locationx() const;
  public:
  void clear_locationx();
  float locationx() const;
  void set_locationx(float value);
  private:
  float _internal_locationx() const;
  void _internal_set_locationx(float value);
  public:

  // optional float locationY = 3;
  bool has_locationy() const;
  private:
  bool _internal_has_locationy() const;
  public:
  void clear_locationy();
  float locationy() const;
  void set_locationy(float value);
  private:
  float _internal_locationy() const;
  void _internal_set_locationy(float value);
  public:

  // optional float rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // optional bool mirror = 5;
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // optional uint32 id = 9;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 index = 10;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::PropertyRecord > propertyrecords_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord > toeprintrecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ComponentsFile_ComponentRecord_AttributeLookupTableEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> attributelookuptable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attributes_;
    uint32_t pkgref_;
    float locationx_;
    float locationy_;
    float rotation_;
    bool mirror_;
    uint32_t id_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_componentsfile_2eproto;
};
// -------------------------------------------------------------------

class ODBDESIGN_EXPORT ComponentsFile_BomDescriptionRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord) */ {
 public:
  inline ComponentsFile_BomDescriptionRecord() : ComponentsFile_BomDescriptionRecord(nullptr) {}
  ~ComponentsFile_BomDescriptionRecord() override;
  explicit PROTOBUF_CONSTEXPR ComponentsFile_BomDescriptionRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentsFile_BomDescriptionRecord(const ComponentsFile_BomDescriptionRecord& from);
  ComponentsFile_BomDescriptionRecord(ComponentsFile_BomDescriptionRecord&& from) noexcept
    : ComponentsFile_BomDescriptionRecord() {
    *this = ::std::move(from);
  }

  inline ComponentsFile_BomDescriptionRecord& operator=(const ComponentsFile_BomDescriptionRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentsFile_BomDescriptionRecord& operator=(ComponentsFile_BomDescriptionRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentsFile_BomDescriptionRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentsFile_BomDescriptionRecord* internal_default_instance() {
    return reinterpret_cast<const ComponentsFile_BomDescriptionRecord*>(
               &_ComponentsFile_BomDescriptionRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ComponentsFile_BomDescriptionRecord& a, ComponentsFile_BomDescriptionRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentsFile_BomDescriptionRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentsFile_BomDescriptionRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentsFile_BomDescriptionRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentsFile_BomDescriptionRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentsFile_BomDescriptionRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentsFile_BomDescriptionRecord& from) {
    ComponentsFile_BomDescriptionRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentsFile_BomDescriptionRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord";
  }
  protected:
  explicit ComponentsFile_BomDescriptionRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionsFieldNumber = 4,
    kCpnFieldNumber = 1,
    kPkgFieldNumber = 2,
    kIpnFieldNumber = 3,
    kVplVndFieldNumber = 5,
    kVplMpnFieldNumber = 6,
    kVndFieldNumber = 7,
    kMpnFieldNumber = 8,
  };
  // repeated string descriptions = 4;
  int descriptions_size() const;
  private:
  int _internal_descriptions_size() const;
  public:
  void clear_descriptions();
  const std::string& descriptions(int index) const;
  std::string* mutable_descriptions(int index);
  void set_descriptions(int index, const std::string& value);
  void set_descriptions(int index, std::string&& value);
  void set_descriptions(int index, const char* value);
  void set_descriptions(int index, const char* value, size_t size);
  std::string* add_descriptions();
  void add_descriptions(const std::string& value);
  void add_descriptions(std::string&& value);
  void add_descriptions(const char* value);
  void add_descriptions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& descriptions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_descriptions();
  private:
  const std::string& _internal_descriptions(int index) const;
  std::string* _internal_add_descriptions();
  public:

  // optional string cpn = 1;
  bool has_cpn() const;
  private:
  bool _internal_has_cpn() const;
  public:
  void clear_cpn();
  const std::string& cpn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpn();
  PROTOBUF_NODISCARD std::string* release_cpn();
  void set_allocated_cpn(std::string* cpn);
  private:
  const std::string& _internal_cpn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpn(const std::string& value);
  std::string* _internal_mutable_cpn();
  public:

  // optional string pkg = 2;
  bool has_pkg() const;
  private:
  bool _internal_has_pkg() const;
  public:
  void clear_pkg();
  const std::string& pkg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pkg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pkg();
  PROTOBUF_NODISCARD std::string* release_pkg();
  void set_allocated_pkg(std::string* pkg);
  private:
  const std::string& _internal_pkg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pkg(const std::string& value);
  std::string* _internal_mutable_pkg();
  public:

  // optional string ipn = 3;
  bool has_ipn() const;
  private:
  bool _internal_has_ipn() const;
  public:
  void clear_ipn();
  const std::string& ipn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipn();
  PROTOBUF_NODISCARD std::string* release_ipn();
  void set_allocated_ipn(std::string* ipn);
  private:
  const std::string& _internal_ipn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipn(const std::string& value);
  std::string* _internal_mutable_ipn();
  public:

  // optional string vpl_vnd = 5;
  bool has_vpl_vnd() const;
  private:
  bool _internal_has_vpl_vnd() const;
  public:
  void clear_vpl_vnd();
  const std::string& vpl_vnd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vpl_vnd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vpl_vnd();
  PROTOBUF_NODISCARD std::string* release_vpl_vnd();
  void set_allocated_vpl_vnd(std::string* vpl_vnd);
  private:
  const std::string& _internal_vpl_vnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vpl_vnd(const std::string& value);
  std::string* _internal_mutable_vpl_vnd();
  public:

  // optional string vpl_mpn = 6;
  bool has_vpl_mpn() const;
  private:
  bool _internal_has_vpl_mpn() const;
  public:
  void clear_vpl_mpn();
  const std::string& vpl_mpn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vpl_mpn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vpl_mpn();
  PROTOBUF_NODISCARD std::string* release_vpl_mpn();
  void set_allocated_vpl_mpn(std::string* vpl_mpn);
  private:
  const std::string& _internal_vpl_mpn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vpl_mpn(const std::string& value);
  std::string* _internal_mutable_vpl_mpn();
  public:

  // optional string vnd = 7;
  bool has_vnd() const;
  private:
  bool _internal_has_vnd() const;
  public:
  void clear_vnd();
  const std::string& vnd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_vnd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_vnd();
  PROTOBUF_NODISCARD std::string* release_vnd();
  void set_allocated_vnd(std::string* vnd);
  private:
  const std::string& _internal_vnd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vnd(const std::string& value);
  std::string* _internal_mutable_vnd();
  public:

  // optional string mpn = 8;
  bool has_mpn() const;
  private:
  bool _internal_has_mpn() const;
  public:
  void clear_mpn();
  const std::string& mpn() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mpn(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mpn();
  PROTOBUF_NODISCARD std::string* release_mpn();
  void set_allocated_mpn(std::string* mpn);
  private:
  const std::string& _internal_mpn() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mpn(const std::string& value);
  std::string* _internal_mutable_mpn();
  public:

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> descriptions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpn_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pkg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipn_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vpl_vnd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vpl_mpn_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vnd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mpn_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_componentsfile_2eproto;
};
// -------------------------------------------------------------------

class ComponentsFile_ComponentRecordsByNameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComponentsFile_ComponentRecordsByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComponentsFile_ComponentRecordsByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ComponentsFile_ComponentRecordsByNameEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ComponentsFile_ComponentRecordsByNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ComponentsFile_ComponentRecordsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ComponentsFile_ComponentRecordsByNameEntry_DoNotUse& other);
  static const ComponentsFile_ComponentRecordsByNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ComponentsFile_ComponentRecordsByNameEntry_DoNotUse*>(&_ComponentsFile_ComponentRecordsByNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.ComponentsFile.ComponentRecordsByNameEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_componentsfile_2eproto;
};

// -------------------------------------------------------------------

class ComponentsFile_PropertyRecordsByNameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComponentsFile_PropertyRecordsByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::PropertyRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComponentsFile_PropertyRecordsByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::PropertyRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ComponentsFile_PropertyRecordsByNameEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ComponentsFile_PropertyRecordsByNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ComponentsFile_PropertyRecordsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ComponentsFile_PropertyRecordsByNameEntry_DoNotUse& other);
  static const ComponentsFile_PropertyRecordsByNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ComponentsFile_PropertyRecordsByNameEntry_DoNotUse*>(&_ComponentsFile_PropertyRecordsByNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.ComponentsFile.PropertyRecordsByNameEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_componentsfile_2eproto;
};

// -------------------------------------------------------------------

class ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse& other);
  static const ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse*>(&_ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecordsByCpnEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_componentsfile_2eproto;
};

// -------------------------------------------------------------------

class ODBDESIGN_EXPORT ComponentsFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.ComponentsFile) */ {
 public:
  inline ComponentsFile() : ComponentsFile(nullptr) {}
  ~ComponentsFile() override;
  explicit PROTOBUF_CONSTEXPR ComponentsFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComponentsFile(const ComponentsFile& from);
  ComponentsFile(ComponentsFile&& from) noexcept
    : ComponentsFile() {
    *this = ::std::move(from);
  }

  inline ComponentsFile& operator=(const ComponentsFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComponentsFile& operator=(ComponentsFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComponentsFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComponentsFile* internal_default_instance() {
    return reinterpret_cast<const ComponentsFile*>(
               &_ComponentsFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ComponentsFile& a, ComponentsFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ComponentsFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComponentsFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComponentsFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ComponentsFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ComponentsFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ComponentsFile& from) {
    ComponentsFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComponentsFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.ComponentsFile";
  }
  protected:
  explicit ComponentsFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ComponentsFile_ComponentRecord ComponentRecord;
  typedef ComponentsFile_BomDescriptionRecord BomDescriptionRecord;

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeNamesFieldNumber = 7,
    kAttributeTextValuesFieldNumber = 8,
    kComponentRecordsFieldNumber = 9,
    kComponentRecordsByNameFieldNumber = 10,
    kPropertyRecordsFieldNumber = 11,
    kPropertyRecordsByNameFieldNumber = 12,
    kBomDescriptionRecordsByCpnFieldNumber = 13,
    kUnitsFieldNumber = 1,
    kLayerNameFieldNumber = 4,
    kPathFieldNumber = 5,
    kDirectoryFieldNumber = 6,
    kIdFieldNumber = 2,
    kSideFieldNumber = 3,
  };
  // repeated string attributeNames = 7;
  int attributenames_size() const;
  private:
  int _internal_attributenames_size() const;
  public:
  void clear_attributenames();
  const std::string& attributenames(int index) const;
  std::string* mutable_attributenames(int index);
  void set_attributenames(int index, const std::string& value);
  void set_attributenames(int index, std::string&& value);
  void set_attributenames(int index, const char* value);
  void set_attributenames(int index, const char* value, size_t size);
  std::string* add_attributenames();
  void add_attributenames(const std::string& value);
  void add_attributenames(std::string&& value);
  void add_attributenames(const char* value);
  void add_attributenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributenames();
  private:
  const std::string& _internal_attributenames(int index) const;
  std::string* _internal_add_attributenames();
  public:

  // repeated string attributeTextValues = 8;
  int attributetextvalues_size() const;
  private:
  int _internal_attributetextvalues_size() const;
  public:
  void clear_attributetextvalues();
  const std::string& attributetextvalues(int index) const;
  std::string* mutable_attributetextvalues(int index);
  void set_attributetextvalues(int index, const std::string& value);
  void set_attributetextvalues(int index, std::string&& value);
  void set_attributetextvalues(int index, const char* value);
  void set_attributetextvalues(int index, const char* value, size_t size);
  std::string* add_attributetextvalues();
  void add_attributetextvalues(const std::string& value);
  void add_attributetextvalues(std::string&& value);
  void add_attributetextvalues(const char* value);
  void add_attributetextvalues(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& attributetextvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_attributetextvalues();
  private:
  const std::string& _internal_attributetextvalues(int index) const;
  std::string* _internal_add_attributetextvalues();
  public:

  // repeated .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord componentRecords = 9;
  int componentrecords_size() const;
  private:
  int _internal_componentrecords_size() const;
  public:
  void clear_componentrecords();
  ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord* mutable_componentrecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >*
      mutable_componentrecords();
  private:
  const ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord& _internal_componentrecords(int index) const;
  ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord* _internal_add_componentrecords();
  public:
  const ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord& componentrecords(int index) const;
  ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord* add_componentrecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >&
      componentrecords() const;

  // map<string, .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord> componentRecordsByName = 10;
  int componentrecordsbyname_size() const;
  private:
  int _internal_componentrecordsbyname_size() const;
  public:
  void clear_componentrecordsbyname();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >&
      _internal_componentrecordsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >*
      _internal_mutable_componentrecordsbyname();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >&
      componentrecordsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >*
      mutable_componentrecordsbyname();

  // repeated .Odb.Lib.Protobuf.PropertyRecord propertyRecords = 11;
  int propertyrecords_size() const;
  private:
  int _internal_propertyrecords_size() const;
  public:
  void clear_propertyrecords();
  ::Odb::Lib::Protobuf::PropertyRecord* mutable_propertyrecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::PropertyRecord >*
      mutable_propertyrecords();
  private:
  const ::Odb::Lib::Protobuf::PropertyRecord& _internal_propertyrecords(int index) const;
  ::Odb::Lib::Protobuf::PropertyRecord* _internal_add_propertyrecords();
  public:
  const ::Odb::Lib::Protobuf::PropertyRecord& propertyrecords(int index) const;
  ::Odb::Lib::Protobuf::PropertyRecord* add_propertyrecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::PropertyRecord >&
      propertyrecords() const;

  // map<string, .Odb.Lib.Protobuf.PropertyRecord> propertyRecordsByName = 12;
  int propertyrecordsbyname_size() const;
  private:
  int _internal_propertyrecordsbyname_size() const;
  public:
  void clear_propertyrecordsbyname();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::PropertyRecord >&
      _internal_propertyrecordsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::PropertyRecord >*
      _internal_mutable_propertyrecordsbyname();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::PropertyRecord >&
      propertyrecordsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::PropertyRecord >*
      mutable_propertyrecordsbyname();

  // map<string, .Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord> bomDescriptionRecordsByCpn = 13;
  int bomdescriptionrecordsbycpn_size() const;
  private:
  int _internal_bomdescriptionrecordsbycpn_size() const;
  public:
  void clear_bomdescriptionrecordsbycpn();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord >&
      _internal_bomdescriptionrecordsbycpn() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord >*
      _internal_mutable_bomdescriptionrecordsbycpn();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord >&
      bomdescriptionrecordsbycpn() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord >*
      mutable_bomdescriptionrecordsbycpn();

  // optional string units = 1;
  bool has_units() const;
  private:
  bool _internal_has_units() const;
  public:
  void clear_units();
  const std::string& units() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_units(ArgT0&& arg0, ArgT... args);
  std::string* mutable_units();
  PROTOBUF_NODISCARD std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // optional string layerName = 4;
  bool has_layername() const;
  private:
  bool _internal_has_layername() const;
  public:
  void clear_layername();
  const std::string& layername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_layername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_layername();
  PROTOBUF_NODISCARD std::string* release_layername();
  void set_allocated_layername(std::string* layername);
  private:
  const std::string& _internal_layername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_layername(const std::string& value);
  std::string* _internal_mutable_layername();
  public:

  // optional string path = 5;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional string directory = 6;
  bool has_directory() const;
  private:
  bool _internal_has_directory() const;
  public:
  void clear_directory();
  const std::string& directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_directory();
  PROTOBUF_NODISCARD std::string* release_directory();
  void set_allocated_directory(std::string* directory);
  private:
  const std::string& _internal_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_directory(const std::string& value);
  std::string* _internal_mutable_directory();
  public:

  // optional uint32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional .Odb.Lib.Protobuf.BoardSide side = 3;
  bool has_side() const;
  private:
  bool _internal_has_side() const;
  public:
  void clear_side();
  ::Odb::Lib::Protobuf::BoardSide side() const;
  void set_side(::Odb::Lib::Protobuf::BoardSide value);
  private:
  ::Odb::Lib::Protobuf::BoardSide _internal_side() const;
  void _internal_set_side(::Odb::Lib::Protobuf::BoardSide value);
  public:

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.ComponentsFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributenames_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> attributetextvalues_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord > componentrecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ComponentsFile_ComponentRecordsByNameEntry_DoNotUse,
        std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> componentrecordsbyname_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::PropertyRecord > propertyrecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ComponentsFile_PropertyRecordsByNameEntry_DoNotUse,
        std::string, ::Odb::Lib::Protobuf::PropertyRecord,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> propertyrecordsbyname_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ComponentsFile_BomDescriptionRecordsByCpnEntry_DoNotUse,
        std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> bomdescriptionrecordsbycpn_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr directory_;
    uint32_t id_;
    int side_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_componentsfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComponentsFile_ComponentRecord_ToeprintRecord

// optional uint32 pinNumber = 1;
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::_internal_has_pinnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::has_pinnumber() const {
  return _internal_has_pinnumber();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::clear_pinnumber() {
  _impl_.pinnumber_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ComponentsFile_ComponentRecord_ToeprintRecord::_internal_pinnumber() const {
  return _impl_.pinnumber_;
}
inline uint32_t ComponentsFile_ComponentRecord_ToeprintRecord::pinnumber() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.pinNumber)
  return _internal_pinnumber();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::_internal_set_pinnumber(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pinnumber_ = value;
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::set_pinnumber(uint32_t value) {
  _internal_set_pinnumber(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.pinNumber)
}

// optional float locationX = 2;
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::_internal_has_locationx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::has_locationx() const {
  return _internal_has_locationx();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::clear_locationx() {
  _impl_.locationx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float ComponentsFile_ComponentRecord_ToeprintRecord::_internal_locationx() const {
  return _impl_.locationx_;
}
inline float ComponentsFile_ComponentRecord_ToeprintRecord::locationx() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.locationX)
  return _internal_locationx();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::_internal_set_locationx(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.locationx_ = value;
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::set_locationx(float value) {
  _internal_set_locationx(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.locationX)
}

// optional float locationY = 3;
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::_internal_has_locationy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::has_locationy() const {
  return _internal_has_locationy();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::clear_locationy() {
  _impl_.locationy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float ComponentsFile_ComponentRecord_ToeprintRecord::_internal_locationy() const {
  return _impl_.locationy_;
}
inline float ComponentsFile_ComponentRecord_ToeprintRecord::locationy() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.locationY)
  return _internal_locationy();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::_internal_set_locationy(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.locationy_ = value;
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::set_locationy(float value) {
  _internal_set_locationy(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.locationY)
}

// optional float rotation = 4;
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::has_rotation() const {
  return _internal_has_rotation();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::clear_rotation() {
  _impl_.rotation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float ComponentsFile_ComponentRecord_ToeprintRecord::_internal_rotation() const {
  return _impl_.rotation_;
}
inline float ComponentsFile_ComponentRecord_ToeprintRecord::rotation() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.rotation)
  return _internal_rotation();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::_internal_set_rotation(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rotation_ = value;
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.rotation)
}

// optional bool mirror = 5;
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::_internal_has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::has_mirror() const {
  return _internal_has_mirror();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::clear_mirror() {
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::_internal_mirror() const {
  return _impl_.mirror_;
}
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::mirror() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.mirror)
  return _internal_mirror();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::_internal_set_mirror(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.mirror_ = value;
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.mirror)
}

// optional uint32 netNumber = 6;
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::_internal_has_netnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::has_netnumber() const {
  return _internal_has_netnumber();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::clear_netnumber() {
  _impl_.netnumber_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t ComponentsFile_ComponentRecord_ToeprintRecord::_internal_netnumber() const {
  return _impl_.netnumber_;
}
inline uint32_t ComponentsFile_ComponentRecord_ToeprintRecord::netnumber() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.netNumber)
  return _internal_netnumber();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::_internal_set_netnumber(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.netnumber_ = value;
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::set_netnumber(uint32_t value) {
  _internal_set_netnumber(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.netNumber)
}

// optional uint32 subnetNumber = 7;
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::_internal_has_subnetnumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::has_subnetnumber() const {
  return _internal_has_subnetnumber();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::clear_subnetnumber() {
  _impl_.subnetnumber_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t ComponentsFile_ComponentRecord_ToeprintRecord::_internal_subnetnumber() const {
  return _impl_.subnetnumber_;
}
inline uint32_t ComponentsFile_ComponentRecord_ToeprintRecord::subnetnumber() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.subnetNumber)
  return _internal_subnetnumber();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::_internal_set_subnetnumber(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.subnetnumber_ = value;
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::set_subnetnumber(uint32_t value) {
  _internal_set_subnetnumber(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.subnetNumber)
}

// optional string name = 8;
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord_ToeprintRecord::has_name() const {
  return _internal_has_name();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentsFile_ComponentRecord_ToeprintRecord::name() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_ComponentRecord_ToeprintRecord::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.name)
}
inline std::string* ComponentsFile_ComponentRecord_ToeprintRecord::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.name)
  return _s;
}
inline const std::string& ComponentsFile_ComponentRecord_ToeprintRecord::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_ComponentRecord_ToeprintRecord::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_ComponentRecord_ToeprintRecord::release_name() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_ComponentRecord_ToeprintRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord.name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComponentsFile_ComponentRecord

// optional uint32 pkgRef = 1;
inline bool ComponentsFile_ComponentRecord::_internal_has_pkgref() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord::has_pkgref() const {
  return _internal_has_pkgref();
}
inline void ComponentsFile_ComponentRecord::clear_pkgref() {
  _impl_.pkgref_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ComponentsFile_ComponentRecord::_internal_pkgref() const {
  return _impl_.pkgref_;
}
inline uint32_t ComponentsFile_ComponentRecord::pkgref() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.pkgRef)
  return _internal_pkgref();
}
inline void ComponentsFile_ComponentRecord::_internal_set_pkgref(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pkgref_ = value;
}
inline void ComponentsFile_ComponentRecord::set_pkgref(uint32_t value) {
  _internal_set_pkgref(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.pkgRef)
}

// optional float locationX = 2;
inline bool ComponentsFile_ComponentRecord::_internal_has_locationx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord::has_locationx() const {
  return _internal_has_locationx();
}
inline void ComponentsFile_ComponentRecord::clear_locationx() {
  _impl_.locationx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float ComponentsFile_ComponentRecord::_internal_locationx() const {
  return _impl_.locationx_;
}
inline float ComponentsFile_ComponentRecord::locationx() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.locationX)
  return _internal_locationx();
}
inline void ComponentsFile_ComponentRecord::_internal_set_locationx(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.locationx_ = value;
}
inline void ComponentsFile_ComponentRecord::set_locationx(float value) {
  _internal_set_locationx(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.locationX)
}

// optional float locationY = 3;
inline bool ComponentsFile_ComponentRecord::_internal_has_locationy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord::has_locationy() const {
  return _internal_has_locationy();
}
inline void ComponentsFile_ComponentRecord::clear_locationy() {
  _impl_.locationy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float ComponentsFile_ComponentRecord::_internal_locationy() const {
  return _impl_.locationy_;
}
inline float ComponentsFile_ComponentRecord::locationy() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.locationY)
  return _internal_locationy();
}
inline void ComponentsFile_ComponentRecord::_internal_set_locationy(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.locationy_ = value;
}
inline void ComponentsFile_ComponentRecord::set_locationy(float value) {
  _internal_set_locationy(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.locationY)
}

// optional float rotation = 4;
inline bool ComponentsFile_ComponentRecord::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord::has_rotation() const {
  return _internal_has_rotation();
}
inline void ComponentsFile_ComponentRecord::clear_rotation() {
  _impl_.rotation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float ComponentsFile_ComponentRecord::_internal_rotation() const {
  return _impl_.rotation_;
}
inline float ComponentsFile_ComponentRecord::rotation() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.rotation)
  return _internal_rotation();
}
inline void ComponentsFile_ComponentRecord::_internal_set_rotation(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.rotation_ = value;
}
inline void ComponentsFile_ComponentRecord::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.rotation)
}

// optional bool mirror = 5;
inline bool ComponentsFile_ComponentRecord::_internal_has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord::has_mirror() const {
  return _internal_has_mirror();
}
inline void ComponentsFile_ComponentRecord::clear_mirror() {
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ComponentsFile_ComponentRecord::_internal_mirror() const {
  return _impl_.mirror_;
}
inline bool ComponentsFile_ComponentRecord::mirror() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.mirror)
  return _internal_mirror();
}
inline void ComponentsFile_ComponentRecord::_internal_set_mirror(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.mirror_ = value;
}
inline void ComponentsFile_ComponentRecord::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.mirror)
}

// optional string compName = 6;
inline bool ComponentsFile_ComponentRecord::_internal_has_compname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord::has_compname() const {
  return _internal_has_compname();
}
inline void ComponentsFile_ComponentRecord::clear_compname() {
  _impl_.compname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentsFile_ComponentRecord::compname() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.compName)
  return _internal_compname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_ComponentRecord::set_compname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.compname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.compName)
}
inline std::string* ComponentsFile_ComponentRecord::mutable_compname() {
  std::string* _s = _internal_mutable_compname();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.compName)
  return _s;
}
inline const std::string& ComponentsFile_ComponentRecord::_internal_compname() const {
  return _impl_.compname_.Get();
}
inline void ComponentsFile_ComponentRecord::_internal_set_compname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.compname_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_ComponentRecord::_internal_mutable_compname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.compname_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_ComponentRecord::release_compname() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.compName)
  if (!_internal_has_compname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.compname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compname_.IsDefault()) {
    _impl_.compname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_ComponentRecord::set_allocated_compname(std::string* compname) {
  if (compname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.compname_.SetAllocated(compname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compname_.IsDefault()) {
    _impl_.compname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.compName)
}

// optional string partName = 7;
inline bool ComponentsFile_ComponentRecord::_internal_has_partname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord::has_partname() const {
  return _internal_has_partname();
}
inline void ComponentsFile_ComponentRecord::clear_partname() {
  _impl_.partname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ComponentsFile_ComponentRecord::partname() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.partName)
  return _internal_partname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_ComponentRecord::set_partname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.partname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.partName)
}
inline std::string* ComponentsFile_ComponentRecord::mutable_partname() {
  std::string* _s = _internal_mutable_partname();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.partName)
  return _s;
}
inline const std::string& ComponentsFile_ComponentRecord::_internal_partname() const {
  return _impl_.partname_.Get();
}
inline void ComponentsFile_ComponentRecord::_internal_set_partname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.partname_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_ComponentRecord::_internal_mutable_partname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.partname_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_ComponentRecord::release_partname() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.partName)
  if (!_internal_has_partname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.partname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partname_.IsDefault()) {
    _impl_.partname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_ComponentRecord::set_allocated_partname(std::string* partname) {
  if (partname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.partname_.SetAllocated(partname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.partname_.IsDefault()) {
    _impl_.partname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.partName)
}

// optional string attributes = 8;
inline bool ComponentsFile_ComponentRecord::_internal_has_attributes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord::has_attributes() const {
  return _internal_has_attributes();
}
inline void ComponentsFile_ComponentRecord::clear_attributes() {
  _impl_.attributes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ComponentsFile_ComponentRecord::attributes() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.attributes)
  return _internal_attributes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_ComponentRecord::set_attributes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.attributes_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.attributes)
}
inline std::string* ComponentsFile_ComponentRecord::mutable_attributes() {
  std::string* _s = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.attributes)
  return _s;
}
inline const std::string& ComponentsFile_ComponentRecord::_internal_attributes() const {
  return _impl_.attributes_.Get();
}
inline void ComponentsFile_ComponentRecord::_internal_set_attributes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.attributes_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_ComponentRecord::_internal_mutable_attributes() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.attributes_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_ComponentRecord::release_attributes() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.attributes)
  if (!_internal_has_attributes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.attributes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attributes_.IsDefault()) {
    _impl_.attributes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_ComponentRecord::set_allocated_attributes(std::string* attributes) {
  if (attributes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.attributes_.SetAllocated(attributes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.attributes_.IsDefault()) {
    _impl_.attributes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.attributes)
}

// optional uint32 id = 9;
inline bool ComponentsFile_ComponentRecord::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord::has_id() const {
  return _internal_has_id();
}
inline void ComponentsFile_ComponentRecord::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t ComponentsFile_ComponentRecord::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ComponentsFile_ComponentRecord::id() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.id)
  return _internal_id();
}
inline void ComponentsFile_ComponentRecord::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.id_ = value;
}
inline void ComponentsFile_ComponentRecord::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.id)
}

// optional uint32 index = 10;
inline bool ComponentsFile_ComponentRecord::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ComponentsFile_ComponentRecord::has_index() const {
  return _internal_has_index();
}
inline void ComponentsFile_ComponentRecord::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t ComponentsFile_ComponentRecord::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t ComponentsFile_ComponentRecord::index() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.index)
  return _internal_index();
}
inline void ComponentsFile_ComponentRecord::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.index_ = value;
}
inline void ComponentsFile_ComponentRecord::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.index)
}

// repeated .Odb.Lib.Protobuf.PropertyRecord propertyRecords = 11;
inline int ComponentsFile_ComponentRecord::_internal_propertyrecords_size() const {
  return _impl_.propertyrecords_.size();
}
inline int ComponentsFile_ComponentRecord::propertyrecords_size() const {
  return _internal_propertyrecords_size();
}
inline ::Odb::Lib::Protobuf::PropertyRecord* ComponentsFile_ComponentRecord::mutable_propertyrecords(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.propertyRecords)
  return _impl_.propertyrecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::PropertyRecord >*
ComponentsFile_ComponentRecord::mutable_propertyrecords() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.propertyRecords)
  return &_impl_.propertyrecords_;
}
inline const ::Odb::Lib::Protobuf::PropertyRecord& ComponentsFile_ComponentRecord::_internal_propertyrecords(int index) const {
  return _impl_.propertyrecords_.Get(index);
}
inline const ::Odb::Lib::Protobuf::PropertyRecord& ComponentsFile_ComponentRecord::propertyrecords(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.propertyRecords)
  return _internal_propertyrecords(index);
}
inline ::Odb::Lib::Protobuf::PropertyRecord* ComponentsFile_ComponentRecord::_internal_add_propertyrecords() {
  return _impl_.propertyrecords_.Add();
}
inline ::Odb::Lib::Protobuf::PropertyRecord* ComponentsFile_ComponentRecord::add_propertyrecords() {
  ::Odb::Lib::Protobuf::PropertyRecord* _add = _internal_add_propertyrecords();
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.propertyRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::PropertyRecord >&
ComponentsFile_ComponentRecord::propertyrecords() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.propertyRecords)
  return _impl_.propertyrecords_;
}

// repeated .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.ToeprintRecord toeprintRecords = 12;
inline int ComponentsFile_ComponentRecord::_internal_toeprintrecords_size() const {
  return _impl_.toeprintrecords_.size();
}
inline int ComponentsFile_ComponentRecord::toeprintrecords_size() const {
  return _internal_toeprintrecords_size();
}
inline void ComponentsFile_ComponentRecord::clear_toeprintrecords() {
  _impl_.toeprintrecords_.Clear();
}
inline ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord* ComponentsFile_ComponentRecord::mutable_toeprintrecords(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.toeprintRecords)
  return _impl_.toeprintrecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord >*
ComponentsFile_ComponentRecord::mutable_toeprintrecords() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.toeprintRecords)
  return &_impl_.toeprintrecords_;
}
inline const ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord& ComponentsFile_ComponentRecord::_internal_toeprintrecords(int index) const {
  return _impl_.toeprintrecords_.Get(index);
}
inline const ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord& ComponentsFile_ComponentRecord::toeprintrecords(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.toeprintRecords)
  return _internal_toeprintrecords(index);
}
inline ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord* ComponentsFile_ComponentRecord::_internal_add_toeprintrecords() {
  return _impl_.toeprintrecords_.Add();
}
inline ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord* ComponentsFile_ComponentRecord::add_toeprintrecords() {
  ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord* _add = _internal_add_toeprintrecords();
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.toeprintRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord_ToeprintRecord >&
ComponentsFile_ComponentRecord::toeprintrecords() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.toeprintRecords)
  return _impl_.toeprintrecords_;
}

// map<string, string> attributeLookupTable = 13;
inline int ComponentsFile_ComponentRecord::_internal_attributelookuptable_size() const {
  return _impl_.attributelookuptable_.size();
}
inline int ComponentsFile_ComponentRecord::attributelookuptable_size() const {
  return _internal_attributelookuptable_size();
}
inline void ComponentsFile_ComponentRecord::clear_attributelookuptable() {
  _impl_.attributelookuptable_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ComponentsFile_ComponentRecord::_internal_attributelookuptable() const {
  return _impl_.attributelookuptable_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ComponentsFile_ComponentRecord::attributelookuptable() const {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.attributeLookupTable)
  return _internal_attributelookuptable();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ComponentsFile_ComponentRecord::_internal_mutable_attributelookuptable() {
  return _impl_.attributelookuptable_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ComponentsFile_ComponentRecord::mutable_attributelookuptable() {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.ComponentsFile.ComponentRecord.attributeLookupTable)
  return _internal_mutable_attributelookuptable();
}

// -------------------------------------------------------------------

// ComponentsFile_BomDescriptionRecord

// optional string cpn = 1;
inline bool ComponentsFile_BomDescriptionRecord::_internal_has_cpn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentsFile_BomDescriptionRecord::has_cpn() const {
  return _internal_has_cpn();
}
inline void ComponentsFile_BomDescriptionRecord::clear_cpn() {
  _impl_.cpn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::cpn() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.cpn)
  return _internal_cpn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_BomDescriptionRecord::set_cpn(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.cpn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.cpn)
}
inline std::string* ComponentsFile_BomDescriptionRecord::mutable_cpn() {
  std::string* _s = _internal_mutable_cpn();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.cpn)
  return _s;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::_internal_cpn() const {
  return _impl_.cpn_.Get();
}
inline void ComponentsFile_BomDescriptionRecord::_internal_set_cpn(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cpn_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::_internal_mutable_cpn() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cpn_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::release_cpn() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.cpn)
  if (!_internal_has_cpn()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.cpn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpn_.IsDefault()) {
    _impl_.cpn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_BomDescriptionRecord::set_allocated_cpn(std::string* cpn) {
  if (cpn != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cpn_.SetAllocated(cpn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cpn_.IsDefault()) {
    _impl_.cpn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.cpn)
}

// optional string pkg = 2;
inline bool ComponentsFile_BomDescriptionRecord::_internal_has_pkg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentsFile_BomDescriptionRecord::has_pkg() const {
  return _internal_has_pkg();
}
inline void ComponentsFile_BomDescriptionRecord::clear_pkg() {
  _impl_.pkg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::pkg() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.pkg)
  return _internal_pkg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_BomDescriptionRecord::set_pkg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.pkg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.pkg)
}
inline std::string* ComponentsFile_BomDescriptionRecord::mutable_pkg() {
  std::string* _s = _internal_mutable_pkg();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.pkg)
  return _s;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::_internal_pkg() const {
  return _impl_.pkg_.Get();
}
inline void ComponentsFile_BomDescriptionRecord::_internal_set_pkg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pkg_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::_internal_mutable_pkg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pkg_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::release_pkg() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.pkg)
  if (!_internal_has_pkg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.pkg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pkg_.IsDefault()) {
    _impl_.pkg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_BomDescriptionRecord::set_allocated_pkg(std::string* pkg) {
  if (pkg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pkg_.SetAllocated(pkg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pkg_.IsDefault()) {
    _impl_.pkg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.pkg)
}

// optional string ipn = 3;
inline bool ComponentsFile_BomDescriptionRecord::_internal_has_ipn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComponentsFile_BomDescriptionRecord::has_ipn() const {
  return _internal_has_ipn();
}
inline void ComponentsFile_BomDescriptionRecord::clear_ipn() {
  _impl_.ipn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::ipn() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.ipn)
  return _internal_ipn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_BomDescriptionRecord::set_ipn(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.ipn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.ipn)
}
inline std::string* ComponentsFile_BomDescriptionRecord::mutable_ipn() {
  std::string* _s = _internal_mutable_ipn();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.ipn)
  return _s;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::_internal_ipn() const {
  return _impl_.ipn_.Get();
}
inline void ComponentsFile_BomDescriptionRecord::_internal_set_ipn(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ipn_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::_internal_mutable_ipn() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ipn_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::release_ipn() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.ipn)
  if (!_internal_has_ipn()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.ipn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ipn_.IsDefault()) {
    _impl_.ipn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_BomDescriptionRecord::set_allocated_ipn(std::string* ipn) {
  if (ipn != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ipn_.SetAllocated(ipn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ipn_.IsDefault()) {
    _impl_.ipn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.ipn)
}

// repeated string descriptions = 4;
inline int ComponentsFile_BomDescriptionRecord::_internal_descriptions_size() const {
  return _impl_.descriptions_.size();
}
inline int ComponentsFile_BomDescriptionRecord::descriptions_size() const {
  return _internal_descriptions_size();
}
inline void ComponentsFile_BomDescriptionRecord::clear_descriptions() {
  _impl_.descriptions_.Clear();
}
inline std::string* ComponentsFile_BomDescriptionRecord::add_descriptions() {
  std::string* _s = _internal_add_descriptions();
  // @@protoc_insertion_point(field_add_mutable:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
  return _s;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::_internal_descriptions(int index) const {
  return _impl_.descriptions_.Get(index);
}
inline const std::string& ComponentsFile_BomDescriptionRecord::descriptions(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
  return _internal_descriptions(index);
}
inline std::string* ComponentsFile_BomDescriptionRecord::mutable_descriptions(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
  return _impl_.descriptions_.Mutable(index);
}
inline void ComponentsFile_BomDescriptionRecord::set_descriptions(int index, const std::string& value) {
  _impl_.descriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
}
inline void ComponentsFile_BomDescriptionRecord::set_descriptions(int index, std::string&& value) {
  _impl_.descriptions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
}
inline void ComponentsFile_BomDescriptionRecord::set_descriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.descriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
}
inline void ComponentsFile_BomDescriptionRecord::set_descriptions(int index, const char* value, size_t size) {
  _impl_.descriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
}
inline std::string* ComponentsFile_BomDescriptionRecord::_internal_add_descriptions() {
  return _impl_.descriptions_.Add();
}
inline void ComponentsFile_BomDescriptionRecord::add_descriptions(const std::string& value) {
  _impl_.descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
}
inline void ComponentsFile_BomDescriptionRecord::add_descriptions(std::string&& value) {
  _impl_.descriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
}
inline void ComponentsFile_BomDescriptionRecord::add_descriptions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.descriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
}
inline void ComponentsFile_BomDescriptionRecord::add_descriptions(const char* value, size_t size) {
  _impl_.descriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComponentsFile_BomDescriptionRecord::descriptions() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
  return _impl_.descriptions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComponentsFile_BomDescriptionRecord::mutable_descriptions() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.descriptions)
  return &_impl_.descriptions_;
}

// optional string vpl_vnd = 5;
inline bool ComponentsFile_BomDescriptionRecord::_internal_has_vpl_vnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ComponentsFile_BomDescriptionRecord::has_vpl_vnd() const {
  return _internal_has_vpl_vnd();
}
inline void ComponentsFile_BomDescriptionRecord::clear_vpl_vnd() {
  _impl_.vpl_vnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::vpl_vnd() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vpl_vnd)
  return _internal_vpl_vnd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_BomDescriptionRecord::set_vpl_vnd(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.vpl_vnd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vpl_vnd)
}
inline std::string* ComponentsFile_BomDescriptionRecord::mutable_vpl_vnd() {
  std::string* _s = _internal_mutable_vpl_vnd();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vpl_vnd)
  return _s;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::_internal_vpl_vnd() const {
  return _impl_.vpl_vnd_.Get();
}
inline void ComponentsFile_BomDescriptionRecord::_internal_set_vpl_vnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.vpl_vnd_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::_internal_mutable_vpl_vnd() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.vpl_vnd_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::release_vpl_vnd() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vpl_vnd)
  if (!_internal_has_vpl_vnd()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.vpl_vnd_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vpl_vnd_.IsDefault()) {
    _impl_.vpl_vnd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_BomDescriptionRecord::set_allocated_vpl_vnd(std::string* vpl_vnd) {
  if (vpl_vnd != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.vpl_vnd_.SetAllocated(vpl_vnd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vpl_vnd_.IsDefault()) {
    _impl_.vpl_vnd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vpl_vnd)
}

// optional string vpl_mpn = 6;
inline bool ComponentsFile_BomDescriptionRecord::_internal_has_vpl_mpn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ComponentsFile_BomDescriptionRecord::has_vpl_mpn() const {
  return _internal_has_vpl_mpn();
}
inline void ComponentsFile_BomDescriptionRecord::clear_vpl_mpn() {
  _impl_.vpl_mpn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::vpl_mpn() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vpl_mpn)
  return _internal_vpl_mpn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_BomDescriptionRecord::set_vpl_mpn(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.vpl_mpn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vpl_mpn)
}
inline std::string* ComponentsFile_BomDescriptionRecord::mutable_vpl_mpn() {
  std::string* _s = _internal_mutable_vpl_mpn();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vpl_mpn)
  return _s;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::_internal_vpl_mpn() const {
  return _impl_.vpl_mpn_.Get();
}
inline void ComponentsFile_BomDescriptionRecord::_internal_set_vpl_mpn(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.vpl_mpn_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::_internal_mutable_vpl_mpn() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.vpl_mpn_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::release_vpl_mpn() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vpl_mpn)
  if (!_internal_has_vpl_mpn()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.vpl_mpn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vpl_mpn_.IsDefault()) {
    _impl_.vpl_mpn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_BomDescriptionRecord::set_allocated_vpl_mpn(std::string* vpl_mpn) {
  if (vpl_mpn != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.vpl_mpn_.SetAllocated(vpl_mpn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vpl_mpn_.IsDefault()) {
    _impl_.vpl_mpn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vpl_mpn)
}

// optional string vnd = 7;
inline bool ComponentsFile_BomDescriptionRecord::_internal_has_vnd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ComponentsFile_BomDescriptionRecord::has_vnd() const {
  return _internal_has_vnd();
}
inline void ComponentsFile_BomDescriptionRecord::clear_vnd() {
  _impl_.vnd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::vnd() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vnd)
  return _internal_vnd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_BomDescriptionRecord::set_vnd(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.vnd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vnd)
}
inline std::string* ComponentsFile_BomDescriptionRecord::mutable_vnd() {
  std::string* _s = _internal_mutable_vnd();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vnd)
  return _s;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::_internal_vnd() const {
  return _impl_.vnd_.Get();
}
inline void ComponentsFile_BomDescriptionRecord::_internal_set_vnd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.vnd_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::_internal_mutable_vnd() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.vnd_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::release_vnd() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vnd)
  if (!_internal_has_vnd()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.vnd_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vnd_.IsDefault()) {
    _impl_.vnd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_BomDescriptionRecord::set_allocated_vnd(std::string* vnd) {
  if (vnd != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.vnd_.SetAllocated(vnd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.vnd_.IsDefault()) {
    _impl_.vnd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.vnd)
}

// optional string mpn = 8;
inline bool ComponentsFile_BomDescriptionRecord::_internal_has_mpn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ComponentsFile_BomDescriptionRecord::has_mpn() const {
  return _internal_has_mpn();
}
inline void ComponentsFile_BomDescriptionRecord::clear_mpn() {
  _impl_.mpn_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::mpn() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.mpn)
  return _internal_mpn();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile_BomDescriptionRecord::set_mpn(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.mpn_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.mpn)
}
inline std::string* ComponentsFile_BomDescriptionRecord::mutable_mpn() {
  std::string* _s = _internal_mutable_mpn();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.mpn)
  return _s;
}
inline const std::string& ComponentsFile_BomDescriptionRecord::_internal_mpn() const {
  return _impl_.mpn_.Get();
}
inline void ComponentsFile_BomDescriptionRecord::_internal_set_mpn(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mpn_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::_internal_mutable_mpn() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.mpn_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile_BomDescriptionRecord::release_mpn() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.mpn)
  if (!_internal_has_mpn()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.mpn_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mpn_.IsDefault()) {
    _impl_.mpn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile_BomDescriptionRecord::set_allocated_mpn(std::string* mpn) {
  if (mpn != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.mpn_.SetAllocated(mpn, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mpn_.IsDefault()) {
    _impl_.mpn_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord.mpn)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComponentsFile

// optional string units = 1;
inline bool ComponentsFile::_internal_has_units() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ComponentsFile::has_units() const {
  return _internal_has_units();
}
inline void ComponentsFile::clear_units() {
  _impl_.units_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComponentsFile::units() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.units)
  return _internal_units();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile::set_units(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.units_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.units)
}
inline std::string* ComponentsFile::mutable_units() {
  std::string* _s = _internal_mutable_units();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.units)
  return _s;
}
inline const std::string& ComponentsFile::_internal_units() const {
  return _impl_.units_.Get();
}
inline void ComponentsFile::_internal_set_units(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.units_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile::_internal_mutable_units() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.units_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile::release_units() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.units)
  if (!_internal_has_units()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.units_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.units_.SetAllocated(units, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.units_.IsDefault()) {
    _impl_.units_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.units)
}

// optional uint32 id = 2;
inline bool ComponentsFile::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ComponentsFile::has_id() const {
  return _internal_has_id();
}
inline void ComponentsFile::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ComponentsFile::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t ComponentsFile::id() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.id)
  return _internal_id();
}
inline void ComponentsFile::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.id_ = value;
}
inline void ComponentsFile::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.id)
}

// optional .Odb.Lib.Protobuf.BoardSide side = 3;
inline bool ComponentsFile::_internal_has_side() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ComponentsFile::has_side() const {
  return _internal_has_side();
}
inline void ComponentsFile::clear_side() {
  _impl_.side_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::Odb::Lib::Protobuf::BoardSide ComponentsFile::_internal_side() const {
  return static_cast< ::Odb::Lib::Protobuf::BoardSide >(_impl_.side_);
}
inline ::Odb::Lib::Protobuf::BoardSide ComponentsFile::side() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.side)
  return _internal_side();
}
inline void ComponentsFile::_internal_set_side(::Odb::Lib::Protobuf::BoardSide value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.side_ = value;
}
inline void ComponentsFile::set_side(::Odb::Lib::Protobuf::BoardSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.side)
}

// optional string layerName = 4;
inline bool ComponentsFile::_internal_has_layername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ComponentsFile::has_layername() const {
  return _internal_has_layername();
}
inline void ComponentsFile::clear_layername() {
  _impl_.layername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ComponentsFile::layername() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.layerName)
  return _internal_layername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile::set_layername(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.layername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.layerName)
}
inline std::string* ComponentsFile::mutable_layername() {
  std::string* _s = _internal_mutable_layername();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.layerName)
  return _s;
}
inline const std::string& ComponentsFile::_internal_layername() const {
  return _impl_.layername_.Get();
}
inline void ComponentsFile::_internal_set_layername(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.layername_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile::_internal_mutable_layername() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.layername_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile::release_layername() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.layerName)
  if (!_internal_has_layername()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.layername_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.layername_.IsDefault()) {
    _impl_.layername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile::set_allocated_layername(std::string* layername) {
  if (layername != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.layername_.SetAllocated(layername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.layername_.IsDefault()) {
    _impl_.layername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.layerName)
}

// optional string path = 5;
inline bool ComponentsFile::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ComponentsFile::has_path() const {
  return _internal_has_path();
}
inline void ComponentsFile::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ComponentsFile::path() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.path)
}
inline std::string* ComponentsFile::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.path)
  return _s;
}
inline const std::string& ComponentsFile::_internal_path() const {
  return _impl_.path_.Get();
}
inline void ComponentsFile::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile::release_path() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.path)
}

// optional string directory = 6;
inline bool ComponentsFile::_internal_has_directory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ComponentsFile::has_directory() const {
  return _internal_has_directory();
}
inline void ComponentsFile::clear_directory() {
  _impl_.directory_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ComponentsFile::directory() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.directory)
  return _internal_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComponentsFile::set_directory(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.directory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.directory)
}
inline std::string* ComponentsFile::mutable_directory() {
  std::string* _s = _internal_mutable_directory();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.directory)
  return _s;
}
inline const std::string& ComponentsFile::_internal_directory() const {
  return _impl_.directory_.Get();
}
inline void ComponentsFile::_internal_set_directory(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.directory_.Set(value, GetArenaForAllocation());
}
inline std::string* ComponentsFile::_internal_mutable_directory() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.directory_.Mutable(GetArenaForAllocation());
}
inline std::string* ComponentsFile::release_directory() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ComponentsFile.directory)
  if (!_internal_has_directory()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.directory_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.directory_.IsDefault()) {
    _impl_.directory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ComponentsFile::set_allocated_directory(std::string* directory) {
  if (directory != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.directory_.SetAllocated(directory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.directory_.IsDefault()) {
    _impl_.directory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ComponentsFile.directory)
}

// repeated string attributeNames = 7;
inline int ComponentsFile::_internal_attributenames_size() const {
  return _impl_.attributenames_.size();
}
inline int ComponentsFile::attributenames_size() const {
  return _internal_attributenames_size();
}
inline void ComponentsFile::clear_attributenames() {
  _impl_.attributenames_.Clear();
}
inline std::string* ComponentsFile::add_attributenames() {
  std::string* _s = _internal_add_attributenames();
  // @@protoc_insertion_point(field_add_mutable:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
  return _s;
}
inline const std::string& ComponentsFile::_internal_attributenames(int index) const {
  return _impl_.attributenames_.Get(index);
}
inline const std::string& ComponentsFile::attributenames(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
  return _internal_attributenames(index);
}
inline std::string* ComponentsFile::mutable_attributenames(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
  return _impl_.attributenames_.Mutable(index);
}
inline void ComponentsFile::set_attributenames(int index, const std::string& value) {
  _impl_.attributenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
}
inline void ComponentsFile::set_attributenames(int index, std::string&& value) {
  _impl_.attributenames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
}
inline void ComponentsFile::set_attributenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
}
inline void ComponentsFile::set_attributenames(int index, const char* value, size_t size) {
  _impl_.attributenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
}
inline std::string* ComponentsFile::_internal_add_attributenames() {
  return _impl_.attributenames_.Add();
}
inline void ComponentsFile::add_attributenames(const std::string& value) {
  _impl_.attributenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
}
inline void ComponentsFile::add_attributenames(std::string&& value) {
  _impl_.attributenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
}
inline void ComponentsFile::add_attributenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
}
inline void ComponentsFile::add_attributenames(const char* value, size_t size) {
  _impl_.attributenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComponentsFile::attributenames() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
  return _impl_.attributenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComponentsFile::mutable_attributenames() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.ComponentsFile.attributeNames)
  return &_impl_.attributenames_;
}

// repeated string attributeTextValues = 8;
inline int ComponentsFile::_internal_attributetextvalues_size() const {
  return _impl_.attributetextvalues_.size();
}
inline int ComponentsFile::attributetextvalues_size() const {
  return _internal_attributetextvalues_size();
}
inline void ComponentsFile::clear_attributetextvalues() {
  _impl_.attributetextvalues_.Clear();
}
inline std::string* ComponentsFile::add_attributetextvalues() {
  std::string* _s = _internal_add_attributetextvalues();
  // @@protoc_insertion_point(field_add_mutable:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
  return _s;
}
inline const std::string& ComponentsFile::_internal_attributetextvalues(int index) const {
  return _impl_.attributetextvalues_.Get(index);
}
inline const std::string& ComponentsFile::attributetextvalues(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
  return _internal_attributetextvalues(index);
}
inline std::string* ComponentsFile::mutable_attributetextvalues(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
  return _impl_.attributetextvalues_.Mutable(index);
}
inline void ComponentsFile::set_attributetextvalues(int index, const std::string& value) {
  _impl_.attributetextvalues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
}
inline void ComponentsFile::set_attributetextvalues(int index, std::string&& value) {
  _impl_.attributetextvalues_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
}
inline void ComponentsFile::set_attributetextvalues(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributetextvalues_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
}
inline void ComponentsFile::set_attributetextvalues(int index, const char* value, size_t size) {
  _impl_.attributetextvalues_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
}
inline std::string* ComponentsFile::_internal_add_attributetextvalues() {
  return _impl_.attributetextvalues_.Add();
}
inline void ComponentsFile::add_attributetextvalues(const std::string& value) {
  _impl_.attributetextvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
}
inline void ComponentsFile::add_attributetextvalues(std::string&& value) {
  _impl_.attributetextvalues_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
}
inline void ComponentsFile::add_attributetextvalues(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.attributetextvalues_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
}
inline void ComponentsFile::add_attributetextvalues(const char* value, size_t size) {
  _impl_.attributetextvalues_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ComponentsFile::attributetextvalues() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
  return _impl_.attributetextvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ComponentsFile::mutable_attributetextvalues() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.ComponentsFile.attributeTextValues)
  return &_impl_.attributetextvalues_;
}

// repeated .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord componentRecords = 9;
inline int ComponentsFile::_internal_componentrecords_size() const {
  return _impl_.componentrecords_.size();
}
inline int ComponentsFile::componentrecords_size() const {
  return _internal_componentrecords_size();
}
inline void ComponentsFile::clear_componentrecords() {
  _impl_.componentrecords_.Clear();
}
inline ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord* ComponentsFile::mutable_componentrecords(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.componentRecords)
  return _impl_.componentrecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >*
ComponentsFile::mutable_componentrecords() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.ComponentsFile.componentRecords)
  return &_impl_.componentrecords_;
}
inline const ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord& ComponentsFile::_internal_componentrecords(int index) const {
  return _impl_.componentrecords_.Get(index);
}
inline const ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord& ComponentsFile::componentrecords(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.componentRecords)
  return _internal_componentrecords(index);
}
inline ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord* ComponentsFile::_internal_add_componentrecords() {
  return _impl_.componentrecords_.Add();
}
inline ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord* ComponentsFile::add_componentrecords() {
  ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord* _add = _internal_add_componentrecords();
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ComponentsFile.componentRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >&
ComponentsFile::componentrecords() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.ComponentsFile.componentRecords)
  return _impl_.componentrecords_;
}

// map<string, .Odb.Lib.Protobuf.ComponentsFile.ComponentRecord> componentRecordsByName = 10;
inline int ComponentsFile::_internal_componentrecordsbyname_size() const {
  return _impl_.componentrecordsbyname_.size();
}
inline int ComponentsFile::componentrecordsbyname_size() const {
  return _internal_componentrecordsbyname_size();
}
inline void ComponentsFile::clear_componentrecordsbyname() {
  _impl_.componentrecordsbyname_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >&
ComponentsFile::_internal_componentrecordsbyname() const {
  return _impl_.componentrecordsbyname_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >&
ComponentsFile::componentrecordsbyname() const {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.ComponentsFile.componentRecordsByName)
  return _internal_componentrecordsbyname();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >*
ComponentsFile::_internal_mutable_componentrecordsbyname() {
  return _impl_.componentrecordsbyname_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_ComponentRecord >*
ComponentsFile::mutable_componentrecordsbyname() {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.ComponentsFile.componentRecordsByName)
  return _internal_mutable_componentrecordsbyname();
}

// repeated .Odb.Lib.Protobuf.PropertyRecord propertyRecords = 11;
inline int ComponentsFile::_internal_propertyrecords_size() const {
  return _impl_.propertyrecords_.size();
}
inline int ComponentsFile::propertyrecords_size() const {
  return _internal_propertyrecords_size();
}
inline ::Odb::Lib::Protobuf::PropertyRecord* ComponentsFile::mutable_propertyrecords(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ComponentsFile.propertyRecords)
  return _impl_.propertyrecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::PropertyRecord >*
ComponentsFile::mutable_propertyrecords() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.ComponentsFile.propertyRecords)
  return &_impl_.propertyrecords_;
}
inline const ::Odb::Lib::Protobuf::PropertyRecord& ComponentsFile::_internal_propertyrecords(int index) const {
  return _impl_.propertyrecords_.Get(index);
}
inline const ::Odb::Lib::Protobuf::PropertyRecord& ComponentsFile::propertyrecords(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ComponentsFile.propertyRecords)
  return _internal_propertyrecords(index);
}
inline ::Odb::Lib::Protobuf::PropertyRecord* ComponentsFile::_internal_add_propertyrecords() {
  return _impl_.propertyrecords_.Add();
}
inline ::Odb::Lib::Protobuf::PropertyRecord* ComponentsFile::add_propertyrecords() {
  ::Odb::Lib::Protobuf::PropertyRecord* _add = _internal_add_propertyrecords();
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ComponentsFile.propertyRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::PropertyRecord >&
ComponentsFile::propertyrecords() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.ComponentsFile.propertyRecords)
  return _impl_.propertyrecords_;
}

// map<string, .Odb.Lib.Protobuf.PropertyRecord> propertyRecordsByName = 12;
inline int ComponentsFile::_internal_propertyrecordsbyname_size() const {
  return _impl_.propertyrecordsbyname_.size();
}
inline int ComponentsFile::propertyrecordsbyname_size() const {
  return _internal_propertyrecordsbyname_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::PropertyRecord >&
ComponentsFile::_internal_propertyrecordsbyname() const {
  return _impl_.propertyrecordsbyname_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::PropertyRecord >&
ComponentsFile::propertyrecordsbyname() const {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.ComponentsFile.propertyRecordsByName)
  return _internal_propertyrecordsbyname();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::PropertyRecord >*
ComponentsFile::_internal_mutable_propertyrecordsbyname() {
  return _impl_.propertyrecordsbyname_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::PropertyRecord >*
ComponentsFile::mutable_propertyrecordsbyname() {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.ComponentsFile.propertyRecordsByName)
  return _internal_mutable_propertyrecordsbyname();
}

// map<string, .Odb.Lib.Protobuf.ComponentsFile.BomDescriptionRecord> bomDescriptionRecordsByCpn = 13;
inline int ComponentsFile::_internal_bomdescriptionrecordsbycpn_size() const {
  return _impl_.bomdescriptionrecordsbycpn_.size();
}
inline int ComponentsFile::bomdescriptionrecordsbycpn_size() const {
  return _internal_bomdescriptionrecordsbycpn_size();
}
inline void ComponentsFile::clear_bomdescriptionrecordsbycpn() {
  _impl_.bomdescriptionrecordsbycpn_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord >&
ComponentsFile::_internal_bomdescriptionrecordsbycpn() const {
  return _impl_.bomdescriptionrecordsbycpn_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord >&
ComponentsFile::bomdescriptionrecordsbycpn() const {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.ComponentsFile.bomDescriptionRecordsByCpn)
  return _internal_bomdescriptionrecordsbycpn();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord >*
ComponentsFile::_internal_mutable_bomdescriptionrecordsbycpn() {
  return _impl_.bomdescriptionrecordsbycpn_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ComponentsFile_BomDescriptionRecord >*
ComponentsFile::mutable_bomdescriptionrecordsbycpn() {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.ComponentsFile.bomDescriptionRecordsByCpn)
  return _internal_mutable_bomdescriptionrecordsbycpn();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_componentsfile_2eproto
