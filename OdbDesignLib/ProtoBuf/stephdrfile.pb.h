// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stephdrfile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stephdrfile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stephdrfile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stephdrfile_2eproto ODBDESIGN_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_stephdrfile_2eproto {
  static const uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stephdrfile_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class StepHdrFile;
struct StepHdrFileDefaultTypeInternal;
ODBDESIGN_EXPORT extern StepHdrFileDefaultTypeInternal _StepHdrFile_default_instance_;
class StepHdrFile_OnlineValuesEntry_DoNotUse;
struct StepHdrFile_OnlineValuesEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern StepHdrFile_OnlineValuesEntry_DoNotUseDefaultTypeInternal _StepHdrFile_OnlineValuesEntry_DoNotUse_default_instance_;
class StepHdrFile_StepRepeatRecord;
struct StepHdrFile_StepRepeatRecordDefaultTypeInternal;
ODBDESIGN_EXPORT extern StepHdrFile_StepRepeatRecordDefaultTypeInternal _StepHdrFile_StepRepeatRecord_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::StepHdrFile* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::StepHdrFile>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::StepHdrFile_OnlineValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::StepHdrFile_OnlineValuesEntry_DoNotUse>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================

class ODBDESIGN_EXPORT StepHdrFile_StepRepeatRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord) */ {
 public:
  inline StepHdrFile_StepRepeatRecord() : StepHdrFile_StepRepeatRecord(nullptr) {}
  ~StepHdrFile_StepRepeatRecord() override;
  explicit PROTOBUF_CONSTEXPR StepHdrFile_StepRepeatRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepHdrFile_StepRepeatRecord(const StepHdrFile_StepRepeatRecord& from);
  StepHdrFile_StepRepeatRecord(StepHdrFile_StepRepeatRecord&& from) noexcept
    : StepHdrFile_StepRepeatRecord() {
    *this = ::std::move(from);
  }

  inline StepHdrFile_StepRepeatRecord& operator=(const StepHdrFile_StepRepeatRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepHdrFile_StepRepeatRecord& operator=(StepHdrFile_StepRepeatRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepHdrFile_StepRepeatRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepHdrFile_StepRepeatRecord* internal_default_instance() {
    return reinterpret_cast<const StepHdrFile_StepRepeatRecord*>(
               &_StepHdrFile_StepRepeatRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StepHdrFile_StepRepeatRecord& a, StepHdrFile_StepRepeatRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(StepHdrFile_StepRepeatRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepHdrFile_StepRepeatRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StepHdrFile_StepRepeatRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StepHdrFile_StepRepeatRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StepHdrFile_StepRepeatRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StepHdrFile_StepRepeatRecord& from) {
    StepHdrFile_StepRepeatRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepHdrFile_StepRepeatRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord";
  }
  protected:
  explicit StepHdrFile_StepRepeatRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kDxFieldNumber = 4,
    kDyFieldNumber = 5,
    kNxFieldNumber = 6,
    kNyFieldNumber = 7,
    kAngleFieldNumber = 8,
    kFlipFieldNumber = 9,
    kMirrorFieldNumber = 10,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional float x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float dx = 4;
  bool has_dx() const;
  private:
  bool _internal_has_dx() const;
  public:
  void clear_dx();
  float dx() const;
  void set_dx(float value);
  private:
  float _internal_dx() const;
  void _internal_set_dx(float value);
  public:

  // optional float dy = 5;
  bool has_dy() const;
  private:
  bool _internal_has_dy() const;
  public:
  void clear_dy();
  float dy() const;
  void set_dy(float value);
  private:
  float _internal_dy() const;
  void _internal_set_dy(float value);
  public:

  // optional int32 nx = 6;
  bool has_nx() const;
  private:
  bool _internal_has_nx() const;
  public:
  void clear_nx();
  int32_t nx() const;
  void set_nx(int32_t value);
  private:
  int32_t _internal_nx() const;
  void _internal_set_nx(int32_t value);
  public:

  // optional int32 ny = 7;
  bool has_ny() const;
  private:
  bool _internal_has_ny() const;
  public:
  void clear_ny();
  int32_t ny() const;
  void set_ny(int32_t value);
  private:
  int32_t _internal_ny() const;
  void _internal_set_ny(int32_t value);
  public:

  // optional float angle = 8;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // optional bool flip = 9;
  bool has_flip() const;
  private:
  bool _internal_has_flip() const;
  public:
  void clear_flip();
  bool flip() const;
  void set_flip(bool value);
  private:
  bool _internal_flip() const;
  void _internal_set_flip(bool value);
  public:

  // optional bool mirror = 10;
  bool has_mirror() const;
  private:
  bool _internal_has_mirror() const;
  public:
  void clear_mirror();
  bool mirror() const;
  void set_mirror(bool value);
  private:
  bool _internal_mirror() const;
  void _internal_set_mirror(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    float x_;
    float y_;
    float dx_;
    float dy_;
    int32_t nx_;
    int32_t ny_;
    float angle_;
    bool flip_;
    bool mirror_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stephdrfile_2eproto;
};
// -------------------------------------------------------------------

class StepHdrFile_OnlineValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StepHdrFile_OnlineValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StepHdrFile_OnlineValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  StepHdrFile_OnlineValuesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR StepHdrFile_OnlineValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StepHdrFile_OnlineValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StepHdrFile_OnlineValuesEntry_DoNotUse& other);
  static const StepHdrFile_OnlineValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StepHdrFile_OnlineValuesEntry_DoNotUse*>(&_StepHdrFile_OnlineValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.StepHdrFile.OnlineValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.StepHdrFile.OnlineValuesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_stephdrfile_2eproto;
};

// -------------------------------------------------------------------

class ODBDESIGN_EXPORT StepHdrFile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.StepHdrFile) */ {
 public:
  inline StepHdrFile() : StepHdrFile(nullptr) {}
  ~StepHdrFile() override;
  explicit PROTOBUF_CONSTEXPR StepHdrFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepHdrFile(const StepHdrFile& from);
  StepHdrFile(StepHdrFile&& from) noexcept
    : StepHdrFile() {
    *this = ::std::move(from);
  }

  inline StepHdrFile& operator=(const StepHdrFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepHdrFile& operator=(StepHdrFile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StepHdrFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepHdrFile* internal_default_instance() {
    return reinterpret_cast<const StepHdrFile*>(
               &_StepHdrFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StepHdrFile& a, StepHdrFile& b) {
    a.Swap(&b);
  }
  inline void Swap(StepHdrFile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepHdrFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StepHdrFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StepHdrFile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StepHdrFile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StepHdrFile& from) {
    StepHdrFile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepHdrFile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.StepHdrFile";
  }
  protected:
  explicit StepHdrFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StepHdrFile_StepRepeatRecord StepRepeatRecord;

  // accessors -------------------------------------------------------

  enum : int {
    kStepRepeatRecordsFieldNumber = 13,
    kOnlineValuesFieldNumber = 15,
    kAffectingBomFieldNumber = 10,
    kOnlineFieldNumber = 12,
    kPathFieldNumber = 14,
    kXDatumFieldNumber = 1,
    kYDatumFieldNumber = 2,
    kIdFieldNumber = 3,
    kXOriginFieldNumber = 4,
    kYOriginFieldNumber = 5,
    kTopActiveFieldNumber = 6,
    kBottomActiveFieldNumber = 7,
    kRightActiveFieldNumber = 8,
    kLeftActiveFieldNumber = 9,
    kAffectingBomChangedFieldNumber = 11,
  };
  // repeated .Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord stepRepeatRecords = 13;
  int steprepeatrecords_size() const;
  private:
  int _internal_steprepeatrecords_size() const;
  public:
  void clear_steprepeatrecords();
  ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord* mutable_steprepeatrecords(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord >*
      mutable_steprepeatrecords();
  private:
  const ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord& _internal_steprepeatrecords(int index) const;
  ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord* _internal_add_steprepeatrecords();
  public:
  const ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord& steprepeatrecords(int index) const;
  ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord* add_steprepeatrecords();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord >&
      steprepeatrecords() const;

  // map<string, string> onlineValues = 15;
  int onlinevalues_size() const;
  private:
  int _internal_onlinevalues_size() const;
  public:
  void clear_onlinevalues();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_onlinevalues() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_onlinevalues();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      onlinevalues() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_onlinevalues();

  // optional string affectingBom = 10;
  bool has_affectingbom() const;
  private:
  bool _internal_has_affectingbom() const;
  public:
  void clear_affectingbom();
  const std::string& affectingbom() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affectingbom(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affectingbom();
  PROTOBUF_NODISCARD std::string* release_affectingbom();
  void set_allocated_affectingbom(std::string* affectingbom);
  private:
  const std::string& _internal_affectingbom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affectingbom(const std::string& value);
  std::string* _internal_mutable_affectingbom();
  public:

  // optional string online = 12;
  bool has_online() const;
  private:
  bool _internal_has_online() const;
  public:
  void clear_online();
  const std::string& online() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_online(ArgT0&& arg0, ArgT... args);
  std::string* mutable_online();
  PROTOBUF_NODISCARD std::string* release_online();
  void set_allocated_online(std::string* online);
  private:
  const std::string& _internal_online() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_online(const std::string& value);
  std::string* _internal_mutable_online();
  public:

  // optional string path = 14;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional float xDatum = 1;
  bool has_xdatum() const;
  private:
  bool _internal_has_xdatum() const;
  public:
  void clear_xdatum();
  float xdatum() const;
  void set_xdatum(float value);
  private:
  float _internal_xdatum() const;
  void _internal_set_xdatum(float value);
  public:

  // optional float yDatum = 2;
  bool has_ydatum() const;
  private:
  bool _internal_has_ydatum() const;
  public:
  void clear_ydatum();
  float ydatum() const;
  void set_ydatum(float value);
  private:
  float _internal_ydatum() const;
  void _internal_set_ydatum(float value);
  public:

  // optional int32 id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional float xOrigin = 4;
  bool has_xorigin() const;
  private:
  bool _internal_has_xorigin() const;
  public:
  void clear_xorigin();
  float xorigin() const;
  void set_xorigin(float value);
  private:
  float _internal_xorigin() const;
  void _internal_set_xorigin(float value);
  public:

  // optional float yOrigin = 5;
  bool has_yorigin() const;
  private:
  bool _internal_has_yorigin() const;
  public:
  void clear_yorigin();
  float yorigin() const;
  void set_yorigin(float value);
  private:
  float _internal_yorigin() const;
  void _internal_set_yorigin(float value);
  public:

  // optional float topActive = 6;
  bool has_topactive() const;
  private:
  bool _internal_has_topactive() const;
  public:
  void clear_topactive();
  float topactive() const;
  void set_topactive(float value);
  private:
  float _internal_topactive() const;
  void _internal_set_topactive(float value);
  public:

  // optional float bottomActive = 7;
  bool has_bottomactive() const;
  private:
  bool _internal_has_bottomactive() const;
  public:
  void clear_bottomactive();
  float bottomactive() const;
  void set_bottomactive(float value);
  private:
  float _internal_bottomactive() const;
  void _internal_set_bottomactive(float value);
  public:

  // optional float rightActive = 8;
  bool has_rightactive() const;
  private:
  bool _internal_has_rightactive() const;
  public:
  void clear_rightactive();
  float rightactive() const;
  void set_rightactive(float value);
  private:
  float _internal_rightactive() const;
  void _internal_set_rightactive(float value);
  public:

  // optional float leftActive = 9;
  bool has_leftactive() const;
  private:
  bool _internal_has_leftactive() const;
  public:
  void clear_leftactive();
  float leftactive() const;
  void set_leftactive(float value);
  private:
  float _internal_leftactive() const;
  void _internal_set_leftactive(float value);
  public:

  // optional bool affectingBomChanged = 11;
  bool has_affectingbomchanged() const;
  private:
  bool _internal_has_affectingbomchanged() const;
  public:
  void clear_affectingbomchanged();
  bool affectingbomchanged() const;
  void set_affectingbomchanged(bool value);
  private:
  bool _internal_affectingbomchanged() const;
  void _internal_set_affectingbomchanged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.StepHdrFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord > steprepeatrecords_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        StepHdrFile_OnlineValuesEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> onlinevalues_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affectingbom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr online_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    float xdatum_;
    float ydatum_;
    int32_t id_;
    float xorigin_;
    float yorigin_;
    float topactive_;
    float bottomactive_;
    float rightactive_;
    float leftactive_;
    bool affectingbomchanged_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_stephdrfile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StepHdrFile_StepRepeatRecord

// optional string name = 1;
inline bool StepHdrFile_StepRepeatRecord::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StepHdrFile_StepRepeatRecord::has_name() const {
  return _internal_has_name();
}
inline void StepHdrFile_StepRepeatRecord::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StepHdrFile_StepRepeatRecord::name() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StepHdrFile_StepRepeatRecord::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.name)
}
inline std::string* StepHdrFile_StepRepeatRecord::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.name)
  return _s;
}
inline const std::string& StepHdrFile_StepRepeatRecord::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StepHdrFile_StepRepeatRecord::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StepHdrFile_StepRepeatRecord::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StepHdrFile_StepRepeatRecord::release_name() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StepHdrFile_StepRepeatRecord::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.name)
}

// optional float x = 2;
inline bool StepHdrFile_StepRepeatRecord::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StepHdrFile_StepRepeatRecord::has_x() const {
  return _internal_has_x();
}
inline void StepHdrFile_StepRepeatRecord::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float StepHdrFile_StepRepeatRecord::_internal_x() const {
  return _impl_.x_;
}
inline float StepHdrFile_StepRepeatRecord::x() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.x)
  return _internal_x();
}
inline void StepHdrFile_StepRepeatRecord::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.x_ = value;
}
inline void StepHdrFile_StepRepeatRecord::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.x)
}

// optional float y = 3;
inline bool StepHdrFile_StepRepeatRecord::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StepHdrFile_StepRepeatRecord::has_y() const {
  return _internal_has_y();
}
inline void StepHdrFile_StepRepeatRecord::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float StepHdrFile_StepRepeatRecord::_internal_y() const {
  return _impl_.y_;
}
inline float StepHdrFile_StepRepeatRecord::y() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.y)
  return _internal_y();
}
inline void StepHdrFile_StepRepeatRecord::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.y_ = value;
}
inline void StepHdrFile_StepRepeatRecord::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.y)
}

// optional float dx = 4;
inline bool StepHdrFile_StepRepeatRecord::_internal_has_dx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StepHdrFile_StepRepeatRecord::has_dx() const {
  return _internal_has_dx();
}
inline void StepHdrFile_StepRepeatRecord::clear_dx() {
  _impl_.dx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float StepHdrFile_StepRepeatRecord::_internal_dx() const {
  return _impl_.dx_;
}
inline float StepHdrFile_StepRepeatRecord::dx() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.dx)
  return _internal_dx();
}
inline void StepHdrFile_StepRepeatRecord::_internal_set_dx(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.dx_ = value;
}
inline void StepHdrFile_StepRepeatRecord::set_dx(float value) {
  _internal_set_dx(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.dx)
}

// optional float dy = 5;
inline bool StepHdrFile_StepRepeatRecord::_internal_has_dy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StepHdrFile_StepRepeatRecord::has_dy() const {
  return _internal_has_dy();
}
inline void StepHdrFile_StepRepeatRecord::clear_dy() {
  _impl_.dy_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float StepHdrFile_StepRepeatRecord::_internal_dy() const {
  return _impl_.dy_;
}
inline float StepHdrFile_StepRepeatRecord::dy() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.dy)
  return _internal_dy();
}
inline void StepHdrFile_StepRepeatRecord::_internal_set_dy(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dy_ = value;
}
inline void StepHdrFile_StepRepeatRecord::set_dy(float value) {
  _internal_set_dy(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.dy)
}

// optional int32 nx = 6;
inline bool StepHdrFile_StepRepeatRecord::_internal_has_nx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StepHdrFile_StepRepeatRecord::has_nx() const {
  return _internal_has_nx();
}
inline void StepHdrFile_StepRepeatRecord::clear_nx() {
  _impl_.nx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t StepHdrFile_StepRepeatRecord::_internal_nx() const {
  return _impl_.nx_;
}
inline int32_t StepHdrFile_StepRepeatRecord::nx() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.nx)
  return _internal_nx();
}
inline void StepHdrFile_StepRepeatRecord::_internal_set_nx(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.nx_ = value;
}
inline void StepHdrFile_StepRepeatRecord::set_nx(int32_t value) {
  _internal_set_nx(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.nx)
}

// optional int32 ny = 7;
inline bool StepHdrFile_StepRepeatRecord::_internal_has_ny() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StepHdrFile_StepRepeatRecord::has_ny() const {
  return _internal_has_ny();
}
inline void StepHdrFile_StepRepeatRecord::clear_ny() {
  _impl_.ny_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t StepHdrFile_StepRepeatRecord::_internal_ny() const {
  return _impl_.ny_;
}
inline int32_t StepHdrFile_StepRepeatRecord::ny() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.ny)
  return _internal_ny();
}
inline void StepHdrFile_StepRepeatRecord::_internal_set_ny(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ny_ = value;
}
inline void StepHdrFile_StepRepeatRecord::set_ny(int32_t value) {
  _internal_set_ny(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.ny)
}

// optional float angle = 8;
inline bool StepHdrFile_StepRepeatRecord::_internal_has_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StepHdrFile_StepRepeatRecord::has_angle() const {
  return _internal_has_angle();
}
inline void StepHdrFile_StepRepeatRecord::clear_angle() {
  _impl_.angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float StepHdrFile_StepRepeatRecord::_internal_angle() const {
  return _impl_.angle_;
}
inline float StepHdrFile_StepRepeatRecord::angle() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.angle)
  return _internal_angle();
}
inline void StepHdrFile_StepRepeatRecord::_internal_set_angle(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.angle_ = value;
}
inline void StepHdrFile_StepRepeatRecord::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.angle)
}

// optional bool flip = 9;
inline bool StepHdrFile_StepRepeatRecord::_internal_has_flip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool StepHdrFile_StepRepeatRecord::has_flip() const {
  return _internal_has_flip();
}
inline void StepHdrFile_StepRepeatRecord::clear_flip() {
  _impl_.flip_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool StepHdrFile_StepRepeatRecord::_internal_flip() const {
  return _impl_.flip_;
}
inline bool StepHdrFile_StepRepeatRecord::flip() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.flip)
  return _internal_flip();
}
inline void StepHdrFile_StepRepeatRecord::_internal_set_flip(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.flip_ = value;
}
inline void StepHdrFile_StepRepeatRecord::set_flip(bool value) {
  _internal_set_flip(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.flip)
}

// optional bool mirror = 10;
inline bool StepHdrFile_StepRepeatRecord::_internal_has_mirror() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool StepHdrFile_StepRepeatRecord::has_mirror() const {
  return _internal_has_mirror();
}
inline void StepHdrFile_StepRepeatRecord::clear_mirror() {
  _impl_.mirror_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool StepHdrFile_StepRepeatRecord::_internal_mirror() const {
  return _impl_.mirror_;
}
inline bool StepHdrFile_StepRepeatRecord::mirror() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.mirror)
  return _internal_mirror();
}
inline void StepHdrFile_StepRepeatRecord::_internal_set_mirror(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.mirror_ = value;
}
inline void StepHdrFile_StepRepeatRecord::set_mirror(bool value) {
  _internal_set_mirror(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord.mirror)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StepHdrFile

// optional float xDatum = 1;
inline bool StepHdrFile::_internal_has_xdatum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StepHdrFile::has_xdatum() const {
  return _internal_has_xdatum();
}
inline void StepHdrFile::clear_xdatum() {
  _impl_.xdatum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float StepHdrFile::_internal_xdatum() const {
  return _impl_.xdatum_;
}
inline float StepHdrFile::xdatum() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.xDatum)
  return _internal_xdatum();
}
inline void StepHdrFile::_internal_set_xdatum(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.xdatum_ = value;
}
inline void StepHdrFile::set_xdatum(float value) {
  _internal_set_xdatum(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.xDatum)
}

// optional float yDatum = 2;
inline bool StepHdrFile::_internal_has_ydatum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StepHdrFile::has_ydatum() const {
  return _internal_has_ydatum();
}
inline void StepHdrFile::clear_ydatum() {
  _impl_.ydatum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float StepHdrFile::_internal_ydatum() const {
  return _impl_.ydatum_;
}
inline float StepHdrFile::ydatum() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.yDatum)
  return _internal_ydatum();
}
inline void StepHdrFile::_internal_set_ydatum(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ydatum_ = value;
}
inline void StepHdrFile::set_ydatum(float value) {
  _internal_set_ydatum(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.yDatum)
}

// optional int32 id = 3;
inline bool StepHdrFile::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StepHdrFile::has_id() const {
  return _internal_has_id();
}
inline void StepHdrFile::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t StepHdrFile::_internal_id() const {
  return _impl_.id_;
}
inline int32_t StepHdrFile::id() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.id)
  return _internal_id();
}
inline void StepHdrFile::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.id_ = value;
}
inline void StepHdrFile::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.id)
}

// optional float xOrigin = 4;
inline bool StepHdrFile::_internal_has_xorigin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StepHdrFile::has_xorigin() const {
  return _internal_has_xorigin();
}
inline void StepHdrFile::clear_xorigin() {
  _impl_.xorigin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float StepHdrFile::_internal_xorigin() const {
  return _impl_.xorigin_;
}
inline float StepHdrFile::xorigin() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.xOrigin)
  return _internal_xorigin();
}
inline void StepHdrFile::_internal_set_xorigin(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.xorigin_ = value;
}
inline void StepHdrFile::set_xorigin(float value) {
  _internal_set_xorigin(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.xOrigin)
}

// optional float yOrigin = 5;
inline bool StepHdrFile::_internal_has_yorigin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool StepHdrFile::has_yorigin() const {
  return _internal_has_yorigin();
}
inline void StepHdrFile::clear_yorigin() {
  _impl_.yorigin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float StepHdrFile::_internal_yorigin() const {
  return _impl_.yorigin_;
}
inline float StepHdrFile::yorigin() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.yOrigin)
  return _internal_yorigin();
}
inline void StepHdrFile::_internal_set_yorigin(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.yorigin_ = value;
}
inline void StepHdrFile::set_yorigin(float value) {
  _internal_set_yorigin(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.yOrigin)
}

// optional float topActive = 6;
inline bool StepHdrFile::_internal_has_topactive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool StepHdrFile::has_topactive() const {
  return _internal_has_topactive();
}
inline void StepHdrFile::clear_topactive() {
  _impl_.topactive_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float StepHdrFile::_internal_topactive() const {
  return _impl_.topactive_;
}
inline float StepHdrFile::topactive() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.topActive)
  return _internal_topactive();
}
inline void StepHdrFile::_internal_set_topactive(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.topactive_ = value;
}
inline void StepHdrFile::set_topactive(float value) {
  _internal_set_topactive(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.topActive)
}

// optional float bottomActive = 7;
inline bool StepHdrFile::_internal_has_bottomactive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool StepHdrFile::has_bottomactive() const {
  return _internal_has_bottomactive();
}
inline void StepHdrFile::clear_bottomactive() {
  _impl_.bottomactive_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float StepHdrFile::_internal_bottomactive() const {
  return _impl_.bottomactive_;
}
inline float StepHdrFile::bottomactive() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.bottomActive)
  return _internal_bottomactive();
}
inline void StepHdrFile::_internal_set_bottomactive(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bottomactive_ = value;
}
inline void StepHdrFile::set_bottomactive(float value) {
  _internal_set_bottomactive(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.bottomActive)
}

// optional float rightActive = 8;
inline bool StepHdrFile::_internal_has_rightactive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool StepHdrFile::has_rightactive() const {
  return _internal_has_rightactive();
}
inline void StepHdrFile::clear_rightactive() {
  _impl_.rightactive_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float StepHdrFile::_internal_rightactive() const {
  return _impl_.rightactive_;
}
inline float StepHdrFile::rightactive() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.rightActive)
  return _internal_rightactive();
}
inline void StepHdrFile::_internal_set_rightactive(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.rightactive_ = value;
}
inline void StepHdrFile::set_rightactive(float value) {
  _internal_set_rightactive(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.rightActive)
}

// optional float leftActive = 9;
inline bool StepHdrFile::_internal_has_leftactive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool StepHdrFile::has_leftactive() const {
  return _internal_has_leftactive();
}
inline void StepHdrFile::clear_leftactive() {
  _impl_.leftactive_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float StepHdrFile::_internal_leftactive() const {
  return _impl_.leftactive_;
}
inline float StepHdrFile::leftactive() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.leftActive)
  return _internal_leftactive();
}
inline void StepHdrFile::_internal_set_leftactive(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.leftactive_ = value;
}
inline void StepHdrFile::set_leftactive(float value) {
  _internal_set_leftactive(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.leftActive)
}

// optional string affectingBom = 10;
inline bool StepHdrFile::_internal_has_affectingbom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StepHdrFile::has_affectingbom() const {
  return _internal_has_affectingbom();
}
inline void StepHdrFile::clear_affectingbom() {
  _impl_.affectingbom_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StepHdrFile::affectingbom() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.affectingBom)
  return _internal_affectingbom();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StepHdrFile::set_affectingbom(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.affectingbom_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.affectingBom)
}
inline std::string* StepHdrFile::mutable_affectingbom() {
  std::string* _s = _internal_mutable_affectingbom();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepHdrFile.affectingBom)
  return _s;
}
inline const std::string& StepHdrFile::_internal_affectingbom() const {
  return _impl_.affectingbom_.Get();
}
inline void StepHdrFile::_internal_set_affectingbom(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.affectingbom_.Set(value, GetArenaForAllocation());
}
inline std::string* StepHdrFile::_internal_mutable_affectingbom() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.affectingbom_.Mutable(GetArenaForAllocation());
}
inline std::string* StepHdrFile::release_affectingbom() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.StepHdrFile.affectingBom)
  if (!_internal_has_affectingbom()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.affectingbom_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.affectingbom_.IsDefault()) {
    _impl_.affectingbom_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StepHdrFile::set_allocated_affectingbom(std::string* affectingbom) {
  if (affectingbom != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.affectingbom_.SetAllocated(affectingbom, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.affectingbom_.IsDefault()) {
    _impl_.affectingbom_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.StepHdrFile.affectingBom)
}

// optional bool affectingBomChanged = 11;
inline bool StepHdrFile::_internal_has_affectingbomchanged() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool StepHdrFile::has_affectingbomchanged() const {
  return _internal_has_affectingbomchanged();
}
inline void StepHdrFile::clear_affectingbomchanged() {
  _impl_.affectingbomchanged_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool StepHdrFile::_internal_affectingbomchanged() const {
  return _impl_.affectingbomchanged_;
}
inline bool StepHdrFile::affectingbomchanged() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.affectingBomChanged)
  return _internal_affectingbomchanged();
}
inline void StepHdrFile::_internal_set_affectingbomchanged(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.affectingbomchanged_ = value;
}
inline void StepHdrFile::set_affectingbomchanged(bool value) {
  _internal_set_affectingbomchanged(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.affectingBomChanged)
}

// optional string online = 12;
inline bool StepHdrFile::_internal_has_online() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StepHdrFile::has_online() const {
  return _internal_has_online();
}
inline void StepHdrFile::clear_online() {
  _impl_.online_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StepHdrFile::online() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.online)
  return _internal_online();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StepHdrFile::set_online(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.online_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.online)
}
inline std::string* StepHdrFile::mutable_online() {
  std::string* _s = _internal_mutable_online();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepHdrFile.online)
  return _s;
}
inline const std::string& StepHdrFile::_internal_online() const {
  return _impl_.online_.Get();
}
inline void StepHdrFile::_internal_set_online(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.online_.Set(value, GetArenaForAllocation());
}
inline std::string* StepHdrFile::_internal_mutable_online() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.online_.Mutable(GetArenaForAllocation());
}
inline std::string* StepHdrFile::release_online() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.StepHdrFile.online)
  if (!_internal_has_online()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.online_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.online_.IsDefault()) {
    _impl_.online_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StepHdrFile::set_allocated_online(std::string* online) {
  if (online != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.online_.SetAllocated(online, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.online_.IsDefault()) {
    _impl_.online_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.StepHdrFile.online)
}

// repeated .Odb.Lib.Protobuf.StepHdrFile.StepRepeatRecord stepRepeatRecords = 13;
inline int StepHdrFile::_internal_steprepeatrecords_size() const {
  return _impl_.steprepeatrecords_.size();
}
inline int StepHdrFile::steprepeatrecords_size() const {
  return _internal_steprepeatrecords_size();
}
inline void StepHdrFile::clear_steprepeatrecords() {
  _impl_.steprepeatrecords_.Clear();
}
inline ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord* StepHdrFile::mutable_steprepeatrecords(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepHdrFile.stepRepeatRecords)
  return _impl_.steprepeatrecords_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord >*
StepHdrFile::mutable_steprepeatrecords() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.StepHdrFile.stepRepeatRecords)
  return &_impl_.steprepeatrecords_;
}
inline const ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord& StepHdrFile::_internal_steprepeatrecords(int index) const {
  return _impl_.steprepeatrecords_.Get(index);
}
inline const ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord& StepHdrFile::steprepeatrecords(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.stepRepeatRecords)
  return _internal_steprepeatrecords(index);
}
inline ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord* StepHdrFile::_internal_add_steprepeatrecords() {
  return _impl_.steprepeatrecords_.Add();
}
inline ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord* StepHdrFile::add_steprepeatrecords() {
  ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord* _add = _internal_add_steprepeatrecords();
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.StepHdrFile.stepRepeatRecords)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::StepHdrFile_StepRepeatRecord >&
StepHdrFile::steprepeatrecords() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.StepHdrFile.stepRepeatRecords)
  return _impl_.steprepeatrecords_;
}

// optional string path = 14;
inline bool StepHdrFile::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StepHdrFile::has_path() const {
  return _internal_has_path();
}
inline void StepHdrFile::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StepHdrFile::path() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.StepHdrFile.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StepHdrFile::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.StepHdrFile.path)
}
inline std::string* StepHdrFile::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.StepHdrFile.path)
  return _s;
}
inline const std::string& StepHdrFile::_internal_path() const {
  return _impl_.path_.Get();
}
inline void StepHdrFile::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* StepHdrFile::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* StepHdrFile::release_path() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.StepHdrFile.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StepHdrFile::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.StepHdrFile.path)
}

// map<string, string> onlineValues = 15;
inline int StepHdrFile::_internal_onlinevalues_size() const {
  return _impl_.onlinevalues_.size();
}
inline int StepHdrFile::onlinevalues_size() const {
  return _internal_onlinevalues_size();
}
inline void StepHdrFile::clear_onlinevalues() {
  _impl_.onlinevalues_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StepHdrFile::_internal_onlinevalues() const {
  return _impl_.onlinevalues_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StepHdrFile::onlinevalues() const {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.StepHdrFile.onlineValues)
  return _internal_onlinevalues();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StepHdrFile::_internal_mutable_onlinevalues() {
  return _impl_.onlinevalues_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StepHdrFile::mutable_onlinevalues() {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.StepHdrFile.onlineValues)
  return _internal_mutable_onlinevalues();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stephdrfile_2eproto
