// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layerdirectory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_layerdirectory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_layerdirectory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "componentsfile.pb.h"
#include "attrlistfile.pb.h"
#include "featuresfile.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_layerdirectory_2eproto ODBDESIGN_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_layerdirectory_2eproto {
  static const uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_layerdirectory_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class LayerDirectory;
struct LayerDirectoryDefaultTypeInternal;
ODBDESIGN_EXPORT extern LayerDirectoryDefaultTypeInternal _LayerDirectory_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::LayerDirectory* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::LayerDirectory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================

class ODBDESIGN_EXPORT LayerDirectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.LayerDirectory) */ {
 public:
  inline LayerDirectory() : LayerDirectory(nullptr) {}
  ~LayerDirectory() override;
  explicit PROTOBUF_CONSTEXPR LayerDirectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LayerDirectory(const LayerDirectory& from);
  LayerDirectory(LayerDirectory&& from) noexcept
    : LayerDirectory() {
    *this = ::std::move(from);
  }

  inline LayerDirectory& operator=(const LayerDirectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayerDirectory& operator=(LayerDirectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LayerDirectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const LayerDirectory* internal_default_instance() {
    return reinterpret_cast<const LayerDirectory*>(
               &_LayerDirectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LayerDirectory& a, LayerDirectory& b) {
    a.Swap(&b);
  }
  inline void Swap(LayerDirectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LayerDirectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LayerDirectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LayerDirectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LayerDirectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LayerDirectory& from) {
    LayerDirectory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LayerDirectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.LayerDirectory";
  }
  protected:
  explicit LayerDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kComponentsFieldNumber = 3,
    kAttrlistFileFieldNumber = 4,
    kFeatureFileFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional .Odb.Lib.Protobuf.ComponentsFile components = 3;
  bool has_components() const;
  private:
  bool _internal_has_components() const;
  public:
  void clear_components();
  const ::Odb::Lib::Protobuf::ComponentsFile& components() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::ComponentsFile* release_components();
  ::Odb::Lib::Protobuf::ComponentsFile* mutable_components();
  void set_allocated_components(::Odb::Lib::Protobuf::ComponentsFile* components);
  private:
  const ::Odb::Lib::Protobuf::ComponentsFile& _internal_components() const;
  ::Odb::Lib::Protobuf::ComponentsFile* _internal_mutable_components();
  public:
  void unsafe_arena_set_allocated_components(
      ::Odb::Lib::Protobuf::ComponentsFile* components);
  ::Odb::Lib::Protobuf::ComponentsFile* unsafe_arena_release_components();

  // optional .Odb.Lib.Protobuf.AttrListFile attrlistFile = 4;
  bool has_attrlistfile() const;
  private:
  bool _internal_has_attrlistfile() const;
  public:
  void clear_attrlistfile();
  const ::Odb::Lib::Protobuf::AttrListFile& attrlistfile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::AttrListFile* release_attrlistfile();
  ::Odb::Lib::Protobuf::AttrListFile* mutable_attrlistfile();
  void set_allocated_attrlistfile(::Odb::Lib::Protobuf::AttrListFile* attrlistfile);
  private:
  const ::Odb::Lib::Protobuf::AttrListFile& _internal_attrlistfile() const;
  ::Odb::Lib::Protobuf::AttrListFile* _internal_mutable_attrlistfile();
  public:
  void unsafe_arena_set_allocated_attrlistfile(
      ::Odb::Lib::Protobuf::AttrListFile* attrlistfile);
  ::Odb::Lib::Protobuf::AttrListFile* unsafe_arena_release_attrlistfile();

  // optional .Odb.Lib.Protobuf.FeaturesFile featureFile = 5;
  bool has_featurefile() const;
  private:
  bool _internal_has_featurefile() const;
  public:
  void clear_featurefile();
  const ::Odb::Lib::Protobuf::FeaturesFile& featurefile() const;
  PROTOBUF_NODISCARD ::Odb::Lib::Protobuf::FeaturesFile* release_featurefile();
  ::Odb::Lib::Protobuf::FeaturesFile* mutable_featurefile();
  void set_allocated_featurefile(::Odb::Lib::Protobuf::FeaturesFile* featurefile);
  private:
  const ::Odb::Lib::Protobuf::FeaturesFile& _internal_featurefile() const;
  ::Odb::Lib::Protobuf::FeaturesFile* _internal_mutable_featurefile();
  public:
  void unsafe_arena_set_allocated_featurefile(
      ::Odb::Lib::Protobuf::FeaturesFile* featurefile);
  ::Odb::Lib::Protobuf::FeaturesFile* unsafe_arena_release_featurefile();

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.LayerDirectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::Odb::Lib::Protobuf::ComponentsFile* components_;
    ::Odb::Lib::Protobuf::AttrListFile* attrlistfile_;
    ::Odb::Lib::Protobuf::FeaturesFile* featurefile_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_layerdirectory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LayerDirectory

// optional string name = 1;
inline bool LayerDirectory::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayerDirectory::has_name() const {
  return _internal_has_name();
}
inline void LayerDirectory::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayerDirectory::name() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.LayerDirectory.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerDirectory::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.LayerDirectory.name)
}
inline std::string* LayerDirectory::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.LayerDirectory.name)
  return _s;
}
inline const std::string& LayerDirectory::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LayerDirectory::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LayerDirectory::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* LayerDirectory::release_name() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.LayerDirectory.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayerDirectory::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.LayerDirectory.name)
}

// optional string path = 2;
inline bool LayerDirectory::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayerDirectory::has_path() const {
  return _internal_has_path();
}
inline void LayerDirectory::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LayerDirectory::path() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.LayerDirectory.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LayerDirectory::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.LayerDirectory.path)
}
inline std::string* LayerDirectory::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.LayerDirectory.path)
  return _s;
}
inline const std::string& LayerDirectory::_internal_path() const {
  return _impl_.path_.Get();
}
inline void LayerDirectory::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* LayerDirectory::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* LayerDirectory::release_path() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.LayerDirectory.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LayerDirectory::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.LayerDirectory.path)
}

// optional .Odb.Lib.Protobuf.ComponentsFile components = 3;
inline bool LayerDirectory::_internal_has_components() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.components_ != nullptr);
  return value;
}
inline bool LayerDirectory::has_components() const {
  return _internal_has_components();
}
inline const ::Odb::Lib::Protobuf::ComponentsFile& LayerDirectory::_internal_components() const {
  const ::Odb::Lib::Protobuf::ComponentsFile* p = _impl_.components_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::ComponentsFile&>(
      ::Odb::Lib::Protobuf::_ComponentsFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::ComponentsFile& LayerDirectory::components() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.LayerDirectory.components)
  return _internal_components();
}
inline void LayerDirectory::unsafe_arena_set_allocated_components(
    ::Odb::Lib::Protobuf::ComponentsFile* components) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.components_);
  }
  _impl_.components_ = components;
  if (components) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.LayerDirectory.components)
}
inline ::Odb::Lib::Protobuf::ComponentsFile* LayerDirectory::release_components() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Odb::Lib::Protobuf::ComponentsFile* temp = _impl_.components_;
  _impl_.components_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::ComponentsFile* LayerDirectory::unsafe_arena_release_components() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.LayerDirectory.components)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Odb::Lib::Protobuf::ComponentsFile* temp = _impl_.components_;
  _impl_.components_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::ComponentsFile* LayerDirectory::_internal_mutable_components() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.components_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::ComponentsFile>(GetArenaForAllocation());
    _impl_.components_ = p;
  }
  return _impl_.components_;
}
inline ::Odb::Lib::Protobuf::ComponentsFile* LayerDirectory::mutable_components() {
  ::Odb::Lib::Protobuf::ComponentsFile* _msg = _internal_mutable_components();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.LayerDirectory.components)
  return _msg;
}
inline void LayerDirectory::set_allocated_components(::Odb::Lib::Protobuf::ComponentsFile* components) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.components_);
  }
  if (components) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(components));
    if (message_arena != submessage_arena) {
      components = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, components, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.components_ = components;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.LayerDirectory.components)
}

// optional .Odb.Lib.Protobuf.AttrListFile attrlistFile = 4;
inline bool LayerDirectory::_internal_has_attrlistfile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attrlistfile_ != nullptr);
  return value;
}
inline bool LayerDirectory::has_attrlistfile() const {
  return _internal_has_attrlistfile();
}
inline const ::Odb::Lib::Protobuf::AttrListFile& LayerDirectory::_internal_attrlistfile() const {
  const ::Odb::Lib::Protobuf::AttrListFile* p = _impl_.attrlistfile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::AttrListFile&>(
      ::Odb::Lib::Protobuf::_AttrListFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::AttrListFile& LayerDirectory::attrlistfile() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.LayerDirectory.attrlistFile)
  return _internal_attrlistfile();
}
inline void LayerDirectory::unsafe_arena_set_allocated_attrlistfile(
    ::Odb::Lib::Protobuf::AttrListFile* attrlistfile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attrlistfile_);
  }
  _impl_.attrlistfile_ = attrlistfile;
  if (attrlistfile) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.LayerDirectory.attrlistFile)
}
inline ::Odb::Lib::Protobuf::AttrListFile* LayerDirectory::release_attrlistfile() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Odb::Lib::Protobuf::AttrListFile* temp = _impl_.attrlistfile_;
  _impl_.attrlistfile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::AttrListFile* LayerDirectory::unsafe_arena_release_attrlistfile() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.LayerDirectory.attrlistFile)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Odb::Lib::Protobuf::AttrListFile* temp = _impl_.attrlistfile_;
  _impl_.attrlistfile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::AttrListFile* LayerDirectory::_internal_mutable_attrlistfile() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.attrlistfile_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::AttrListFile>(GetArenaForAllocation());
    _impl_.attrlistfile_ = p;
  }
  return _impl_.attrlistfile_;
}
inline ::Odb::Lib::Protobuf::AttrListFile* LayerDirectory::mutable_attrlistfile() {
  ::Odb::Lib::Protobuf::AttrListFile* _msg = _internal_mutable_attrlistfile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.LayerDirectory.attrlistFile)
  return _msg;
}
inline void LayerDirectory::set_allocated_attrlistfile(::Odb::Lib::Protobuf::AttrListFile* attrlistfile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attrlistfile_);
  }
  if (attrlistfile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attrlistfile));
    if (message_arena != submessage_arena) {
      attrlistfile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attrlistfile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.attrlistfile_ = attrlistfile;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.LayerDirectory.attrlistFile)
}

// optional .Odb.Lib.Protobuf.FeaturesFile featureFile = 5;
inline bool LayerDirectory::_internal_has_featurefile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.featurefile_ != nullptr);
  return value;
}
inline bool LayerDirectory::has_featurefile() const {
  return _internal_has_featurefile();
}
inline const ::Odb::Lib::Protobuf::FeaturesFile& LayerDirectory::_internal_featurefile() const {
  const ::Odb::Lib::Protobuf::FeaturesFile* p = _impl_.featurefile_;
  return p != nullptr ? *p : reinterpret_cast<const ::Odb::Lib::Protobuf::FeaturesFile&>(
      ::Odb::Lib::Protobuf::_FeaturesFile_default_instance_);
}
inline const ::Odb::Lib::Protobuf::FeaturesFile& LayerDirectory::featurefile() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.LayerDirectory.featureFile)
  return _internal_featurefile();
}
inline void LayerDirectory::unsafe_arena_set_allocated_featurefile(
    ::Odb::Lib::Protobuf::FeaturesFile* featurefile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.featurefile_);
  }
  _impl_.featurefile_ = featurefile;
  if (featurefile) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Odb.Lib.Protobuf.LayerDirectory.featureFile)
}
inline ::Odb::Lib::Protobuf::FeaturesFile* LayerDirectory::release_featurefile() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Odb::Lib::Protobuf::FeaturesFile* temp = _impl_.featurefile_;
  _impl_.featurefile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Odb::Lib::Protobuf::FeaturesFile* LayerDirectory::unsafe_arena_release_featurefile() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.LayerDirectory.featureFile)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Odb::Lib::Protobuf::FeaturesFile* temp = _impl_.featurefile_;
  _impl_.featurefile_ = nullptr;
  return temp;
}
inline ::Odb::Lib::Protobuf::FeaturesFile* LayerDirectory::_internal_mutable_featurefile() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.featurefile_ == nullptr) {
    auto* p = CreateMaybeMessage<::Odb::Lib::Protobuf::FeaturesFile>(GetArenaForAllocation());
    _impl_.featurefile_ = p;
  }
  return _impl_.featurefile_;
}
inline ::Odb::Lib::Protobuf::FeaturesFile* LayerDirectory::mutable_featurefile() {
  ::Odb::Lib::Protobuf::FeaturesFile* _msg = _internal_mutable_featurefile();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.LayerDirectory.featureFile)
  return _msg;
}
inline void LayerDirectory::set_allocated_featurefile(::Odb::Lib::Protobuf::FeaturesFile* featurefile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.featurefile_);
  }
  if (featurefile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(featurefile));
    if (message_arena != submessage_arena) {
      featurefile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, featurefile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.featurefile_ = featurefile;
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.LayerDirectory.featureFile)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_layerdirectory_2eproto
