// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: color.proto
// Protobuf C++ Version: 5.29.2

#ifndef color_2eproto_2epb_2eh
#define color_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_color_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_color_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_color_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Odb {
namespace Lib {
namespace Protobuf {

// ===================================================================


// -------------------------------------------------------------------

class Color final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Color* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Color));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Color(
      ::google::protobuf::internal::ConstantInitialized);

  inline Color(const Color& from) : Color(nullptr, from) {}
  inline Color(Color&& from) noexcept
      : Color(nullptr, std::move(from)) {}
  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
        &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Color& a, Color& b) { a.Swap(&b); }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Color>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Color& from) { Color::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Color* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Odb.Lib.Protobuf.Color"; }

 protected:
  explicit Color(::google::protobuf::Arena* arena);
  Color(::google::protobuf::Arena* arena, const Color& from);
  Color(::google::protobuf::Arena* arena, Color&& from) noexcept
      : Color(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
    kNoPreferenceFieldNumber = 4,
  };
  // optional float red = 1;
  bool has_red() const;
  void clear_red() ;
  float red() const;
  void set_red(float value);

  private:
  float _internal_red() const;
  void _internal_set_red(float value);

  public:
  // optional float green = 2;
  bool has_green() const;
  void clear_green() ;
  float green() const;
  void set_green(float value);

  private:
  float _internal_green() const;
  void _internal_set_green(float value);

  public:
  // optional float blue = 3;
  bool has_blue() const;
  void clear_blue() ;
  float blue() const;
  void set_blue(float value);

  private:
  float _internal_blue() const;
  void _internal_set_blue(float value);

  public:
  // optional bool noPreference = 4;
  bool has_nopreference() const;
  void clear_nopreference() ;
  bool nopreference() const;
  void set_nopreference(bool value);

  private:
  bool _internal_nopreference() const;
  void _internal_set_nopreference(bool value);

  public:
  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.Color)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Color& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float red_;
    float green_;
    float blue_;
    bool nopreference_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_color_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Color

// optional float red = 1;
inline bool Color::has_red() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Color::clear_red() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.red_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Color::red() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.Color.red)
  return _internal_red();
}
inline void Color::set_red(float value) {
  _internal_set_red(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.Color.red)
}
inline float Color::_internal_red() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.red_;
}
inline void Color::_internal_set_red(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.red_ = value;
}

// optional float green = 2;
inline bool Color::has_green() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Color::clear_green() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.green_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Color::green() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.Color.green)
  return _internal_green();
}
inline void Color::set_green(float value) {
  _internal_set_green(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.Color.green)
}
inline float Color::_internal_green() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.green_;
}
inline void Color::_internal_set_green(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.green_ = value;
}

// optional float blue = 3;
inline bool Color::has_blue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Color::clear_blue() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blue_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Color::blue() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.Color.blue)
  return _internal_blue();
}
inline void Color::set_blue(float value) {
  _internal_set_blue(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.Color.blue)
}
inline float Color::_internal_blue() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.blue_;
}
inline void Color::_internal_set_blue(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.blue_ = value;
}

// optional bool noPreference = 4;
inline bool Color::has_nopreference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Color::clear_nopreference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nopreference_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Color::nopreference() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.Color.noPreference)
  return _internal_nopreference();
}
inline void Color::set_nopreference(bool value) {
  _internal_set_nopreference(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.Color.noPreference)
}
inline bool Color::_internal_nopreference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nopreference_;
}
inline void Color::_internal_set_nopreference(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nopreference_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // color_2eproto_2epb_2eh
