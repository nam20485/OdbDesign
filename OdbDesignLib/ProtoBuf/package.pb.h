// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: package.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_package_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_package_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "pin.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_package_2eproto ODBDESIGN_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct ODBDESIGN_EXPORT TableStruct_package_2eproto {
  static const uint32_t offsets[];
};
ODBDESIGN_EXPORT extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_package_2eproto;
namespace Odb {
namespace Lib {
namespace Protobuf {
namespace ProductModel {
class Package;
struct PackageDefaultTypeInternal;
ODBDESIGN_EXPORT extern PackageDefaultTypeInternal _Package_default_instance_;
class Package_PinsByNameEntry_DoNotUse;
struct Package_PinsByNameEntry_DoNotUseDefaultTypeInternal;
ODBDESIGN_EXPORT extern Package_PinsByNameEntry_DoNotUseDefaultTypeInternal _Package_PinsByNameEntry_DoNotUse_default_instance_;
}  // namespace ProductModel
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb
PROTOBUF_NAMESPACE_OPEN
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ProductModel::Package* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ProductModel::Package>(Arena*);
template<> ODBDESIGN_EXPORT ::Odb::Lib::Protobuf::ProductModel::Package_PinsByNameEntry_DoNotUse* Arena::CreateMaybeMessage<::Odb::Lib::Protobuf::ProductModel::Package_PinsByNameEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Odb {
namespace Lib {
namespace Protobuf {
namespace ProductModel {

// ===================================================================

class Package_PinsByNameEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Package_PinsByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::ProductModel::Pin,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Package_PinsByNameEntry_DoNotUse, 
    std::string, ::Odb::Lib::Protobuf::ProductModel::Pin,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Package_PinsByNameEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Package_PinsByNameEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Package_PinsByNameEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Package_PinsByNameEntry_DoNotUse& other);
  static const Package_PinsByNameEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Package_PinsByNameEntry_DoNotUse*>(&_Package_PinsByNameEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Odb.Lib.Protobuf.ProductModel.Package.PinsByNameEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_package_2eproto;
};

// -------------------------------------------------------------------

class ODBDESIGN_EXPORT Package final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Odb.Lib.Protobuf.ProductModel.Package) */ {
 public:
  inline Package() : Package(nullptr) {}
  ~Package() override;
  explicit PROTOBUF_CONSTEXPR Package(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Package(const Package& from);
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Package& default_instance() {
    return *internal_default_instance();
  }
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Package* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Package& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Package& from) {
    Package::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Odb.Lib.Protobuf.ProductModel.Package";
  }
  protected:
  explicit Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPinsFieldNumber = 2,
    kPinsByNameFieldNumber = 3,
    kNameFieldNumber = 1,
    kIndexFieldNumber = 4,
  };
  // repeated .Odb.Lib.Protobuf.ProductModel.Pin pins = 2;
  int pins_size() const;
  private:
  int _internal_pins_size() const;
  public:
  void clear_pins();
  ::Odb::Lib::Protobuf::ProductModel::Pin* mutable_pins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ProductModel::Pin >*
      mutable_pins();
  private:
  const ::Odb::Lib::Protobuf::ProductModel::Pin& _internal_pins(int index) const;
  ::Odb::Lib::Protobuf::ProductModel::Pin* _internal_add_pins();
  public:
  const ::Odb::Lib::Protobuf::ProductModel::Pin& pins(int index) const;
  ::Odb::Lib::Protobuf::ProductModel::Pin* add_pins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ProductModel::Pin >&
      pins() const;

  // map<string, .Odb.Lib.Protobuf.ProductModel.Pin> pinsByName = 3;
  int pinsbyname_size() const;
  private:
  int _internal_pinsbyname_size() const;
  public:
  void clear_pinsbyname();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ProductModel::Pin >&
      _internal_pinsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ProductModel::Pin >*
      _internal_mutable_pinsbyname();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ProductModel::Pin >&
      pinsbyname() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ProductModel::Pin >*
      mutable_pinsbyname();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 index = 4;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Odb.Lib.Protobuf.ProductModel.Package)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ProductModel::Pin > pins_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Package_PinsByNameEntry_DoNotUse,
        std::string, ::Odb::Lib::Protobuf::ProductModel::Pin,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> pinsbyname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_package_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Package

// optional string name = 1;
inline bool Package::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Package::has_name() const {
  return _internal_has_name();
}
inline void Package::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Package::name() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ProductModel.Package.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ProductModel.Package.name)
}
inline std::string* Package::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ProductModel.Package.name)
  return _s;
}
inline const std::string& Package::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Package::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_name() {
  // @@protoc_insertion_point(field_release:Odb.Lib.Protobuf.ProductModel.Package.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Package::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Odb.Lib.Protobuf.ProductModel.Package.name)
}

// repeated .Odb.Lib.Protobuf.ProductModel.Pin pins = 2;
inline int Package::_internal_pins_size() const {
  return _impl_.pins_.size();
}
inline int Package::pins_size() const {
  return _internal_pins_size();
}
inline ::Odb::Lib::Protobuf::ProductModel::Pin* Package::mutable_pins(int index) {
  // @@protoc_insertion_point(field_mutable:Odb.Lib.Protobuf.ProductModel.Package.pins)
  return _impl_.pins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ProductModel::Pin >*
Package::mutable_pins() {
  // @@protoc_insertion_point(field_mutable_list:Odb.Lib.Protobuf.ProductModel.Package.pins)
  return &_impl_.pins_;
}
inline const ::Odb::Lib::Protobuf::ProductModel::Pin& Package::_internal_pins(int index) const {
  return _impl_.pins_.Get(index);
}
inline const ::Odb::Lib::Protobuf::ProductModel::Pin& Package::pins(int index) const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ProductModel.Package.pins)
  return _internal_pins(index);
}
inline ::Odb::Lib::Protobuf::ProductModel::Pin* Package::_internal_add_pins() {
  return _impl_.pins_.Add();
}
inline ::Odb::Lib::Protobuf::ProductModel::Pin* Package::add_pins() {
  ::Odb::Lib::Protobuf::ProductModel::Pin* _add = _internal_add_pins();
  // @@protoc_insertion_point(field_add:Odb.Lib.Protobuf.ProductModel.Package.pins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Odb::Lib::Protobuf::ProductModel::Pin >&
Package::pins() const {
  // @@protoc_insertion_point(field_list:Odb.Lib.Protobuf.ProductModel.Package.pins)
  return _impl_.pins_;
}

// map<string, .Odb.Lib.Protobuf.ProductModel.Pin> pinsByName = 3;
inline int Package::_internal_pinsbyname_size() const {
  return _impl_.pinsbyname_.size();
}
inline int Package::pinsbyname_size() const {
  return _internal_pinsbyname_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ProductModel::Pin >&
Package::_internal_pinsbyname() const {
  return _impl_.pinsbyname_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ProductModel::Pin >&
Package::pinsbyname() const {
  // @@protoc_insertion_point(field_map:Odb.Lib.Protobuf.ProductModel.Package.pinsByName)
  return _internal_pinsbyname();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ProductModel::Pin >*
Package::_internal_mutable_pinsbyname() {
  return _impl_.pinsbyname_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Odb::Lib::Protobuf::ProductModel::Pin >*
Package::mutable_pinsbyname() {
  // @@protoc_insertion_point(field_mutable_map:Odb.Lib.Protobuf.ProductModel.Package.pinsByName)
  return _internal_mutable_pinsbyname();
}

// optional uint32 index = 4;
inline bool Package::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Package::has_index() const {
  return _internal_has_index();
}
inline void Package::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Package::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t Package::index() const {
  // @@protoc_insertion_point(field_get:Odb.Lib.Protobuf.ProductModel.Package.index)
  return _internal_index();
}
inline void Package::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.index_ = value;
}
inline void Package::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Odb.Lib.Protobuf.ProductModel.Package.index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProductModel
}  // namespace Protobuf
}  // namespace Lib
}  // namespace Odb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_package_2eproto
